
aurora.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000035e8  0000367c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000035e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030e  0080011e  0080011e  0000369a  2**0
                  ALLOC
  3 .stab         000085ec  00000000  00000000  0000369c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002478  00000000  00000000  0000bc88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e100  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_9>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

00000068 <c.1870>:
      68:	3d 6f 6b 3d 00                                      =ok=.

0000006d <c.1873>:
      6d:	50 55 53 48 2f 41 43 4b 00                          PUSH/ACK.

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf ef       	ldi	r28, 0xFF	; 255
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	11 e0       	ldi	r17, 0x01	; 1
      84:	a0 e0       	ldi	r26, 0x00	; 0
      86:	b1 e0       	ldi	r27, 0x01	; 1
      88:	e8 ee       	ldi	r30, 0xE8	; 232
      8a:	f5 e3       	ldi	r31, 0x35	; 53
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	ae 31       	cpi	r26, 0x1E	; 30
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	ae e1       	ldi	r26, 0x1E	; 30
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	ac 32       	cpi	r26, 0x2C	; 44
      a4:	b1 07       	cpc	r27, r17
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 13 14 	call	0x2826	; 0x2826 <main>
      ac:	0c 94 f2 1a 	jmp	0x35e4	; 0x35e4 <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <__vector_9>:
      b4:	1f 92       	push	r1
      b6:	0f 92       	push	r0
      b8:	00 90 5f 00 	lds	r0, 0x005F
      bc:	0f 92       	push	r0
      be:	11 24       	eor	r1, r1
      c0:	2f 93       	push	r18
      c2:	3f 93       	push	r19
      c4:	8f 93       	push	r24
      c6:	9f 93       	push	r25
      c8:	ef 93       	push	r30
      ca:	ff 93       	push	r31
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	80 91 20 04 	lds	r24, 0x0420
      d8:	85 30       	cpi	r24, 0x05	; 5
      da:	28 f4       	brcc	.+10     	; 0xe6 <__vector_9+0x32>
      dc:	80 91 20 04 	lds	r24, 0x0420
      e0:	8f 5f       	subi	r24, 0xFF	; 255
      e2:	80 93 20 04 	sts	0x0420, r24
      e6:	80 91 21 04 	lds	r24, 0x0421
      ea:	8f 5f       	subi	r24, 0xFF	; 255
      ec:	80 93 21 04 	sts	0x0421, r24
      f0:	80 91 21 04 	lds	r24, 0x0421
      f4:	8d 33       	cpi	r24, 0x3D	; 61
      f6:	61 f4       	brne	.+24     	; 0x110 <__vector_9+0x5c>
      f8:	10 92 21 04 	sts	0x0421, r1
      fc:	8b e2       	ldi	r24, 0x2B	; 43
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	2b e2       	ldi	r18, 0x2B	; 43
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	f9 01       	movw	r30, r18
     106:	30 81       	ld	r19, Z
     108:	28 e0       	ldi	r18, 0x08	; 8
     10a:	23 27       	eor	r18, r19
     10c:	fc 01       	movw	r30, r24
     10e:	20 83       	st	Z, r18
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	ff 91       	pop	r31
     116:	ef 91       	pop	r30
     118:	9f 91       	pop	r25
     11a:	8f 91       	pop	r24
     11c:	3f 91       	pop	r19
     11e:	2f 91       	pop	r18
     120:	0f 90       	pop	r0
     122:	00 92 5f 00 	sts	0x005F, r0
     126:	0f 90       	pop	r0
     128:	1f 90       	pop	r1
     12a:	18 95       	reti

0000012c <init_WS2812B>:
		counter = 0;
		PORTD ^= (1 << PORTD3);
	}
}

void init_WS2812B(){
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
	pixels = (uint8_t *)malloc(3 * N_PIXELS);
     134:	84 eb       	ldi	r24, 0xB4	; 180
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	0e 94 08 17 	call	0x2e10	; 0x2e10 <malloc>
     13c:	90 93 1f 04 	sts	0x041F, r25
     140:	80 93 1e 04 	sts	0x041E, r24
	PIXEL_DDR |= (1 << PIXEL_PIN);	// Set pin as output
     144:	84 e2       	ldi	r24, 0x24	; 36
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	24 e2       	ldi	r18, 0x24	; 36
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	f9 01       	movw	r30, r18
     14e:	20 81       	ld	r18, Z
     150:	21 60       	ori	r18, 0x01	; 1
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
	PIXEL_PORT &= (0 << PIXEL_PIN);	// Pull pin low
     156:	85 e2       	ldi	r24, 0x25	; 37
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	fc 01       	movw	r30, r24
     15c:	80 81       	ld	r24, Z
     15e:	85 e2       	ldi	r24, 0x25	; 37
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	fc 01       	movw	r30, r24
     164:	10 82       	st	Z, r1
	latchCounter = 5;
     166:	85 e0       	ldi	r24, 0x05	; 5
     168:	80 93 20 04 	sts	0x0420, r24
}
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <show_WS2812B>:

void show_WS2812B(){
     172:	ff 92       	push	r15
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
     178:	cf 93       	push	r28
     17a:	df 93       	push	r29
     17c:	cd b7       	in	r28, 0x3d	; 61
     17e:	de b7       	in	r29, 0x3e	; 62
     180:	2f 97       	sbiw	r28, 0x0f	; 15
     182:	0f b6       	in	r0, 0x3f	; 63
     184:	f8 94       	cli
     186:	de bf       	out	0x3e, r29	; 62
     188:	0f be       	out	0x3f, r0	; 63
     18a:	cd bf       	out	0x3d, r28	; 61
	volatile uint16_t
	i   = 3 * N_PIXELS; // Loop counter
     18c:	84 eb       	ldi	r24, 0xB4	; 180
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	9f 83       	std	Y+7, r25	; 0x07
     192:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8_t
	*port,	// Output port register
	*ptr = pixels,   // Pointer to next byte
     194:	80 91 1e 04 	lds	r24, 0x041E
     198:	90 91 1f 04 	lds	r25, 0x041F
     19c:	9a 83       	std	Y+2, r25	; 0x02
     19e:	89 83       	std	Y+1, r24	; 0x01
	b   = *ptr++,   // Current byte value
     1a0:	89 81       	ldd	r24, Y+1	; 0x01
     1a2:	9a 81       	ldd	r25, Y+2	; 0x02
     1a4:	9c 01       	movw	r18, r24
     1a6:	2f 5f       	subi	r18, 0xFF	; 255
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	3a 83       	std	Y+2, r19	; 0x02
     1ac:	29 83       	std	Y+1, r18	; 0x01
     1ae:	dc 01       	movw	r26, r24
     1b0:	8c 91       	ld	r24, X
     1b2:	88 87       	std	Y+8, r24	; 0x08

    // 20 inst. clocks per bit: HHHHHxxxxxxxxLLLLLLL
    // ST instructions:         ^   ^        ^       (T=0,5,13)

	// Wait to ensure we have latched previous show()
	while (latchCounter < 5);
     1b4:	00 00       	nop
     1b6:	80 91 20 04 	lds	r24, 0x0420
     1ba:	85 30       	cpi	r24, 0x05	; 5
     1bc:	e0 f3       	brcs	.-8      	; 0x1b6 <show_WS2812B+0x44>

	// Disable interrupts
	uint8_t oldSREG = SREG;
     1be:	8f e5       	ldi	r24, 0x5F	; 95
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	8b 83       	std	Y+3, r24	; 0x03
	cli();
     1c8:	f8 94       	cli

    volatile uint8_t next, bit;

    port = &PIXEL_PORT;
     1ca:	85 e2       	ldi	r24, 0x25	; 37
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	9d 83       	std	Y+5, r25	; 0x05
     1d0:	8c 83       	std	Y+4, r24	; 0x04
    hi   = *port |  (1 << PIXEL_PIN);
     1d2:	8c 81       	ldd	r24, Y+4	; 0x04
     1d4:	9d 81       	ldd	r25, Y+5	; 0x05
     1d6:	dc 01       	movw	r26, r24
     1d8:	8c 91       	ld	r24, X
     1da:	81 60       	ori	r24, 0x01	; 1
     1dc:	89 87       	std	Y+9, r24	; 0x09
    lo   = *port & ~(1 << PIXEL_PIN);
     1de:	8c 81       	ldd	r24, Y+4	; 0x04
     1e0:	9d 81       	ldd	r25, Y+5	; 0x05
     1e2:	fc 01       	movw	r30, r24
     1e4:	80 81       	ld	r24, Z
     1e6:	8e 7f       	andi	r24, 0xFE	; 254
     1e8:	8a 87       	std	Y+10, r24	; 0x0a
    next = lo;
     1ea:	8a 85       	ldd	r24, Y+10	; 0x0a
     1ec:	8b 87       	std	Y+11, r24	; 0x0b
    bit  = 8;
     1ee:	88 e0       	ldi	r24, 0x08	; 8
     1f0:	8c 87       	std	Y+12, r24	; 0x0c

    asm volatile(
     1f2:	f9 85       	ldd	r31, Y+9	; 0x09
     1f4:	fd 87       	std	Y+13, r31	; 0x0d
     1f6:	fa 84       	ldd	r15, Y+10	; 0x0a
     1f8:	fe 86       	std	Y+14, r15	; 0x0e
     1fa:	e8 85       	ldd	r30, Y+8	; 0x08
     1fc:	7c 85       	ldd	r23, Y+12	; 0x0c
     1fe:	6b 85       	ldd	r22, Y+11	; 0x0b
     200:	8e 81       	ldd	r24, Y+6	; 0x06
     202:	9f 81       	ldd	r25, Y+7	; 0x07
     204:	49 81       	ldd	r20, Y+1	; 0x01
     206:	5a 81       	ldd	r21, Y+2	; 0x02
     208:	2c 81       	ldd	r18, Y+4	; 0x04
     20a:	3d 81       	ldd	r19, Y+5	; 0x05
     20c:	ef 87       	std	Y+15, r30	; 0x0f
     20e:	d9 01       	movw	r26, r18
     210:	ff 84       	ldd	r15, Y+15	; 0x0f
     212:	fa 01       	movw	r30, r20
     214:	0d 85       	ldd	r16, Y+13	; 0x0d
     216:	1e 85       	ldd	r17, Y+14	; 0x0e

00000218 <head20>:
     218:	0c 93       	st	X, r16
     21a:	f7 fc       	sbrc	r15, 7
     21c:	60 2f       	mov	r22, r16
     21e:	7a 95       	dec	r23
     220:	6c 93       	st	X, r22
     222:	61 2f       	mov	r22, r17
     224:	39 f0       	breq	.+14     	; 0x234 <nextbyte20>
     226:	ff 1c       	adc	r15, r15
     228:	00 c0       	rjmp	.+0      	; 0x22a <head20+0x12>
     22a:	00 00       	nop
     22c:	1c 93       	st	X, r17
     22e:	00 00       	nop
     230:	00 c0       	rjmp	.+0      	; 0x232 <head20+0x1a>
     232:	f2 cf       	rjmp	.-28     	; 0x218 <head20>

00000234 <nextbyte20>:
     234:	78 e0       	ldi	r23, 0x08	; 8
     236:	f1 90       	ld	r15, Z+
     238:	1c 93       	st	X, r17
     23a:	00 00       	nop
     23c:	01 97       	sbiw	r24, 0x01	; 1
     23e:	61 f7       	brne	.-40     	; 0x218 <head20>
     240:	ff 86       	std	Y+15, r15	; 0x0f
     242:	9d 01       	movw	r18, r26
     244:	3d 83       	std	Y+5, r19	; 0x05
     246:	2c 83       	std	Y+4, r18	; 0x04
     248:	2f 85       	ldd	r18, Y+15	; 0x0f
     24a:	28 87       	std	Y+8, r18	; 0x08
     24c:	7c 87       	std	Y+12, r23	; 0x0c
     24e:	6b 87       	std	Y+11, r22	; 0x0b
     250:	9f 83       	std	Y+7, r25	; 0x07
     252:	8e 83       	std	Y+6, r24	; 0x06
      : [ptr]    "e" (ptr),
        [hi]     "r" (hi),
        [lo]     "r" (lo));

	// Restore SREG
	SREG = oldSREG;
     254:	8f e5       	ldi	r24, 0x5F	; 95
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	2b 81       	ldd	r18, Y+3	; 0x03
     25a:	dc 01       	movw	r26, r24
     25c:	2c 93       	st	X, r18

	latchCounter = 0;
     25e:	10 92 20 04 	sts	0x0420, r1
}
     262:	2f 96       	adiw	r28, 0x0f	; 15
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	ff 90       	pop	r15
     278:	08 95       	ret

0000027a <set_WS2812B>:

//void set_WS2812B(uint16_t n, uint8_t red, uint8_t green, uint8_t blue){
void set_WS2812B(uint8_t n, uint8_t red, uint8_t green, uint8_t blue){
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	00 d0       	rcall	.+0      	; 0x280 <set_WS2812B+0x6>
     280:	00 d0       	rcall	.+0      	; 0x282 <set_WS2812B+0x8>
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	89 83       	std	Y+1, r24	; 0x01
     288:	6a 83       	std	Y+2, r22	; 0x02
     28a:	4b 83       	std	Y+3, r20	; 0x03
     28c:	2c 83       	std	Y+4, r18	; 0x04
	if (n > N_PIXELS) return;
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	8d 33       	cpi	r24, 0x3D	; 61
     292:	08 f0       	brcs	.+2      	; 0x296 <set_WS2812B+0x1c>
     294:	3e c0       	rjmp	.+124    	; 0x312 <set_WS2812B+0x98>

	pixels[3*(n-1)    ] = green;
     296:	40 91 1e 04 	lds	r20, 0x041E
     29a:	50 91 1f 04 	lds	r21, 0x041F
     29e:	89 81       	ldd	r24, Y+1	; 0x01
     2a0:	88 2f       	mov	r24, r24
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	9c 01       	movw	r18, r24
     2a6:	21 50       	subi	r18, 0x01	; 1
     2a8:	31 09       	sbc	r19, r1
     2aa:	c9 01       	movw	r24, r18
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	82 0f       	add	r24, r18
     2b2:	93 1f       	adc	r25, r19
     2b4:	84 0f       	add	r24, r20
     2b6:	95 1f       	adc	r25, r21
     2b8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 83       	st	Z, r18
	pixels[3*(n-1) + 1] = red;
     2be:	40 91 1e 04 	lds	r20, 0x041E
     2c2:	50 91 1f 04 	lds	r21, 0x041F
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	88 2f       	mov	r24, r24
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	9c 01       	movw	r18, r24
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	31 09       	sbc	r19, r1
     2d2:	c9 01       	movw	r24, r18
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	82 0f       	add	r24, r18
     2da:	93 1f       	adc	r25, r19
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	84 0f       	add	r24, r20
     2e0:	95 1f       	adc	r25, r21
     2e2:	2a 81       	ldd	r18, Y+2	; 0x02
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
	pixels[3*(n-1) + 2] = blue;
     2e8:	40 91 1e 04 	lds	r20, 0x041E
     2ec:	50 91 1f 04 	lds	r21, 0x041F
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	88 2f       	mov	r24, r24
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	9c 01       	movw	r18, r24
     2f8:	21 50       	subi	r18, 0x01	; 1
     2fa:	31 09       	sbc	r19, r1
     2fc:	c9 01       	movw	r24, r18
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	82 0f       	add	r24, r18
     304:	93 1f       	adc	r25, r19
     306:	02 96       	adiw	r24, 0x02	; 2
     308:	84 0f       	add	r24, r20
     30a:	95 1f       	adc	r25, r21
     30c:	2c 81       	ldd	r18, Y+4	; 0x04
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18
}
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <splitString>:
#include <stdio.h>
#include <string.h>

void splitString(char *rslt, char *str,uint8_t start, uint8_t end){
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	2a 97       	sbiw	r28, 0x0a	; 10
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	9e 83       	std	Y+6, r25	; 0x06
     336:	8d 83       	std	Y+5, r24	; 0x05
     338:	78 87       	std	Y+8, r23	; 0x08
     33a:	6f 83       	std	Y+7, r22	; 0x07
     33c:	49 87       	std	Y+9, r20	; 0x09
     33e:	2a 87       	std	Y+10, r18	; 0x0a
  char *ptr = &str[start];
     340:	89 85       	ldd	r24, Y+9	; 0x09
     342:	88 2f       	mov	r24, r24
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	2f 81       	ldd	r18, Y+7	; 0x07
     348:	38 85       	ldd	r19, Y+8	; 0x08
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	9a 83       	std	Y+2, r25	; 0x02
     350:	89 83       	std	Y+1, r24	; 0x01
  uint8_t i=0;
     352:	1b 82       	std	Y+3, r1	; 0x03
  uint8_t count = 0;
     354:	1c 82       	std	Y+4, r1	; 0x04

 for(i=start;i<=end;i++){
     356:	89 85       	ldd	r24, Y+9	; 0x09
     358:	8b 83       	std	Y+3, r24	; 0x03
     35a:	1f c0       	rjmp	.+62     	; 0x39a <splitString+0x7a>
   if(*ptr == '\0'){break;}
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	fc 01       	movw	r30, r24
     362:	80 81       	ld	r24, Z
     364:	88 23       	and	r24, r24
     366:	09 f4       	brne	.+2      	; 0x36a <splitString+0x4a>
     368:	1c c0       	rjmp	.+56     	; 0x3a2 <splitString+0x82>
   rslt[count] = *ptr;
     36a:	8c 81       	ldd	r24, Y+4	; 0x04
     36c:	88 2f       	mov	r24, r24
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	2d 81       	ldd	r18, Y+5	; 0x05
     372:	3e 81       	ldd	r19, Y+6	; 0x06
     374:	82 0f       	add	r24, r18
     376:	93 1f       	adc	r25, r19
     378:	29 81       	ldd	r18, Y+1	; 0x01
     37a:	3a 81       	ldd	r19, Y+2	; 0x02
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
   ptr++;
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	01 96       	adiw	r24, 0x01	; 1
     38a:	9a 83       	std	Y+2, r25	; 0x02
     38c:	89 83       	std	Y+1, r24	; 0x01
   count++;
     38e:	8c 81       	ldd	r24, Y+4	; 0x04
     390:	8f 5f       	subi	r24, 0xFF	; 255
     392:	8c 83       	std	Y+4, r24	; 0x04
void splitString(char *rslt, char *str,uint8_t start, uint8_t end){
  char *ptr = &str[start];
  uint8_t i=0;
  uint8_t count = 0;

 for(i=start;i<=end;i++){
     394:	8b 81       	ldd	r24, Y+3	; 0x03
     396:	8f 5f       	subi	r24, 0xFF	; 255
     398:	8b 83       	std	Y+3, r24	; 0x03
     39a:	9b 81       	ldd	r25, Y+3	; 0x03
     39c:	8a 85       	ldd	r24, Y+10	; 0x0a
     39e:	89 17       	cp	r24, r25
     3a0:	e8 f6       	brcc	.-70     	; 0x35c <splitString+0x3c>
   if(*ptr == '\0'){break;}
   rslt[count] = *ptr;
   ptr++;
   count++;
  }
  rslt[(end-start)+1] = '\0';
     3a2:	8a 85       	ldd	r24, Y+10	; 0x0a
     3a4:	28 2f       	mov	r18, r24
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	89 85       	ldd	r24, Y+9	; 0x09
     3aa:	88 2f       	mov	r24, r24
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	a9 01       	movw	r20, r18
     3b0:	48 1b       	sub	r20, r24
     3b2:	59 0b       	sbc	r21, r25
     3b4:	ca 01       	movw	r24, r20
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	2d 81       	ldd	r18, Y+5	; 0x05
     3ba:	3e 81       	ldd	r19, Y+6	; 0x06
     3bc:	82 0f       	add	r24, r18
     3be:	93 1f       	adc	r25, r19
     3c0:	fc 01       	movw	r30, r24
     3c2:	10 82       	st	Z, r1
  return;
     3c4:	00 00       	nop
}
     3c6:	2a 96       	adiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	08 95       	ret

000003d8 <hex2int>:

/**
 * hex2int
 * take a hex string and convert it to a 32bit number (max 8 hex digits)
 */
uint8_t hex2int(char *hex) {
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	00 d0       	rcall	.+0      	; 0x3de <hex2int+0x6>
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <hex2int+0x8>
     3e0:	cd b7       	in	r28, 0x3d	; 61
     3e2:	de b7       	in	r29, 0x3e	; 62
     3e4:	9c 83       	std	Y+4, r25	; 0x04
     3e6:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t val = 0;
     3e8:	19 82       	std	Y+1, r1	; 0x01
    while (*hex) {
     3ea:	35 c0       	rjmp	.+106    	; 0x456 <hex2int+0x7e>
        // get current character then increment
    	uint8_t byte = *hex++;
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	9c 01       	movw	r18, r24
     3f2:	2f 5f       	subi	r18, 0xFF	; 255
     3f4:	3f 4f       	sbci	r19, 0xFF	; 255
     3f6:	3c 83       	std	Y+4, r19	; 0x04
     3f8:	2b 83       	std	Y+3, r18	; 0x03
     3fa:	fc 01       	movw	r30, r24
     3fc:	80 81       	ld	r24, Z
     3fe:	8a 83       	std	Y+2, r24	; 0x02
        //printf("byte: %i\n", byte);
        // transform hex character to the 4bit equivalent number, using the ascii table indexes
        if (byte >= '0' && byte <= '9') byte = byte - '0';
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	80 33       	cpi	r24, 0x30	; 48
     404:	38 f0       	brcs	.+14     	; 0x414 <hex2int+0x3c>
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	8a 33       	cpi	r24, 0x3A	; 58
     40a:	20 f4       	brcc	.+8      	; 0x414 <hex2int+0x3c>
     40c:	8a 81       	ldd	r24, Y+2	; 0x02
     40e:	80 53       	subi	r24, 0x30	; 48
     410:	8a 83       	std	Y+2, r24	; 0x02
     412:	13 c0       	rjmp	.+38     	; 0x43a <hex2int+0x62>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	81 36       	cpi	r24, 0x61	; 97
     418:	38 f0       	brcs	.+14     	; 0x428 <hex2int+0x50>
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	87 36       	cpi	r24, 0x67	; 103
     41e:	20 f4       	brcc	.+8      	; 0x428 <hex2int+0x50>
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	87 55       	subi	r24, 0x57	; 87
     424:	8a 83       	std	Y+2, r24	; 0x02
     426:	09 c0       	rjmp	.+18     	; 0x43a <hex2int+0x62>
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
     428:	8a 81       	ldd	r24, Y+2	; 0x02
     42a:	81 34       	cpi	r24, 0x41	; 65
     42c:	30 f0       	brcs	.+12     	; 0x43a <hex2int+0x62>
     42e:	8a 81       	ldd	r24, Y+2	; 0x02
     430:	87 34       	cpi	r24, 0x47	; 71
     432:	18 f4       	brcc	.+6      	; 0x43a <hex2int+0x62>
     434:	8a 81       	ldd	r24, Y+2	; 0x02
     436:	87 53       	subi	r24, 0x37	; 55
     438:	8a 83       	std	Y+2, r24	; 0x02
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        val = (val << 4) | (byte & 0xF);
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	82 95       	swap	r24
     442:	92 95       	swap	r25
     444:	90 7f       	andi	r25, 0xF0	; 240
     446:	98 27       	eor	r25, r24
     448:	80 7f       	andi	r24, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	98 2f       	mov	r25, r24
     44e:	8a 81       	ldd	r24, Y+2	; 0x02
     450:	8f 70       	andi	r24, 0x0F	; 15
     452:	89 2b       	or	r24, r25
     454:	89 83       	std	Y+1, r24	; 0x01
 * hex2int
 * take a hex string and convert it to a 32bit number (max 8 hex digits)
 */
uint8_t hex2int(char *hex) {
	uint8_t val = 0;
    while (*hex) {
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	9c 81       	ldd	r25, Y+4	; 0x04
     45a:	fc 01       	movw	r30, r24
     45c:	80 81       	ld	r24, Z
     45e:	88 23       	and	r24, r24
     460:	29 f6       	brne	.-118    	; 0x3ec <hex2int+0x14>
        else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
        else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
        // shift 4 to make space for new digit, and add the 4 bits of the new digit
        val = (val << 4) | (byte & 0xF);
    }
    printf("val: %i\n", val);
     462:	89 81       	ldd	r24, Y+1	; 0x01
     464:	88 2f       	mov	r24, r24
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	29 2f       	mov	r18, r25
     46a:	2f 93       	push	r18
     46c:	8f 93       	push	r24
     46e:	84 e1       	ldi	r24, 0x14	; 20
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	89 2f       	mov	r24, r25
     474:	8f 93       	push	r24
     476:	84 e1       	ldi	r24, 0x14	; 20
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	8f 93       	push	r24
     47c:	0e 94 2f 18 	call	0x305e	; 0x305e <printf>
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
    return val;
     488:	89 81       	ldd	r24, Y+1	; 0x01
}
     48a:	0f 90       	pop	r0
     48c:	0f 90       	pop	r0
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <enc28j60ReadOp>:
#define CSPASSIVE ENC28J60_CONTROL_PORT|=(1<<ENC28J60_CONTROL_CS)
//
#define waitspi() while(!(SPSR&(1<<SPIF)))

uint8_t enc28j60ReadOp(uint8_t op, uint8_t address)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	00 d0       	rcall	.+0      	; 0x49e <enc28j60ReadOp+0x6>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	6a 83       	std	Y+2, r22	; 0x02
        CSACTIVE;
     4a6:	85 e2       	ldi	r24, 0x25	; 37
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	25 e2       	ldi	r18, 0x25	; 37
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	2b 7f       	andi	r18, 0xFB	; 251
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
        // issue read command
        SPDR = op | (address & ADDR_MASK);
     4b8:	8e e4       	ldi	r24, 0x4E	; 78
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	2a 81       	ldd	r18, Y+2	; 0x02
     4be:	32 2f       	mov	r19, r18
     4c0:	3f 71       	andi	r19, 0x1F	; 31
     4c2:	29 81       	ldd	r18, Y+1	; 0x01
     4c4:	23 2b       	or	r18, r19
     4c6:	fc 01       	movw	r30, r24
     4c8:	20 83       	st	Z, r18
        waitspi();
     4ca:	00 00       	nop
     4cc:	8d e4       	ldi	r24, 0x4D	; 77
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	d4 f7       	brge	.-12     	; 0x4cc <enc28j60ReadOp+0x34>
        // read data
        SPDR = 0x00;
     4d8:	8e e4       	ldi	r24, 0x4E	; 78
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	fc 01       	movw	r30, r24
     4de:	10 82       	st	Z, r1
        waitspi();
     4e0:	00 00       	nop
     4e2:	8d e4       	ldi	r24, 0x4D	; 77
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	fc 01       	movw	r30, r24
     4e8:	80 81       	ld	r24, Z
     4ea:	88 23       	and	r24, r24
     4ec:	d4 f7       	brge	.-12     	; 0x4e2 <enc28j60ReadOp+0x4a>
        // do dummy read if needed (for mac and mii, see datasheet page 29)
        if(address & 0x80)
     4ee:	8a 81       	ldd	r24, Y+2	; 0x02
     4f0:	88 23       	and	r24, r24
     4f2:	5c f4       	brge	.+22     	; 0x50a <enc28j60ReadOp+0x72>
        {
                SPDR = 0x00;
     4f4:	8e e4       	ldi	r24, 0x4E	; 78
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	10 82       	st	Z, r1
                waitspi();
     4fc:	00 00       	nop
     4fe:	8d e4       	ldi	r24, 0x4D	; 77
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	fc 01       	movw	r30, r24
     504:	80 81       	ld	r24, Z
     506:	88 23       	and	r24, r24
     508:	d4 f7       	brge	.-12     	; 0x4fe <enc28j60ReadOp+0x66>
        }
        // release CS
        CSPASSIVE;
     50a:	85 e2       	ldi	r24, 0x25	; 37
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	25 e2       	ldi	r18, 0x25	; 37
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	f9 01       	movw	r30, r18
     514:	20 81       	ld	r18, Z
     516:	24 60       	ori	r18, 0x04	; 4
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
        return(SPDR);
     51c:	8e e4       	ldi	r24, 0x4E	; 78
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	fc 01       	movw	r30, r24
     522:	80 81       	ld	r24, Z
}
     524:	0f 90       	pop	r0
     526:	0f 90       	pop	r0
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <enc28j60WriteOp>:

void enc28j60WriteOp(uint8_t op, uint8_t address, uint8_t data)
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	00 d0       	rcall	.+0      	; 0x534 <enc28j60WriteOp+0x6>
     534:	1f 92       	push	r1
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	6a 83       	std	Y+2, r22	; 0x02
     53e:	4b 83       	std	Y+3, r20	; 0x03
        CSACTIVE;
     540:	85 e2       	ldi	r24, 0x25	; 37
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	25 e2       	ldi	r18, 0x25	; 37
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	f9 01       	movw	r30, r18
     54a:	20 81       	ld	r18, Z
     54c:	2b 7f       	andi	r18, 0xFB	; 251
     54e:	fc 01       	movw	r30, r24
     550:	20 83       	st	Z, r18
        // issue write command
        SPDR = op | (address & ADDR_MASK);
     552:	8e e4       	ldi	r24, 0x4E	; 78
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	2a 81       	ldd	r18, Y+2	; 0x02
     558:	32 2f       	mov	r19, r18
     55a:	3f 71       	andi	r19, 0x1F	; 31
     55c:	29 81       	ldd	r18, Y+1	; 0x01
     55e:	23 2b       	or	r18, r19
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
        waitspi();
     564:	00 00       	nop
     566:	8d e4       	ldi	r24, 0x4D	; 77
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	88 23       	and	r24, r24
     570:	d4 f7       	brge	.-12     	; 0x566 <enc28j60WriteOp+0x38>
        // write data
        SPDR = data;
     572:	8e e4       	ldi	r24, 0x4E	; 78
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2b 81       	ldd	r18, Y+3	; 0x03
     578:	fc 01       	movw	r30, r24
     57a:	20 83       	st	Z, r18
        waitspi();
     57c:	00 00       	nop
     57e:	8d e4       	ldi	r24, 0x4D	; 77
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	fc 01       	movw	r30, r24
     584:	80 81       	ld	r24, Z
     586:	88 23       	and	r24, r24
     588:	d4 f7       	brge	.-12     	; 0x57e <enc28j60WriteOp+0x50>
        CSPASSIVE;
     58a:	85 e2       	ldi	r24, 0x25	; 37
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	25 e2       	ldi	r18, 0x25	; 37
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	f9 01       	movw	r30, r18
     594:	20 81       	ld	r18, Z
     596:	24 60       	ori	r18, 0x04	; 4
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
}
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
     5a0:	0f 90       	pop	r0
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <enc28j60ReadBuffer>:

void enc28j60ReadBuffer(uint16_t len, uint8_t* data)
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <enc28j60ReadBuffer+0x6>
     5ae:	00 d0       	rcall	.+0      	; 0x5b0 <enc28j60ReadBuffer+0x8>
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	9a 83       	std	Y+2, r25	; 0x02
     5b6:	89 83       	std	Y+1, r24	; 0x01
     5b8:	7c 83       	std	Y+4, r23	; 0x04
     5ba:	6b 83       	std	Y+3, r22	; 0x03
        CSACTIVE;
     5bc:	85 e2       	ldi	r24, 0x25	; 37
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	25 e2       	ldi	r18, 0x25	; 37
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	f9 01       	movw	r30, r18
     5c6:	20 81       	ld	r18, Z
     5c8:	2b 7f       	andi	r18, 0xFB	; 251
     5ca:	fc 01       	movw	r30, r24
     5cc:	20 83       	st	Z, r18
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
     5ce:	8e e4       	ldi	r24, 0x4E	; 78
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	2a e3       	ldi	r18, 0x3A	; 58
     5d4:	fc 01       	movw	r30, r24
     5d6:	20 83       	st	Z, r18
        waitspi();
     5d8:	00 00       	nop
     5da:	8d e4       	ldi	r24, 0x4D	; 77
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	fc 01       	movw	r30, r24
     5e0:	80 81       	ld	r24, Z
     5e2:	88 23       	and	r24, r24
     5e4:	d4 f7       	brge	.-12     	; 0x5da <enc28j60ReadBuffer+0x32>
        while(len)
     5e6:	1d c0       	rjmp	.+58     	; 0x622 <enc28j60ReadBuffer+0x7a>
        {
                len--;
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	01 97       	sbiw	r24, 0x01	; 1
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
                // read data
                SPDR = 0x00;
     5f2:	8e e4       	ldi	r24, 0x4E	; 78
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	fc 01       	movw	r30, r24
     5f8:	10 82       	st	Z, r1
                waitspi();
     5fa:	00 00       	nop
     5fc:	8d e4       	ldi	r24, 0x4D	; 77
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	88 23       	and	r24, r24
     606:	d4 f7       	brge	.-12     	; 0x5fc <enc28j60ReadBuffer+0x54>
                *data = SPDR;
     608:	8e e4       	ldi	r24, 0x4E	; 78
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	fc 01       	movw	r30, r24
     60e:	20 81       	ld	r18, Z
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
                data++;
     618:	8b 81       	ldd	r24, Y+3	; 0x03
     61a:	9c 81       	ldd	r25, Y+4	; 0x04
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	9c 83       	std	Y+4, r25	; 0x04
     620:	8b 83       	std	Y+3, r24	; 0x03
{
        CSACTIVE;
        // issue read command
        SPDR = ENC28J60_READ_BUF_MEM;
        waitspi();
        while(len)
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	f9 f6       	brne	.-66     	; 0x5e8 <enc28j60ReadBuffer+0x40>
                SPDR = 0x00;
                waitspi();
                *data = SPDR;
                data++;
        }
        *data='\0';
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	fc 01       	movw	r30, r24
     630:	10 82       	st	Z, r1
        CSPASSIVE;
     632:	85 e2       	ldi	r24, 0x25	; 37
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	25 e2       	ldi	r18, 0x25	; 37
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	f9 01       	movw	r30, r18
     63c:	20 81       	ld	r18, Z
     63e:	24 60       	ori	r18, 0x04	; 4
     640:	fc 01       	movw	r30, r24
     642:	20 83       	st	Z, r18
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	df 91       	pop	r29
     64e:	cf 91       	pop	r28
     650:	08 95       	ret

00000652 <enc28j60WriteBuffer>:

void enc28j60WriteBuffer(uint16_t len, uint8_t* data)
{
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	00 d0       	rcall	.+0      	; 0x658 <enc28j60WriteBuffer+0x6>
     658:	00 d0       	rcall	.+0      	; 0x65a <enc28j60WriteBuffer+0x8>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	7c 83       	std	Y+4, r23	; 0x04
     664:	6b 83       	std	Y+3, r22	; 0x03
        CSACTIVE;
     666:	85 e2       	ldi	r24, 0x25	; 37
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	25 e2       	ldi	r18, 0x25	; 37
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	f9 01       	movw	r30, r18
     670:	20 81       	ld	r18, Z
     672:	2b 7f       	andi	r18, 0xFB	; 251
     674:	fc 01       	movw	r30, r24
     676:	20 83       	st	Z, r18
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
     678:	8e e4       	ldi	r24, 0x4E	; 78
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2a e7       	ldi	r18, 0x7A	; 122
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
        waitspi();
     682:	00 00       	nop
     684:	8d e4       	ldi	r24, 0x4D	; 77
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	fc 01       	movw	r30, r24
     68a:	80 81       	ld	r24, Z
     68c:	88 23       	and	r24, r24
     68e:	d4 f7       	brge	.-12     	; 0x684 <enc28j60WriteBuffer+0x32>
        while(len)
     690:	19 c0       	rjmp	.+50     	; 0x6c4 <enc28j60WriteBuffer+0x72>
        {
                len--;
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	9a 81       	ldd	r25, Y+2	; 0x02
     696:	01 97       	sbiw	r24, 0x01	; 1
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01
                // write data
                SPDR = *data;
     69c:	8e e4       	ldi	r24, 0x4E	; 78
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	2b 81       	ldd	r18, Y+3	; 0x03
     6a2:	3c 81       	ldd	r19, Y+4	; 0x04
     6a4:	f9 01       	movw	r30, r18
     6a6:	20 81       	ld	r18, Z
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
                data++;
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	9c 83       	std	Y+4, r25	; 0x04
     6b4:	8b 83       	std	Y+3, r24	; 0x03
                waitspi();
     6b6:	00 00       	nop
     6b8:	8d e4       	ldi	r24, 0x4D	; 77
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	fc 01       	movw	r30, r24
     6be:	80 81       	ld	r24, Z
     6c0:	88 23       	and	r24, r24
     6c2:	d4 f7       	brge	.-12     	; 0x6b8 <enc28j60WriteBuffer+0x66>
{
        CSACTIVE;
        // issue write command
        SPDR = ENC28J60_WRITE_BUF_MEM;
        waitspi();
        while(len)
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	9a 81       	ldd	r25, Y+2	; 0x02
     6c8:	00 97       	sbiw	r24, 0x00	; 0
     6ca:	19 f7       	brne	.-58     	; 0x692 <enc28j60WriteBuffer+0x40>
                // write data
                SPDR = *data;
                data++;
                waitspi();
        }
        CSPASSIVE;
     6cc:	85 e2       	ldi	r24, 0x25	; 37
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	25 e2       	ldi	r18, 0x25	; 37
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	24 60       	ori	r18, 0x04	; 4
     6da:	fc 01       	movw	r30, r24
     6dc:	20 83       	st	Z, r18
}
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	08 95       	ret

000006ec <enc28j60SetBank>:

void enc28j60SetBank(uint8_t address)
{
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	1f 92       	push	r1
     6f2:	cd b7       	in	r28, 0x3d	; 61
     6f4:	de b7       	in	r29, 0x3e	; 62
     6f6:	89 83       	std	Y+1, r24	; 0x01
        // set the bank (if needed)
        if((address & BANK_MASK) != Enc28j60Bank)
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	88 2f       	mov	r24, r24
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	9c 01       	movw	r18, r24
     700:	20 76       	andi	r18, 0x60	; 96
     702:	33 27       	eor	r19, r19
     704:	80 91 1e 01 	lds	r24, 0x011E
     708:	88 2f       	mov	r24, r24
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	28 17       	cp	r18, r24
     70e:	39 07       	cpc	r19, r25
     710:	e9 f0       	breq	.+58     	; 0x74c <enc28j60SetBank+0x60>
        {
                // set the bank
                enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, (ECON1_BSEL1|ECON1_BSEL0));
     712:	43 e0       	ldi	r20, 0x03	; 3
     714:	6f e1       	ldi	r22, 0x1F	; 31
     716:	80 ea       	ldi	r24, 0xA0	; 160
     718:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
                enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, (address & BANK_MASK)>>5);
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	88 2f       	mov	r24, r24
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	80 76       	andi	r24, 0x60	; 96
     724:	99 27       	eor	r25, r25
     726:	95 95       	asr	r25
     728:	87 95       	ror	r24
     72a:	95 95       	asr	r25
     72c:	87 95       	ror	r24
     72e:	95 95       	asr	r25
     730:	87 95       	ror	r24
     732:	95 95       	asr	r25
     734:	87 95       	ror	r24
     736:	95 95       	asr	r25
     738:	87 95       	ror	r24
     73a:	48 2f       	mov	r20, r24
     73c:	6f e1       	ldi	r22, 0x1F	; 31
     73e:	80 e8       	ldi	r24, 0x80	; 128
     740:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
                Enc28j60Bank = (address & BANK_MASK);
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	80 76       	andi	r24, 0x60	; 96
     748:	80 93 1e 01 	sts	0x011E, r24
        }
}
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <enc28j60Read>:

uint8_t enc28j60Read(uint8_t address)
{
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	89 83       	std	Y+1, r24	; 0x01
        // set the bank
        enc28j60SetBank(address);
     760:	89 81       	ldd	r24, Y+1	; 0x01
     762:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60SetBank>
        // do the read
        return enc28j60ReadOp(ENC28J60_READ_CTRL_REG, address);
     766:	69 81       	ldd	r22, Y+1	; 0x01
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
}
     76e:	0f 90       	pop	r0
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	08 95       	ret

00000776 <enc28j60PhyReadH>:

// read upper 8 bits
uint16_t enc28j60PhyReadH(uint8_t address)
{
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	cd b7       	in	r28, 0x3d	; 61
     77c:	de b7       	in	r29, 0x3e	; 62
     77e:	69 97       	sbiw	r28, 0x19	; 25
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	89 8f       	std	Y+25, r24	; 0x19

	// Set the right address and start the register read operation
	enc28j60Write(MIREGADR, address);
     78c:	69 8d       	ldd	r22, Y+25	; 0x19
     78e:	84 ed       	ldi	r24, 0xD4	; 212
     790:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(MICMD, MICMD_MIIRD);
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	82 ed       	ldi	r24, 0xD2	; 210
     798:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	a0 e7       	ldi	r26, 0x70	; 112
     7a2:	b1 e4       	ldi	r27, 0x41	; 65
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	9a 83       	std	Y+2, r25	; 0x02
     7a8:	ab 83       	std	Y+3, r26	; 0x03
     7aa:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     7ac:	25 e5       	ldi	r18, 0x55	; 85
     7ae:	35 e5       	ldi	r19, 0x55	; 85
     7b0:	45 e8       	ldi	r20, 0x85	; 133
     7b2:	50 e4       	ldi	r21, 0x40	; 64
     7b4:	69 81       	ldd	r22, Y+1	; 0x01
     7b6:	7a 81       	ldd	r23, Y+2	; 0x02
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	9c 81       	ldd	r25, Y+4	; 0x04
     7bc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	8d 83       	std	Y+5, r24	; 0x05
     7c6:	9e 83       	std	Y+6, r25	; 0x06
     7c8:	af 83       	std	Y+7, r26	; 0x07
     7ca:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e8       	ldi	r20, 0x80	; 128
     7d2:	5f e3       	ldi	r21, 0x3F	; 63
     7d4:	6d 81       	ldd	r22, Y+5	; 0x05
     7d6:	7e 81       	ldd	r23, Y+6	; 0x06
     7d8:	8f 81       	ldd	r24, Y+7	; 0x07
     7da:	98 85       	ldd	r25, Y+8	; 0x08
     7dc:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
     7e0:	88 23       	and	r24, r24
     7e2:	1c f4       	brge	.+6      	; 0x7ea <enc28j60PhyReadH+0x74>
		__ticks = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	89 87       	std	Y+9, r24	; 0x09
     7e8:	91 c0       	rjmp	.+290    	; 0x90c <__stack+0xd>
	else if (__tmp > 255)
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	4f e7       	ldi	r20, 0x7F	; 127
     7f0:	53 e4       	ldi	r21, 0x43	; 67
     7f2:	6d 81       	ldd	r22, Y+5	; 0x05
     7f4:	7e 81       	ldd	r23, Y+6	; 0x06
     7f6:	8f 81       	ldd	r24, Y+7	; 0x07
     7f8:	98 85       	ldd	r25, Y+8	; 0x08
     7fa:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
     7fe:	18 16       	cp	r1, r24
     800:	0c f0       	brlt	.+2      	; 0x804 <enc28j60PhyReadH+0x8e>
     802:	7b c0       	rjmp	.+246    	; 0x8fa <enc28j60PhyReadH+0x184>
	{
		_delay_ms(__us / 1000.0);
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	4a e7       	ldi	r20, 0x7A	; 122
     80a:	54 e4       	ldi	r21, 0x44	; 68
     80c:	69 81       	ldd	r22, Y+1	; 0x01
     80e:	7a 81       	ldd	r23, Y+2	; 0x02
     810:	8b 81       	ldd	r24, Y+3	; 0x03
     812:	9c 81       	ldd	r25, Y+4	; 0x04
     814:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divsf3>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	8a 87       	std	Y+10, r24	; 0x0a
     81e:	9b 87       	std	Y+11, r25	; 0x0b
     820:	ac 87       	std	Y+12, r26	; 0x0c
     822:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e5       	ldi	r19, 0x50	; 80
     828:	43 e4       	ldi	r20, 0x43	; 67
     82a:	55 e4       	ldi	r21, 0x45	; 69
     82c:	6a 85       	ldd	r22, Y+10	; 0x0a
     82e:	7b 85       	ldd	r23, Y+11	; 0x0b
     830:	8c 85       	ldd	r24, Y+12	; 0x0c
     832:	9d 85       	ldd	r25, Y+13	; 0x0d
     834:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	8e 87       	std	Y+14, r24	; 0x0e
     83e:	9f 87       	std	Y+15, r25	; 0x0f
     840:	a8 8b       	std	Y+16, r26	; 0x10
     842:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e8       	ldi	r20, 0x80	; 128
     84a:	5f e3       	ldi	r21, 0x3F	; 63
     84c:	6e 85       	ldd	r22, Y+14	; 0x0e
     84e:	7f 85       	ldd	r23, Y+15	; 0x0f
     850:	88 89       	ldd	r24, Y+16	; 0x10
     852:	99 89       	ldd	r25, Y+17	; 0x11
     854:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
     858:	88 23       	and	r24, r24
     85a:	2c f4       	brge	.+10     	; 0x866 <enc28j60PhyReadH+0xf0>
		__ticks = 1;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	9b 8b       	std	Y+19, r25	; 0x13
     862:	8a 8b       	std	Y+18, r24	; 0x12
     864:	3f c0       	rjmp	.+126    	; 0x8e4 <enc28j60PhyReadH+0x16e>
	else if (__tmp > 65535)
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	6e 85       	ldd	r22, Y+14	; 0x0e
     870:	7f 85       	ldd	r23, Y+15	; 0x0f
     872:	88 89       	ldd	r24, Y+16	; 0x10
     874:	99 89       	ldd	r25, Y+17	; 0x11
     876:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
     87a:	18 16       	cp	r1, r24
     87c:	4c f5       	brge	.+82     	; 0x8d0 <enc28j60PhyReadH+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e2       	ldi	r20, 0x20	; 32
     884:	51 e4       	ldi	r21, 0x41	; 65
     886:	6a 85       	ldd	r22, Y+10	; 0x0a
     888:	7b 85       	ldd	r23, Y+11	; 0x0b
     88a:	8c 85       	ldd	r24, Y+12	; 0x0c
     88c:	9d 85       	ldd	r25, Y+13	; 0x0d
     88e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	bc 01       	movw	r22, r24
     898:	cd 01       	movw	r24, r26
     89a:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     89e:	dc 01       	movw	r26, r24
     8a0:	cb 01       	movw	r24, r22
     8a2:	9b 8b       	std	Y+19, r25	; 0x13
     8a4:	8a 8b       	std	Y+18, r24	; 0x12
     8a6:	0f c0       	rjmp	.+30     	; 0x8c6 <enc28j60PhyReadH+0x150>
     8a8:	88 e3       	ldi	r24, 0x38	; 56
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	9d 8b       	std	Y+21, r25	; 0x15
     8ae:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8b0:	8c 89       	ldd	r24, Y+20	; 0x14
     8b2:	9d 89       	ldd	r25, Y+21	; 0x15
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <enc28j60PhyReadH+0x13e>
     8b8:	9d 8b       	std	Y+21, r25	; 0x15
     8ba:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8bc:	8a 89       	ldd	r24, Y+18	; 0x12
     8be:	9b 89       	ldd	r25, Y+19	; 0x13
     8c0:	01 97       	sbiw	r24, 0x01	; 1
     8c2:	9b 8b       	std	Y+19, r25	; 0x13
     8c4:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c6:	8a 89       	ldd	r24, Y+18	; 0x12
     8c8:	9b 89       	ldd	r25, Y+19	; 0x13
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	69 f7       	brne	.-38     	; 0x8a8 <enc28j60PhyReadH+0x132>
        _delay_us(15);

	// wait until the PHY read completes
	while(enc28j60Read(MISTAT) & MISTAT_BUSY);
     8ce:	24 c0       	rjmp	.+72     	; 0x918 <__stack+0x19>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d0:	6e 85       	ldd	r22, Y+14	; 0x0e
     8d2:	7f 85       	ldd	r23, Y+15	; 0x0f
     8d4:	88 89       	ldd	r24, Y+16	; 0x10
     8d6:	99 89       	ldd	r25, Y+17	; 0x11
     8d8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     8dc:	dc 01       	movw	r26, r24
     8de:	cb 01       	movw	r24, r22
     8e0:	9b 8b       	std	Y+19, r25	; 0x13
     8e2:	8a 8b       	std	Y+18, r24	; 0x12
     8e4:	8a 89       	ldd	r24, Y+18	; 0x12
     8e6:	9b 89       	ldd	r25, Y+19	; 0x13
     8e8:	9f 8b       	std	Y+23, r25	; 0x17
     8ea:	8e 8b       	std	Y+22, r24	; 0x16
     8ec:	8e 89       	ldd	r24, Y+22	; 0x16
     8ee:	9f 89       	ldd	r25, Y+23	; 0x17
     8f0:	01 97       	sbiw	r24, 0x01	; 1
     8f2:	f1 f7       	brne	.-4      	; 0x8f0 <enc28j60PhyReadH+0x17a>
     8f4:	9f 8b       	std	Y+23, r25	; 0x17
     8f6:	8e 8b       	std	Y+22, r24	; 0x16
     8f8:	0f c0       	rjmp	.+30     	; 0x918 <__stack+0x19>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     8fa:	6d 81       	ldd	r22, Y+5	; 0x05
     8fc:	7e 81       	ldd	r23, Y+6	; 0x06
     8fe:	8f 81       	ldd	r24, Y+7	; 0x07
     900:	98 85       	ldd	r25, Y+8	; 0x08
     902:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     906:	dc 01       	movw	r26, r24
     908:	cb 01       	movw	r24, r22
     90a:	89 87       	std	Y+9, r24	; 0x09
     90c:	89 85       	ldd	r24, Y+9	; 0x09
     90e:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     910:	88 8d       	ldd	r24, Y+24	; 0x18
     912:	8a 95       	dec	r24
     914:	f1 f7       	brne	.-4      	; 0x912 <__stack+0x13>
     916:	88 8f       	std	Y+24, r24	; 0x18
     918:	00 00       	nop
     91a:	8a ee       	ldi	r24, 0xEA	; 234
     91c:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
     920:	88 2f       	mov	r24, r24
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	81 70       	andi	r24, 0x01	; 1
     926:	99 27       	eor	r25, r25
     928:	00 97       	sbiw	r24, 0x00	; 0
     92a:	b9 f7       	brne	.-18     	; 0x91a <__stack+0x1b>

	// reset reading bit
	enc28j60Write(MICMD, 0x00);
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	82 ed       	ldi	r24, 0xD2	; 210
     930:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	
	return (enc28j60Read(MIRDH));
     934:	89 ed       	ldi	r24, 0xD9	; 217
     936:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
     93a:	88 2f       	mov	r24, r24
     93c:	90 e0       	ldi	r25, 0x00	; 0
}
     93e:	69 96       	adiw	r28, 0x19	; 25
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <enc28j60Write>:

void enc28j60Write(uint8_t address, uint8_t data)
{
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	00 d0       	rcall	.+0      	; 0x956 <enc28j60Write+0x6>
     956:	cd b7       	in	r28, 0x3d	; 61
     958:	de b7       	in	r29, 0x3e	; 62
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	6a 83       	std	Y+2, r22	; 0x02
        // set the bank
        enc28j60SetBank(address);
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60SetBank>
        // do the write
        enc28j60WriteOp(ENC28J60_WRITE_CTRL_REG, address, data);
     964:	4a 81       	ldd	r20, Y+2	; 0x02
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	80 e4       	ldi	r24, 0x40	; 64
     96a:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
}
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <enc28j60PhyWrite>:

void enc28j60PhyWrite(uint8_t address, uint16_t data)
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	cd b7       	in	r28, 0x3d	; 61
     97e:	de b7       	in	r29, 0x3e	; 62
     980:	6b 97       	sbiw	r28, 0x1b	; 27
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	89 8f       	std	Y+25, r24	; 0x19
     98e:	7b 8f       	std	Y+27, r23	; 0x1b
     990:	6a 8f       	std	Y+26, r22	; 0x1a
        // set the PHY register address
        enc28j60Write(MIREGADR, address);
     992:	69 8d       	ldd	r22, Y+25	; 0x19
     994:	84 ed       	ldi	r24, 0xD4	; 212
     996:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        // write the PHY data
        enc28j60Write(MIWRL, data);
     99a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     99c:	68 2f       	mov	r22, r24
     99e:	86 ed       	ldi	r24, 0xD6	; 214
     9a0:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MIWRH, data>>8);
     9a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     9a6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9a8:	89 2f       	mov	r24, r25
     9aa:	99 27       	eor	r25, r25
     9ac:	68 2f       	mov	r22, r24
     9ae:	87 ed       	ldi	r24, 0xD7	; 215
     9b0:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        // wait until the PHY write completes
        while(enc28j60Read(MISTAT) & MISTAT_BUSY){
     9b4:	be c0       	rjmp	.+380    	; 0xb32 <enc28j60PhyWrite+0x1ba>
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e7       	ldi	r26, 0x70	; 112
     9bc:	b1 e4       	ldi	r27, 0x41	; 65
     9be:	89 83       	std	Y+1, r24	; 0x01
     9c0:	9a 83       	std	Y+2, r25	; 0x02
     9c2:	ab 83       	std	Y+3, r26	; 0x03
     9c4:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     9c6:	25 e5       	ldi	r18, 0x55	; 85
     9c8:	35 e5       	ldi	r19, 0x55	; 85
     9ca:	45 e8       	ldi	r20, 0x85	; 133
     9cc:	50 e4       	ldi	r21, 0x40	; 64
     9ce:	69 81       	ldd	r22, Y+1	; 0x01
     9d0:	7a 81       	ldd	r23, Y+2	; 0x02
     9d2:	8b 81       	ldd	r24, Y+3	; 0x03
     9d4:	9c 81       	ldd	r25, Y+4	; 0x04
     9d6:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     9da:	dc 01       	movw	r26, r24
     9dc:	cb 01       	movw	r24, r22
     9de:	8d 83       	std	Y+5, r24	; 0x05
     9e0:	9e 83       	std	Y+6, r25	; 0x06
     9e2:	af 83       	std	Y+7, r26	; 0x07
     9e4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e8       	ldi	r20, 0x80	; 128
     9ec:	5f e3       	ldi	r21, 0x3F	; 63
     9ee:	6d 81       	ldd	r22, Y+5	; 0x05
     9f0:	7e 81       	ldd	r23, Y+6	; 0x06
     9f2:	8f 81       	ldd	r24, Y+7	; 0x07
     9f4:	98 85       	ldd	r25, Y+8	; 0x08
     9f6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
     9fa:	88 23       	and	r24, r24
     9fc:	1c f4       	brge	.+6      	; 0xa04 <enc28j60PhyWrite+0x8c>
		__ticks = 1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	89 87       	std	Y+9, r24	; 0x09
     a02:	91 c0       	rjmp	.+290    	; 0xb26 <enc28j60PhyWrite+0x1ae>
	else if (__tmp > 255)
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	4f e7       	ldi	r20, 0x7F	; 127
     a0a:	53 e4       	ldi	r21, 0x43	; 67
     a0c:	6d 81       	ldd	r22, Y+5	; 0x05
     a0e:	7e 81       	ldd	r23, Y+6	; 0x06
     a10:	8f 81       	ldd	r24, Y+7	; 0x07
     a12:	98 85       	ldd	r25, Y+8	; 0x08
     a14:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
     a18:	18 16       	cp	r1, r24
     a1a:	0c f0       	brlt	.+2      	; 0xa1e <enc28j60PhyWrite+0xa6>
     a1c:	7b c0       	rjmp	.+246    	; 0xb14 <enc28j60PhyWrite+0x19c>
	{
		_delay_ms(__us / 1000.0);
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	4a e7       	ldi	r20, 0x7A	; 122
     a24:	54 e4       	ldi	r21, 0x44	; 68
     a26:	69 81       	ldd	r22, Y+1	; 0x01
     a28:	7a 81       	ldd	r23, Y+2	; 0x02
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	9c 81       	ldd	r25, Y+4	; 0x04
     a2e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divsf3>
     a32:	dc 01       	movw	r26, r24
     a34:	cb 01       	movw	r24, r22
     a36:	8a 87       	std	Y+10, r24	; 0x0a
     a38:	9b 87       	std	Y+11, r25	; 0x0b
     a3a:	ac 87       	std	Y+12, r26	; 0x0c
     a3c:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e5       	ldi	r19, 0x50	; 80
     a42:	43 e4       	ldi	r20, 0x43	; 67
     a44:	55 e4       	ldi	r21, 0x45	; 69
     a46:	6a 85       	ldd	r22, Y+10	; 0x0a
     a48:	7b 85       	ldd	r23, Y+11	; 0x0b
     a4a:	8c 85       	ldd	r24, Y+12	; 0x0c
     a4c:	9d 85       	ldd	r25, Y+13	; 0x0d
     a4e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     a52:	dc 01       	movw	r26, r24
     a54:	cb 01       	movw	r24, r22
     a56:	8e 87       	std	Y+14, r24	; 0x0e
     a58:	9f 87       	std	Y+15, r25	; 0x0f
     a5a:	a8 8b       	std	Y+16, r26	; 0x10
     a5c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e8       	ldi	r20, 0x80	; 128
     a64:	5f e3       	ldi	r21, 0x3F	; 63
     a66:	6e 85       	ldd	r22, Y+14	; 0x0e
     a68:	7f 85       	ldd	r23, Y+15	; 0x0f
     a6a:	88 89       	ldd	r24, Y+16	; 0x10
     a6c:	99 89       	ldd	r25, Y+17	; 0x11
     a6e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
     a72:	88 23       	and	r24, r24
     a74:	2c f4       	brge	.+10     	; 0xa80 <enc28j60PhyWrite+0x108>
		__ticks = 1;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	9b 8b       	std	Y+19, r25	; 0x13
     a7c:	8a 8b       	std	Y+18, r24	; 0x12
     a7e:	3f c0       	rjmp	.+126    	; 0xafe <enc28j60PhyWrite+0x186>
	else if (__tmp > 65535)
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	4f e7       	ldi	r20, 0x7F	; 127
     a86:	57 e4       	ldi	r21, 0x47	; 71
     a88:	6e 85       	ldd	r22, Y+14	; 0x0e
     a8a:	7f 85       	ldd	r23, Y+15	; 0x0f
     a8c:	88 89       	ldd	r24, Y+16	; 0x10
     a8e:	99 89       	ldd	r25, Y+17	; 0x11
     a90:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
     a94:	18 16       	cp	r1, r24
     a96:	4c f5       	brge	.+82     	; 0xaea <enc28j60PhyWrite+0x172>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e2       	ldi	r20, 0x20	; 32
     a9e:	51 e4       	ldi	r21, 0x41	; 65
     aa0:	6a 85       	ldd	r22, Y+10	; 0x0a
     aa2:	7b 85       	ldd	r23, Y+11	; 0x0b
     aa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     aa6:	9d 85       	ldd	r25, Y+13	; 0x0d
     aa8:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
     aac:	dc 01       	movw	r26, r24
     aae:	cb 01       	movw	r24, r22
     ab0:	bc 01       	movw	r22, r24
     ab2:	cd 01       	movw	r24, r26
     ab4:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     ab8:	dc 01       	movw	r26, r24
     aba:	cb 01       	movw	r24, r22
     abc:	9b 8b       	std	Y+19, r25	; 0x13
     abe:	8a 8b       	std	Y+18, r24	; 0x12
     ac0:	0f c0       	rjmp	.+30     	; 0xae0 <enc28j60PhyWrite+0x168>
     ac2:	88 e3       	ldi	r24, 0x38	; 56
     ac4:	91 e0       	ldi	r25, 0x01	; 1
     ac6:	9d 8b       	std	Y+21, r25	; 0x15
     ac8:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     aca:	8c 89       	ldd	r24, Y+20	; 0x14
     acc:	9d 89       	ldd	r25, Y+21	; 0x15
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <enc28j60PhyWrite+0x156>
     ad2:	9d 8b       	std	Y+21, r25	; 0x15
     ad4:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad6:	8a 89       	ldd	r24, Y+18	; 0x12
     ad8:	9b 89       	ldd	r25, Y+19	; 0x13
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	9b 8b       	std	Y+19, r25	; 0x13
     ade:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae0:	8a 89       	ldd	r24, Y+18	; 0x12
     ae2:	9b 89       	ldd	r25, Y+19	; 0x13
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	69 f7       	brne	.-38     	; 0xac2 <enc28j60PhyWrite+0x14a>
     ae8:	24 c0       	rjmp	.+72     	; 0xb32 <enc28j60PhyWrite+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     aea:	6e 85       	ldd	r22, Y+14	; 0x0e
     aec:	7f 85       	ldd	r23, Y+15	; 0x0f
     aee:	88 89       	ldd	r24, Y+16	; 0x10
     af0:	99 89       	ldd	r25, Y+17	; 0x11
     af2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     af6:	dc 01       	movw	r26, r24
     af8:	cb 01       	movw	r24, r22
     afa:	9b 8b       	std	Y+19, r25	; 0x13
     afc:	8a 8b       	std	Y+18, r24	; 0x12
     afe:	8a 89       	ldd	r24, Y+18	; 0x12
     b00:	9b 89       	ldd	r25, Y+19	; 0x13
     b02:	9f 8b       	std	Y+23, r25	; 0x17
     b04:	8e 8b       	std	Y+22, r24	; 0x16
     b06:	8e 89       	ldd	r24, Y+22	; 0x16
     b08:	9f 89       	ldd	r25, Y+23	; 0x17
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <enc28j60PhyWrite+0x192>
     b0e:	9f 8b       	std	Y+23, r25	; 0x17
     b10:	8e 8b       	std	Y+22, r24	; 0x16
     b12:	0f c0       	rjmp	.+30     	; 0xb32 <enc28j60PhyWrite+0x1ba>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     b14:	6d 81       	ldd	r22, Y+5	; 0x05
     b16:	7e 81       	ldd	r23, Y+6	; 0x06
     b18:	8f 81       	ldd	r24, Y+7	; 0x07
     b1a:	98 85       	ldd	r25, Y+8	; 0x08
     b1c:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	89 87       	std	Y+9, r24	; 0x09
     b26:	89 85       	ldd	r24, Y+9	; 0x09
     b28:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     b2a:	88 8d       	ldd	r24, Y+24	; 0x18
     b2c:	8a 95       	dec	r24
     b2e:	f1 f7       	brne	.-4      	; 0xb2c <enc28j60PhyWrite+0x1b4>
     b30:	88 8f       	std	Y+24, r24	; 0x18
     b32:	8a ee       	ldi	r24, 0xEA	; 234
     b34:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
     b38:	88 2f       	mov	r24, r24
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	81 70       	andi	r24, 0x01	; 1
     b3e:	99 27       	eor	r25, r25
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	09 f0       	breq	.+2      	; 0xb46 <enc28j60PhyWrite+0x1ce>
     b44:	38 cf       	rjmp	.-400    	; 0x9b6 <enc28j60PhyWrite+0x3e>
                _delay_us(15);
        }
}
     b46:	6b 96       	adiw	r28, 0x1b	; 27
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	f8 94       	cli
     b4c:	de bf       	out	0x3e, r29	; 62
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	cd bf       	out	0x3d, r28	; 61
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	08 95       	ret

00000b58 <enc28j60clkout>:

void enc28j60clkout(uint8_t clk)
{
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	1f 92       	push	r1
     b5e:	cd b7       	in	r28, 0x3d	; 61
     b60:	de b7       	in	r29, 0x3e	; 62
     b62:	89 83       	std	Y+1, r24	; 0x01
        //setup clkout: 2 is 12.5MHz:
	enc28j60Write(ECOCON, clk & 0x7);
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	87 70       	andi	r24, 0x07	; 7
     b68:	68 2f       	mov	r22, r24
     b6a:	85 e7       	ldi	r24, 0x75	; 117
     b6c:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
}
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <enc28j60Init>:

void enc28j60Init(uint8_t* macaddr)
{
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	00 d0       	rcall	.+0      	; 0xb7e <enc28j60Init+0x6>
     b7e:	1f 92       	push	r1
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	9b 83       	std	Y+3, r25	; 0x03
     b86:	8a 83       	std	Y+2, r24	; 0x02
	// initialize I/O
        // ss as output:
	ENC28J60_CONTROL_DDR |= 1<<ENC28J60_CONTROL_CS;
     b88:	84 e2       	ldi	r24, 0x24	; 36
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	24 e2       	ldi	r18, 0x24	; 36
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	f9 01       	movw	r30, r18
     b92:	20 81       	ld	r18, Z
     b94:	24 60       	ori	r18, 0x04	; 4
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18
	CSPASSIVE; // ss=0
     b9a:	85 e2       	ldi	r24, 0x25	; 37
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	25 e2       	ldi	r18, 0x25	; 37
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	24 60       	ori	r18, 0x04	; 4
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
        //	
	ENC28J60_CONTROL_DDR  |= 1<<ENC28J60_CONTROL_SI | 1<<ENC28J60_CONTROL_SCK; // mosi, sck output
     bac:	84 e2       	ldi	r24, 0x24	; 36
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	24 e2       	ldi	r18, 0x24	; 36
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	f9 01       	movw	r30, r18
     bb6:	20 81       	ld	r18, Z
     bb8:	28 62       	ori	r18, 0x28	; 40
     bba:	fc 01       	movw	r30, r24
     bbc:	20 83       	st	Z, r18
	cbi(ENC28J60_CONTROL_DDR,ENC28J60_CONTROL_SO); // MISO is input
     bbe:	84 e2       	ldi	r24, 0x24	; 36
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	24 e2       	ldi	r18, 0x24	; 36
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	f9 01       	movw	r30, r18
     bc8:	20 81       	ld	r18, Z
     bca:	2f 7e       	andi	r18, 0xEF	; 239
     bcc:	fc 01       	movw	r30, r24
     bce:	20 83       	st	Z, r18
        //
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SI); // MOSI low
     bd0:	85 e2       	ldi	r24, 0x25	; 37
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	25 e2       	ldi	r18, 0x25	; 37
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	f9 01       	movw	r30, r18
     bda:	20 81       	ld	r18, Z
     bdc:	27 7f       	andi	r18, 0xF7	; 247
     bde:	fc 01       	movw	r30, r24
     be0:	20 83       	st	Z, r18
        cbi(ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_SCK); // SCK low
     be2:	85 e2       	ldi	r24, 0x25	; 37
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	25 e2       	ldi	r18, 0x25	; 37
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	f9 01       	movw	r30, r18
     bec:	20 81       	ld	r18, Z
     bee:	2f 7d       	andi	r18, 0xDF	; 223
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 83       	st	Z, r18
	//
	// initialize SPI interface
	// master mode and Fosc/2 clock:
        SPCR = (1<<SPE)|(1<<MSTR);
     bf4:	8c e4       	ldi	r24, 0x4C	; 76
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	20 e5       	ldi	r18, 0x50	; 80
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
        SPSR |= (1<<SPI2X);
     bfe:	8d e4       	ldi	r24, 0x4D	; 77
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2d e4       	ldi	r18, 0x4D	; 77
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	21 60       	ori	r18, 0x01	; 1
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
	// perform system reset
	enc28j60WriteOp(ENC28J60_SOFT_RESET, 0, ENC28J60_SOFT_RESET);
     c10:	4f ef       	ldi	r20, 0xFF	; 255
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
     c1a:	8d ec       	ldi	r24, 0xCD	; 205
     c1c:	89 83       	std	Y+1, r24	; 0x01
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
     c20:	8a 95       	dec	r24
     c22:	f1 f7       	brne	.-4      	; 0xc20 <enc28j60Init+0xa8>
     c24:	89 83       	std	Y+1, r24	; 0x01
	//while(!(enc28j60Read(ESTAT) & ESTAT_CLKRDY));
	// do bank 0 stuff
	// initialize receive buffer
	// 16-bit transfers, must write low byte first
	// set receive buffer start address
	gNextPacketPtr = RXSTART_INIT;
     c26:	10 92 20 01 	sts	0x0120, r1
     c2a:	10 92 1f 01 	sts	0x011F, r1
        // Rx start
	enc28j60Write(ERXSTL, RXSTART_INIT&0xFF);
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ERXSTH, RXSTART_INIT>>8);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	89 e0       	ldi	r24, 0x09	; 9
     c3a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// set receive pointer address
	enc28j60Write(ERXRDPTL, RXSTART_INIT&0xFF);
     c3e:	60 e0       	ldi	r22, 0x00	; 0
     c40:	8c e0       	ldi	r24, 0x0C	; 12
     c42:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ERXRDPTH, RXSTART_INIT>>8);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	8d e0       	ldi	r24, 0x0D	; 13
     c4a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// RX end
	enc28j60Write(ERXNDL, RXSTOP_INIT&0xFF);
     c4e:	6e ef       	ldi	r22, 0xFE	; 254
     c50:	8a e0       	ldi	r24, 0x0A	; 10
     c52:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ERXNDH, RXSTOP_INIT>>8);
     c56:	69 e1       	ldi	r22, 0x19	; 25
     c58:	8b e0       	ldi	r24, 0x0B	; 11
     c5a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// TX start
	enc28j60Write(ETXSTL, TXSTART_INIT&0xFF);
     c5e:	6f ef       	ldi	r22, 0xFF	; 255
     c60:	84 e0       	ldi	r24, 0x04	; 4
     c62:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ETXSTH, TXSTART_INIT>>8);
     c66:	69 e1       	ldi	r22, 0x19	; 25
     c68:	85 e0       	ldi	r24, 0x05	; 5
     c6a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// TX end
	enc28j60Write(ETXNDL, TXSTOP_INIT&0xFF);
     c6e:	6f ef       	ldi	r22, 0xFF	; 255
     c70:	86 e0       	ldi	r24, 0x06	; 6
     c72:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ETXNDH, TXSTOP_INIT>>8);
     c76:	6f e1       	ldi	r22, 0x1F	; 31
     c78:	87 e0       	ldi	r24, 0x07	; 7
     c7a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        // Type     ETH.DST
        // ARP      BROADCAST
        // 06 08 -- ff ff ff ff ff ff -> ip checksum for theses bytes=f7f9
        // in binary these poitions are:11 0000 0011 1111
        // This is hex 303F->EPMM0=0x3f,EPMM1=0x30
	enc28j60Write(ERXFCON, ERXFCON_UCEN|ERXFCON_CRCEN|ERXFCON_PMEN);
     c7e:	60 eb       	ldi	r22, 0xB0	; 176
     c80:	88 e3       	ldi	r24, 0x38	; 56
     c82:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(EPMM0, 0x3f);
     c86:	6f e3       	ldi	r22, 0x3F	; 63
     c88:	88 e2       	ldi	r24, 0x28	; 40
     c8a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(EPMM1, 0x30);
     c8e:	60 e3       	ldi	r22, 0x30	; 48
     c90:	89 e2       	ldi	r24, 0x29	; 41
     c92:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(EPMCSL, 0xf9);
     c96:	69 ef       	ldi	r22, 0xF9	; 249
     c98:	80 e3       	ldi	r24, 0x30	; 48
     c9a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(EPMCSH, 0xf7);
     c9e:	67 ef       	ldi	r22, 0xF7	; 247
     ca0:	81 e3       	ldi	r24, 0x31	; 49
     ca2:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        //
        //
	// do bank 2 stuff
	// enable MAC receive
	enc28j60Write(MACON1, MACON1_MARXEN|MACON1_TXPAUS|MACON1_RXPAUS);
     ca6:	6d e0       	ldi	r22, 0x0D	; 13
     ca8:	80 ec       	ldi	r24, 0xC0	; 192
     caa:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// bring MAC out of reset
	enc28j60Write(MACON2, 0x00);
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	81 ec       	ldi	r24, 0xC1	; 193
     cb2:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// enable automatic padding to 60bytes and CRC operations
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, MACON3, MACON3_PADCFG0|MACON3_TXCRCEN|MACON3_FRMLNEN);
     cb6:	42 e3       	ldi	r20, 0x32	; 50
     cb8:	62 ec       	ldi	r22, 0xC2	; 194
     cba:	80 e8       	ldi	r24, 0x80	; 128
     cbc:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
	// set inter-frame gap (non-back-to-back)
	enc28j60Write(MAIPGL, 0x12);
     cc0:	62 e1       	ldi	r22, 0x12	; 18
     cc2:	86 ec       	ldi	r24, 0xC6	; 198
     cc4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(MAIPGH, 0x0C);
     cc8:	6c e0       	ldi	r22, 0x0C	; 12
     cca:	87 ec       	ldi	r24, 0xC7	; 199
     ccc:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// set inter-frame gap (back-to-back)
	enc28j60Write(MABBIPG, 0x12);
     cd0:	62 e1       	ldi	r22, 0x12	; 18
     cd2:	84 ec       	ldi	r24, 0xC4	; 196
     cd4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// Set the maximum packet size which the controller will accept
        // Do not send packets longer than MAX_FRAMELEN:
	enc28j60Write(MAMXFLL, MAX_FRAMELEN&0xFF);	
     cd8:	6c ed       	ldi	r22, 0xDC	; 220
     cda:	8a ec       	ldi	r24, 0xCA	; 202
     cdc:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(MAMXFLH, MAX_FRAMELEN>>8);
     ce0:	65 e0       	ldi	r22, 0x05	; 5
     ce2:	8b ec       	ldi	r24, 0xCB	; 203
     ce4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// do bank 3 stuff
        // write MAC address
        // NOTE: MAC address in ENC28J60 is byte-backward
        enc28j60Write(MAADR5, macaddr[0]);
     ce8:	8a 81       	ldd	r24, Y+2	; 0x02
     cea:	9b 81       	ldd	r25, Y+3	; 0x03
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	68 2f       	mov	r22, r24
     cf2:	84 ee       	ldi	r24, 0xE4	; 228
     cf4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MAADR4, macaddr[1]);
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	9b 81       	ldd	r25, Y+3	; 0x03
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	fc 01       	movw	r30, r24
     d00:	80 81       	ld	r24, Z
     d02:	68 2f       	mov	r22, r24
     d04:	85 ee       	ldi	r24, 0xE5	; 229
     d06:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MAADR3, macaddr[2]);
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	02 96       	adiw	r24, 0x02	; 2
     d10:	fc 01       	movw	r30, r24
     d12:	80 81       	ld	r24, Z
     d14:	68 2f       	mov	r22, r24
     d16:	82 ee       	ldi	r24, 0xE2	; 226
     d18:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MAADR2, macaddr[3]);
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	03 96       	adiw	r24, 0x03	; 3
     d22:	fc 01       	movw	r30, r24
     d24:	80 81       	ld	r24, Z
     d26:	68 2f       	mov	r22, r24
     d28:	83 ee       	ldi	r24, 0xE3	; 227
     d2a:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MAADR1, macaddr[4]);
     d2e:	8a 81       	ldd	r24, Y+2	; 0x02
     d30:	9b 81       	ldd	r25, Y+3	; 0x03
     d32:	04 96       	adiw	r24, 0x04	; 4
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	68 2f       	mov	r22, r24
     d3a:	80 ee       	ldi	r24, 0xE0	; 224
     d3c:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        enc28j60Write(MAADR0, macaddr[5]);
     d40:	8a 81       	ldd	r24, Y+2	; 0x02
     d42:	9b 81       	ldd	r25, Y+3	; 0x03
     d44:	05 96       	adiw	r24, 0x05	; 5
     d46:	fc 01       	movw	r30, r24
     d48:	80 81       	ld	r24, Z
     d4a:	68 2f       	mov	r22, r24
     d4c:	81 ee       	ldi	r24, 0xE1	; 225
     d4e:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// no loopback of transmitted frames
	enc28j60PhyWrite(PHCON2, PHCON2_HDLDIS);
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	71 e0       	ldi	r23, 0x01	; 1
     d56:	80 e1       	ldi	r24, 0x10	; 16
     d58:	0e 94 bc 04 	call	0x978	; 0x978 <enc28j60PhyWrite>
	// switch to bank 0
	enc28j60SetBank(ECON1);
     d5c:	8f e1       	ldi	r24, 0x1F	; 31
     d5e:	0e 94 76 03 	call	0x6ec	; 0x6ec <enc28j60SetBank>
	// enable interrutps
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, EIE, EIE_INTIE|EIE_PKTIE);
     d62:	40 ec       	ldi	r20, 0xC0	; 192
     d64:	6b e1       	ldi	r22, 0x1B	; 27
     d66:	80 e8       	ldi	r24, 0x80	; 128
     d68:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
	// enable packet reception
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_RXEN);
     d6c:	44 e0       	ldi	r20, 0x04	; 4
     d6e:	6f e1       	ldi	r22, 0x1F	; 31
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <enc28j60getrev>:

// read the revision of the chip:
uint8_t enc28j60getrev(void)
{
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
	return(enc28j60Read(EREVID));
     d8a:	82 e7       	ldi	r24, 0x72	; 114
     d8c:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	08 95       	ret

00000d96 <enc28j60linkup>:

// link status
uint8_t enc28j60linkup(void)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
        // bit 10 (= bit 3 in upper reg)
	return(enc28j60PhyReadH(PHSTAT2) && 4);
     d9e:	81 e1       	ldi	r24, 0x11	; 17
     da0:	0e 94 bb 03 	call	0x776	; 0x776 <enc28j60PhyReadH>
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	19 f0       	breq	.+6      	; 0xdae <enc28j60linkup+0x18>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 c0       	rjmp	.+4      	; 0xdb2 <enc28j60linkup+0x1c>
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <enc28j60PacketSend>:

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <enc28j60PacketSend+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <enc28j60PacketSend+0x8>
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	9a 83       	std	Y+2, r25	; 0x02
     dc6:	89 83       	std	Y+1, r24	; 0x01
     dc8:	7c 83       	std	Y+4, r23	; 0x04
     dca:	6b 83       	std	Y+3, r22	; 0x03
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     dcc:	13 c0       	rjmp	.+38     	; 0xdf4 <enc28j60PacketSend+0x3c>
        {
                // Reset the transmit logic problem. See Rev. B4 Silicon Errata point 12.
                if( (enc28j60Read(EIR) & EIR_TXERIF) ) {
     dce:	8c e1       	ldi	r24, 0x1C	; 28
     dd0:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	82 70       	andi	r24, 0x02	; 2
     dda:	99 27       	eor	r25, r25
     ddc:	00 97       	sbiw	r24, 0x00	; 0
     dde:	51 f0       	breq	.+20     	; 0xdf4 <enc28j60PacketSend+0x3c>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	6f e1       	ldi	r22, 0x1F	; 31
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
     dea:	40 e8       	ldi	r20, 0x80	; 128
     dec:	6f e1       	ldi	r22, 0x1F	; 31
     dee:	80 ea       	ldi	r24, 0xA0	; 160
     df0:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
}

void enc28j60PacketSend(uint16_t len, uint8_t* packet)
{
        // Check no transmit in progress
        while (enc28j60ReadOp(ENC28J60_READ_CTRL_REG, ECON1) & ECON1_TXRTS)
     df4:	6f e1       	ldi	r22, 0x1F	; 31
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	88 70       	andi	r24, 0x08	; 8
     e02:	99 27       	eor	r25, r25
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	19 f7       	brne	.-58     	; 0xdce <enc28j60PacketSend+0x16>
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRST);
                        enc28j60WriteOp(ENC28J60_BIT_FIELD_CLR, ECON1, ECON1_TXRST);
                }
        }
	// Set the write pointer to start of transmit buffer area
	enc28j60Write(EWRPTL, TXSTART_INIT&0xFF);
     e08:	6f ef       	ldi	r22, 0xFF	; 255
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(EWRPTH, TXSTART_INIT>>8);
     e10:	69 e1       	ldi	r22, 0x19	; 25
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// Set the TXND pointer to correspond to the packet size given
	enc28j60Write(ETXNDL, (TXSTART_INIT+len)&0xFF);
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	81 50       	subi	r24, 0x01	; 1
     e1c:	68 2f       	mov	r22, r24
     e1e:	86 e0       	ldi	r24, 0x06	; 6
     e20:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ETXNDH, (TXSTART_INIT+len)>>8);
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	9a 81       	ldd	r25, Y+2	; 0x02
     e28:	81 50       	subi	r24, 0x01	; 1
     e2a:	96 4e       	sbci	r25, 0xE6	; 230
     e2c:	89 2f       	mov	r24, r25
     e2e:	99 27       	eor	r25, r25
     e30:	68 2f       	mov	r22, r24
     e32:	87 e0       	ldi	r24, 0x07	; 7
     e34:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// write per-packet control byte (0x00 means use macon3 settings)
	enc28j60WriteOp(ENC28J60_WRITE_BUF_MEM, 0, 0x00);
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	8a e7       	ldi	r24, 0x7A	; 122
     e3e:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
	// copy the packet into the transmit buffer
	enc28j60WriteBuffer(len, packet);
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	b9 01       	movw	r22, r18
     e4c:	0e 94 29 03 	call	0x652	; 0x652 <enc28j60WriteBuffer>
	// send the contents of the transmit buffer onto the network
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON1, ECON1_TXRTS);
     e50:	48 e0       	ldi	r20, 0x08	; 8
     e52:	6f e1       	ldi	r22, 0x1F	; 31
     e54:	80 e8       	ldi	r24, 0x80	; 128
     e56:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
}
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <enc28j60PacketReceive>:
// The packet will by headed by an ethernet header.
//      maxlen  The maximum acceptable length of a retrieved packet.
//      packet  Pointer where packet data should be stored.
// Returns: Packet length in bytes if a packet was retrieved, zero otherwise.
uint16_t enc28j60PacketReceive(uint16_t maxlen, uint8_t* packet)
{
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	28 97       	sbiw	r28, 0x08	; 8
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	f8 94       	cli
     e76:	de bf       	out	0x3e, r29	; 62
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	9e 83       	std	Y+6, r25	; 0x06
     e7e:	8d 83       	std	Y+5, r24	; 0x05
     e80:	78 87       	std	Y+8, r23	; 0x08
     e82:	6f 83       	std	Y+7, r22	; 0x07
	uint16_t rxstat;
	uint16_t len;
	// check if a packet has been received and buffered
	//if( !(enc28j60Read(EIR) & EIR_PKTIF) ){
        // The above does not work. See Rev. B4 Silicon Errata point 6.
	if( enc28j60Read(EPKTCNT) ==0 ){
     e84:	89 e3       	ldi	r24, 0x39	; 57
     e86:	0e 94 aa 03 	call	0x754	; 0x754 <enc28j60Read>
     e8a:	88 23       	and	r24, r24
     e8c:	19 f4       	brne	.+6      	; 0xe94 <enc28j60PacketReceive+0x2c>
		return(0);
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	be c0       	rjmp	.+380    	; 0x1010 <enc28j60PacketReceive+0x1a8>
        }

	// Set the read pointer to the start of the received packet
	enc28j60Write(ERDPTL, (gNextPacketPtr &0xFF));
     e94:	80 91 1f 01 	lds	r24, 0x011F
     e98:	90 91 20 01 	lds	r25, 0x0120
     e9c:	68 2f       	mov	r22, r24
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ERDPTH, (gNextPacketPtr)>>8);
     ea4:	80 91 1f 01 	lds	r24, 0x011F
     ea8:	90 91 20 01 	lds	r25, 0x0120
     eac:	89 2f       	mov	r24, r25
     eae:	99 27       	eor	r25, r25
     eb0:	68 2f       	mov	r22, r24
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	// read the next packet pointer
	gNextPacketPtr  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	8a e3       	ldi	r24, 0x3A	; 58
     ebc:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 20 01 	sts	0x0120, r25
     ec8:	80 93 1f 01 	sts	0x011F, r24
	gNextPacketPtr |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8a e3       	ldi	r24, 0x3A	; 58
     ed0:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	98 2f       	mov	r25, r24
     eda:	88 27       	eor	r24, r24
     edc:	9c 01       	movw	r18, r24
     ede:	80 91 1f 01 	lds	r24, 0x011F
     ee2:	90 91 20 01 	lds	r25, 0x0120
     ee6:	82 2b       	or	r24, r18
     ee8:	93 2b       	or	r25, r19
     eea:	90 93 20 01 	sts	0x0120, r25
     eee:	80 93 1f 01 	sts	0x011F, r24
	// read the packet length (see datasheet page 43)
	len  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	8a e3       	ldi	r24, 0x3A	; 58
     ef6:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	9a 83       	std	Y+2, r25	; 0x02
     f00:	89 83       	std	Y+1, r24	; 0x01
	len |= enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0)<<8;
     f02:	60 e0       	ldi	r22, 0x00	; 0
     f04:	8a e3       	ldi	r24, 0x3A	; 58
     f06:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     f0a:	88 2f       	mov	r24, r24
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	98 2f       	mov	r25, r24
     f10:	88 27       	eor	r24, r24
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	3a 81       	ldd	r19, Y+2	; 0x02
     f16:	82 2b       	or	r24, r18
     f18:	93 2b       	or	r25, r19
     f1a:	9a 83       	std	Y+2, r25	; 0x02
     f1c:	89 83       	std	Y+1, r24	; 0x01
        len-=4; //remove the CRC count
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	9a 81       	ldd	r25, Y+2	; 0x02
     f22:	04 97       	sbiw	r24, 0x04	; 4
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	89 83       	std	Y+1, r24	; 0x01
	// read the receive status (see datasheet page 43)
	rxstat  = enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0);
     f28:	60 e0       	ldi	r22, 0x00	; 0
     f2a:	8a e3       	ldi	r24, 0x3A	; 58
     f2c:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     f30:	88 2f       	mov	r24, r24
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03
	rxstat |= ((uint16_t)enc28j60ReadOp(ENC28J60_READ_BUF_MEM, 0))<<8;
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	8a e3       	ldi	r24, 0x3A	; 58
     f3c:	0e 94 4c 02 	call	0x498	; 0x498 <enc28j60ReadOp>
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	98 2f       	mov	r25, r24
     f46:	88 27       	eor	r24, r24
     f48:	2b 81       	ldd	r18, Y+3	; 0x03
     f4a:	3c 81       	ldd	r19, Y+4	; 0x04
     f4c:	82 2b       	or	r24, r18
     f4e:	93 2b       	or	r25, r19
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
	// limit retrieve length
        if (len>maxlen-1){
     f54:	8d 81       	ldd	r24, Y+5	; 0x05
     f56:	9e 81       	ldd	r25, Y+6	; 0x06
     f58:	9c 01       	movw	r18, r24
     f5a:	21 50       	subi	r18, 0x01	; 1
     f5c:	31 09       	sbc	r19, r1
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	28 17       	cp	r18, r24
     f64:	39 07       	cpc	r19, r25
     f66:	28 f4       	brcc	.+10     	; 0xf72 <enc28j60PacketReceive+0x10a>
                len=maxlen-1;
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
        }
        // check CRC and symbol errors (see datasheet page 44, table 7-3):
        // The ERXFCON.CRCEN is set by default. Normally we should not
        // need to check this.
        if ((rxstat & 0x80)==0){
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	9c 81       	ldd	r25, Y+4	; 0x04
     f76:	80 78       	andi	r24, 0x80	; 128
     f78:	99 27       	eor	r25, r25
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	19 f4       	brne	.+6      	; 0xf84 <enc28j60PacketReceive+0x11c>
                // invalid
                len=0;
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <enc28j60PacketReceive+0x12a>
        }else{
                // copy the packet from the receive buffer
                enc28j60ReadBuffer(len, packet);
     f84:	2f 81       	ldd	r18, Y+7	; 0x07
     f86:	38 85       	ldd	r19, Y+8	; 0x08
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	9a 81       	ldd	r25, Y+2	; 0x02
     f8c:	b9 01       	movw	r22, r18
     f8e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <enc28j60ReadBuffer>
        }
	// Move the RX read pointer to the start of the next received packet
	// This frees the memory we just read out
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
     f92:	80 91 1f 01 	lds	r24, 0x011F
     f96:	90 91 20 01 	lds	r25, 0x0120
     f9a:	68 2f       	mov	r22, r24
     f9c:	8c e0       	ldi	r24, 0x0C	; 12
     f9e:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
     fa2:	80 91 1f 01 	lds	r24, 0x011F
     fa6:	90 91 20 01 	lds	r25, 0x0120
     faa:	89 2f       	mov	r24, r25
     fac:	99 27       	eor	r25, r25
     fae:	68 2f       	mov	r22, r24
     fb0:	8d e0       	ldi	r24, 0x0D	; 13
     fb2:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
     fb6:	80 91 1f 01 	lds	r24, 0x011F
     fba:	90 91 20 01 	lds	r25, 0x0120
     fbe:	01 97       	sbiw	r24, 0x01	; 1
	enc28j60Write(ERXRDPTL, (gNextPacketPtr &0xFF));
	enc28j60Write(ERXRDPTH, (gNextPacketPtr)>>8);
        // Move the RX read pointer to the start of the next received packet
        // This frees the memory we just read out.
        // However, compensate for the errata point 13, rev B4: enver write an even address!
        if ((gNextPacketPtr - 1 < RXSTART_INIT)
     fc0:	8f 3f       	cpi	r24, 0xFF	; 255
     fc2:	29 e1       	ldi	r18, 0x19	; 25
     fc4:	92 07       	cpc	r25, r18
     fc6:	48 f0       	brcs	.+18     	; 0xfda <enc28j60PacketReceive+0x172>
                || (gNextPacketPtr -1 > RXSTOP_INIT)) {
                enc28j60Write(ERXRDPTL, (RXSTOP_INIT)&0xFF);
     fc8:	6e ef       	ldi	r22, 0xFE	; 254
     fca:	8c e0       	ldi	r24, 0x0C	; 12
     fcc:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (RXSTOP_INIT)>>8);
     fd0:	69 e1       	ldi	r22, 0x19	; 25
     fd2:	8d e0       	ldi	r24, 0x0D	; 13
     fd4:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
     fd8:	14 c0       	rjmp	.+40     	; 0x1002 <enc28j60PacketReceive+0x19a>
        } else {
                enc28j60Write(ERXRDPTL, (gNextPacketPtr-1)&0xFF);
     fda:	80 91 1f 01 	lds	r24, 0x011F
     fde:	90 91 20 01 	lds	r25, 0x0120
     fe2:	81 50       	subi	r24, 0x01	; 1
     fe4:	68 2f       	mov	r22, r24
     fe6:	8c e0       	ldi	r24, 0x0C	; 12
     fe8:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
                enc28j60Write(ERXRDPTH, (gNextPacketPtr-1)>>8);
     fec:	80 91 1f 01 	lds	r24, 0x011F
     ff0:	90 91 20 01 	lds	r25, 0x0120
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	89 2f       	mov	r24, r25
     ff8:	99 27       	eor	r25, r25
     ffa:	68 2f       	mov	r22, r24
     ffc:	8d e0       	ldi	r24, 0x0D	; 13
     ffe:	0e 94 a8 04 	call	0x950	; 0x950 <enc28j60Write>
        }
	// decrement the packet counter indicate we are done with this packet
	enc28j60WriteOp(ENC28J60_BIT_FIELD_SET, ECON2, ECON2_PKTDEC);
    1002:	40 e4       	ldi	r20, 0x40	; 64
    1004:	6e e1       	ldi	r22, 0x1E	; 30
    1006:	80 e8       	ldi	r24, 0x80	; 128
    1008:	0e 94 97 02 	call	0x52e	; 0x52e <enc28j60WriteOp>
	return(len);
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1010:	28 96       	adiw	r28, 0x08	; 8
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <checksum>:
//
// For more information on how this algorithm works see:
// http://www.netfor2.com/checksum.html
// http://www.msc.uky.edu/ken/cs471/notes/chap3.htm
// The RFC has also a C code example: http://www.faqs.org/rfcs/rfc1071.html
uint16_t checksum(uint8_t *buf, uint16_t len,uint8_t type){
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	29 97       	sbiw	r28, 0x09	; 9
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	9e 83       	std	Y+6, r25	; 0x06
    1038:	8d 83       	std	Y+5, r24	; 0x05
    103a:	78 87       	std	Y+8, r23	; 0x08
    103c:	6f 83       	std	Y+7, r22	; 0x07
    103e:	49 87       	std	Y+9, r20	; 0x09
        // type 0=ip 
        //      1=udp
        //      2=tcp
        uint32_t sum = 0;
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	1a 82       	std	Y+2, r1	; 0x02
    1044:	1b 82       	std	Y+3, r1	; 0x03
    1046:	1c 82       	std	Y+4, r1	; 0x04

        //if(type==0){
        //        // do not add anything
        //}
        if(type==1){
    1048:	89 85       	ldd	r24, Y+9	; 0x09
    104a:	81 30       	cpi	r24, 0x01	; 1
    104c:	e9 f4       	brne	.+58     	; 0x1088 <checksum+0x66>
                sum+=IP_PROTO_UDP_V; // protocol udp
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	ab 81       	ldd	r26, Y+3	; 0x03
    1054:	bc 81       	ldd	r27, Y+4	; 0x04
    1056:	41 96       	adiw	r24, 0x11	; 17
    1058:	a1 1d       	adc	r26, r1
    105a:	b1 1d       	adc	r27, r1
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	ab 83       	std	Y+3, r26	; 0x03
    1062:	bc 83       	std	Y+4, r27	; 0x04
                // the length here is the length of udp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
    1064:	8f 81       	ldd	r24, Y+7	; 0x07
    1066:	98 85       	ldd	r25, Y+8	; 0x08
    1068:	08 97       	sbiw	r24, 0x08	; 8
    106a:	cc 01       	movw	r24, r24
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	29 81       	ldd	r18, Y+1	; 0x01
    1072:	3a 81       	ldd	r19, Y+2	; 0x02
    1074:	4b 81       	ldd	r20, Y+3	; 0x03
    1076:	5c 81       	ldd	r21, Y+4	; 0x04
    1078:	82 0f       	add	r24, r18
    107a:	93 1f       	adc	r25, r19
    107c:	a4 1f       	adc	r26, r20
    107e:	b5 1f       	adc	r27, r21
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	ab 83       	std	Y+3, r26	; 0x03
    1086:	bc 83       	std	Y+4, r27	; 0x04
        }
        if(type==2){
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	f1 f4       	brne	.+60     	; 0x10ca <checksum+0xa8>
                sum+=IP_PROTO_TCP_V; 
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	ab 81       	ldd	r26, Y+3	; 0x03
    1094:	bc 81       	ldd	r27, Y+4	; 0x04
    1096:	06 96       	adiw	r24, 0x06	; 6
    1098:	a1 1d       	adc	r26, r1
    109a:	b1 1d       	adc	r27, r1
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	ab 83       	std	Y+3, r26	; 0x03
    10a2:	bc 83       	std	Y+4, r27	; 0x04
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
    10a4:	8f 81       	ldd	r24, Y+7	; 0x07
    10a6:	98 85       	ldd	r25, Y+8	; 0x08
    10a8:	08 97       	sbiw	r24, 0x08	; 8
    10aa:	cc 01       	movw	r24, r24
    10ac:	a0 e0       	ldi	r26, 0x00	; 0
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	29 81       	ldd	r18, Y+1	; 0x01
    10b2:	3a 81       	ldd	r19, Y+2	; 0x02
    10b4:	4b 81       	ldd	r20, Y+3	; 0x03
    10b6:	5c 81       	ldd	r21, Y+4	; 0x04
    10b8:	82 0f       	add	r24, r18
    10ba:	93 1f       	adc	r25, r19
    10bc:	a4 1f       	adc	r26, r20
    10be:	b5 1f       	adc	r27, r21
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	ab 83       	std	Y+3, r26	; 0x03
    10c6:	bc 83       	std	Y+4, r27	; 0x04
        }
        // build the sum of 16bit words
        while(len >1){
    10c8:	2b c0       	rjmp	.+86     	; 0x1120 <checksum+0xfe>
    10ca:	2a c0       	rjmp	.+84     	; 0x1120 <checksum+0xfe>
                sum += 0xFFFF & (*buf<<8|*(buf+1));
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	fc 01       	movw	r30, r24
    10d2:	80 81       	ld	r24, Z
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	38 2f       	mov	r19, r24
    10da:	22 27       	eor	r18, r18
    10dc:	8d 81       	ldd	r24, Y+5	; 0x05
    10de:	9e 81       	ldd	r25, Y+6	; 0x06
    10e0:	01 96       	adiw	r24, 0x01	; 1
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	88 2f       	mov	r24, r24
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	82 2b       	or	r24, r18
    10ec:	93 2b       	or	r25, r19
    10ee:	cc 01       	movw	r24, r24
    10f0:	a0 e0       	ldi	r26, 0x00	; 0
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	29 81       	ldd	r18, Y+1	; 0x01
    10f6:	3a 81       	ldd	r19, Y+2	; 0x02
    10f8:	4b 81       	ldd	r20, Y+3	; 0x03
    10fa:	5c 81       	ldd	r21, Y+4	; 0x04
    10fc:	82 0f       	add	r24, r18
    10fe:	93 1f       	adc	r25, r19
    1100:	a4 1f       	adc	r26, r20
    1102:	b5 1f       	adc	r27, r21
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	9a 83       	std	Y+2, r25	; 0x02
    1108:	ab 83       	std	Y+3, r26	; 0x03
    110a:	bc 83       	std	Y+4, r27	; 0x04
                buf+=2;
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	02 96       	adiw	r24, 0x02	; 2
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
                len-=2;
    1116:	8f 81       	ldd	r24, Y+7	; 0x07
    1118:	98 85       	ldd	r25, Y+8	; 0x08
    111a:	02 97       	sbiw	r24, 0x02	; 2
    111c:	98 87       	std	Y+8, r25	; 0x08
    111e:	8f 83       	std	Y+7, r24	; 0x07
                // the length here is the length of tcp (data+header len)
                // =length given to this function - (IP.scr+IP.dst length)
                sum+=len-8; // = real tcp len
        }
        // build the sum of 16bit words
        while(len >1){
    1120:	8f 81       	ldd	r24, Y+7	; 0x07
    1122:	98 85       	ldd	r25, Y+8	; 0x08
    1124:	82 30       	cpi	r24, 0x02	; 2
    1126:	91 05       	cpc	r25, r1
    1128:	88 f6       	brcc	.-94     	; 0x10cc <checksum+0xaa>
                sum += 0xFFFF & (*buf<<8|*(buf+1));
                buf+=2;
                len-=2;
        }
        // if there is a byte left then add it (padded with zero)
        if (len){
    112a:	8f 81       	ldd	r24, Y+7	; 0x07
    112c:	98 85       	ldd	r25, Y+8	; 0x08
    112e:	00 97       	sbiw	r24, 0x00	; 0
    1130:	c9 f0       	breq	.+50     	; 0x1164 <checksum+0x142>
                sum += (0xFF & *buf)<<8;
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	fc 01       	movw	r30, r24
    1138:	80 81       	ld	r24, Z
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	98 2f       	mov	r25, r24
    1140:	88 27       	eor	r24, r24
    1142:	aa 27       	eor	r26, r26
    1144:	97 fd       	sbrc	r25, 7
    1146:	a0 95       	com	r26
    1148:	ba 2f       	mov	r27, r26
    114a:	29 81       	ldd	r18, Y+1	; 0x01
    114c:	3a 81       	ldd	r19, Y+2	; 0x02
    114e:	4b 81       	ldd	r20, Y+3	; 0x03
    1150:	5c 81       	ldd	r21, Y+4	; 0x04
    1152:	82 0f       	add	r24, r18
    1154:	93 1f       	adc	r25, r19
    1156:	a4 1f       	adc	r26, r20
    1158:	b5 1f       	adc	r27, r21
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	ab 83       	std	Y+3, r26	; 0x03
    1160:	bc 83       	std	Y+4, r27	; 0x04
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
    1162:	18 c0       	rjmp	.+48     	; 0x1194 <checksum+0x172>
    1164:	17 c0       	rjmp	.+46     	; 0x1194 <checksum+0x172>
                sum = (sum & 0xFFFF)+(sum >> 16);
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	9a 81       	ldd	r25, Y+2	; 0x02
    116a:	ab 81       	ldd	r26, Y+3	; 0x03
    116c:	bc 81       	ldd	r27, Y+4	; 0x04
    116e:	9c 01       	movw	r18, r24
    1170:	ad 01       	movw	r20, r26
    1172:	44 27       	eor	r20, r20
    1174:	55 27       	eor	r21, r21
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	ab 81       	ldd	r26, Y+3	; 0x03
    117c:	bc 81       	ldd	r27, Y+4	; 0x04
    117e:	cd 01       	movw	r24, r26
    1180:	aa 27       	eor	r26, r26
    1182:	bb 27       	eor	r27, r27
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	a4 1f       	adc	r26, r20
    118a:	b5 1f       	adc	r27, r21
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	ab 83       	std	Y+3, r26	; 0x03
    1192:	bc 83       	std	Y+4, r27	; 0x04
        if (len){
                sum += (0xFF & *buf)<<8;
        }
        // now calculate the sum over the bytes in the sum
        // until the result is only 16bit long
        while (sum>>16){
    1194:	89 81       	ldd	r24, Y+1	; 0x01
    1196:	9a 81       	ldd	r25, Y+2	; 0x02
    1198:	ab 81       	ldd	r26, Y+3	; 0x03
    119a:	bc 81       	ldd	r27, Y+4	; 0x04
    119c:	cd 01       	movw	r24, r26
    119e:	aa 27       	eor	r26, r26
    11a0:	bb 27       	eor	r27, r27
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	a1 05       	cpc	r26, r1
    11a6:	b1 05       	cpc	r27, r1
    11a8:	f1 f6       	brne	.-68     	; 0x1166 <checksum+0x144>
                sum = (sum & 0xFFFF)+(sum >> 16);
        }
        // build 1's complement:
        return( (uint16_t) sum ^ 0xFFFF);
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	80 95       	com	r24
    11b0:	90 95       	com	r25
}
    11b2:	29 96       	adiw	r28, 0x09	; 9
    11b4:	0f b6       	in	r0, 0x3f	; 63
    11b6:	f8 94       	cli
    11b8:	de bf       	out	0x3e, r29	; 62
    11ba:	0f be       	out	0x3f, r0	; 63
    11bc:	cd bf       	out	0x3d, r28	; 61
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	08 95       	ret

000011c4 <init_ip_arp_udp_tcp>:

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <init_ip_arp_udp_tcp+0x6>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <init_ip_arp_udp_tcp+0x8>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <init_ip_arp_udp_tcp+0xa>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	9b 83       	std	Y+3, r25	; 0x03
    11d4:	8a 83       	std	Y+2, r24	; 0x02
    11d6:	7d 83       	std	Y+5, r23	; 0x05
    11d8:	6c 83       	std	Y+4, r22	; 0x04
    11da:	4e 83       	std	Y+6, r20	; 0x06
        uint8_t i=0;
    11dc:	19 82       	std	Y+1, r1	; 0x01
        wwwport=wwwp;
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	80 93 06 01 	sts	0x0106, r24
        while(i<4){
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <init_ip_arp_udp_tcp+0x48>
                ipaddr[i]=myip[i];
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	29 81       	ldd	r18, Y+1	; 0x01
    11ee:	22 2f       	mov	r18, r18
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	4c 81       	ldd	r20, Y+4	; 0x04
    11f4:	5d 81       	ldd	r21, Y+5	; 0x05
    11f6:	24 0f       	add	r18, r20
    11f8:	35 1f       	adc	r19, r21
    11fa:	f9 01       	movw	r30, r18
    11fc:	20 81       	ld	r18, Z
    11fe:	89 5d       	subi	r24, 0xD9	; 217
    1200:	9e 4f       	sbci	r25, 0xFE	; 254
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
                i++;
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	89 83       	std	Y+1, r24	; 0x01

// you must call this function once before you use any of the other functions:
void init_ip_arp_udp_tcp(uint8_t *mymac,uint8_t *myip,uint8_t wwwp){
        uint8_t i=0;
        wwwport=wwwp;
        while(i<4){
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	50 f3       	brcs	.-44     	; 0x11e6 <init_ip_arp_udp_tcp+0x22>
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
    1212:	19 82       	std	Y+1, r1	; 0x01
        while(i<6){
    1214:	13 c0       	rjmp	.+38     	; 0x123c <init_ip_arp_udp_tcp+0x78>
                macaddr[i]=mymac[i];
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	29 81       	ldd	r18, Y+1	; 0x01
    121e:	22 2f       	mov	r18, r18
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a 81       	ldd	r20, Y+2	; 0x02
    1224:	5b 81       	ldd	r21, Y+3	; 0x03
    1226:	24 0f       	add	r18, r20
    1228:	35 1f       	adc	r19, r21
    122a:	f9 01       	movw	r30, r18
    122c:	20 81       	ld	r18, Z
    122e:	8f 5d       	subi	r24, 0xDF	; 223
    1230:	9e 4f       	sbci	r25, 0xFE	; 254
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
                i++;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	89 83       	std	Y+1, r24	; 0x01
        while(i<4){
                ipaddr[i]=myip[i];
                i++;
        }
        i=0;
        while(i<6){
    123c:	89 81       	ldd	r24, Y+1	; 0x01
    123e:	86 30       	cpi	r24, 0x06	; 6
    1240:	50 f3       	brcs	.-44     	; 0x1216 <init_ip_arp_udp_tcp+0x52>
                macaddr[i]=mymac[i];
                i++;
        }
}
    1242:	26 96       	adiw	r28, 0x06	; 6
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <eth_type_is_arp_and_my_ip>:

uint8_t eth_type_is_arp_and_my_ip(uint8_t *buf,uint16_t len){
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	00 d0       	rcall	.+0      	; 0x125a <eth_type_is_arp_and_my_ip+0x6>
    125a:	00 d0       	rcall	.+0      	; 0x125c <eth_type_is_arp_and_my_ip+0x8>
    125c:	1f 92       	push	r1
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	9b 83       	std	Y+3, r25	; 0x03
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	7d 83       	std	Y+5, r23	; 0x05
    1268:	6c 83       	std	Y+4, r22	; 0x04
        uint8_t i=0;
    126a:	19 82       	std	Y+1, r1	; 0x01
        //  
        if (len<41){
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	89 32       	cpi	r24, 0x29	; 41
    1272:	91 05       	cpc	r25, r1
    1274:	10 f4       	brcc	.+4      	; 0x127a <eth_type_is_arp_and_my_ip+0x26>
                return(0);
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	2d c0       	rjmp	.+90     	; 0x12d4 <eth_type_is_arp_and_my_ip+0x80>
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	0c 96       	adiw	r24, 0x0c	; 12
    1280:	fc 01       	movw	r30, r24
    1282:	80 81       	ld	r24, Z
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	39 f4       	brne	.+14     	; 0x1296 <eth_type_is_arp_and_my_ip+0x42>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	9b 81       	ldd	r25, Y+3	; 0x03
    128c:	0d 96       	adiw	r24, 0x0d	; 13
    128e:	fc 01       	movw	r30, r24
    1290:	80 81       	ld	r24, Z
        uint8_t i=0;
        //  
        if (len<41){
                return(0);
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	11 f0       	breq	.+4      	; 0x129a <eth_type_is_arp_and_my_ip+0x46>
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	1d c0       	rjmp	.+58     	; 0x12d4 <eth_type_is_arp_and_my_ip+0x80>
        }
        while(i<4){
    129a:	18 c0       	rjmp	.+48     	; 0x12cc <eth_type_is_arp_and_my_ip+0x78>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	88 2f       	mov	r24, r24
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	86 96       	adiw	r24, 0x26	; 38
    12a4:	2a 81       	ldd	r18, Y+2	; 0x02
    12a6:	3b 81       	ldd	r19, Y+3	; 0x03
    12a8:	82 0f       	add	r24, r18
    12aa:	93 1f       	adc	r25, r19
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 81       	ld	r18, Z
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	89 5d       	subi	r24, 0xD9	; 217
    12b8:	9e 4f       	sbci	r25, 0xFE	; 254
    12ba:	fc 01       	movw	r30, r24
    12bc:	80 81       	ld	r24, Z
    12be:	28 17       	cp	r18, r24
    12c0:	11 f0       	breq	.+4      	; 0x12c6 <eth_type_is_arp_and_my_ip+0x72>
                        return(0);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	07 c0       	rjmp	.+14     	; 0x12d4 <eth_type_is_arp_and_my_ip+0x80>
                }
                i++;
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	8f 5f       	subi	r24, 0xFF	; 255
    12ca:	89 83       	std	Y+1, r24	; 0x01
        }
        if(buf[ETH_TYPE_H_P] != ETHTYPE_ARP_H_V || 
           buf[ETH_TYPE_L_P] != ETHTYPE_ARP_L_V){
                return(0);
        }
        while(i<4){
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	28 f3       	brcs	.-54     	; 0x129c <eth_type_is_arp_and_my_ip+0x48>
                if(buf[ETH_ARP_DST_IP_P+i] != ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	08 95       	ret

000012e4 <eth_type_is_ip_and_my_ip>:

uint8_t eth_type_is_ip_and_my_ip(uint8_t *buf,uint16_t len){
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <eth_type_is_ip_and_my_ip+0x6>
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <eth_type_is_ip_and_my_ip+0x8>
    12ec:	1f 92       	push	r1
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
    12f6:	7d 83       	std	Y+5, r23	; 0x05
    12f8:	6c 83       	std	Y+4, r22	; 0x04
        uint8_t i=0;
    12fa:	19 82       	std	Y+1, r1	; 0x01
        //eth+ip+udp header is 42
        if (len<42){
    12fc:	8c 81       	ldd	r24, Y+4	; 0x04
    12fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1300:	8a 32       	cpi	r24, 0x2A	; 42
    1302:	91 05       	cpc	r25, r1
    1304:	10 f4       	brcc	.+4      	; 0x130a <eth_type_is_ip_and_my_ip+0x26>
                return(0);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	36 c0       	rjmp	.+108    	; 0x1376 <eth_type_is_ip_and_my_ip+0x92>
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	9b 81       	ldd	r25, Y+3	; 0x03
    130e:	0c 96       	adiw	r24, 0x0c	; 12
    1310:	fc 01       	movw	r30, r24
    1312:	80 81       	ld	r24, Z
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	39 f4       	brne	.+14     	; 0x1326 <eth_type_is_ip_and_my_ip+0x42>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	9b 81       	ldd	r25, Y+3	; 0x03
    131c:	0d 96       	adiw	r24, 0x0d	; 13
    131e:	fc 01       	movw	r30, r24
    1320:	80 81       	ld	r24, Z
        uint8_t i=0;
        //eth+ip+udp header is 42
        if (len<42){
                return(0);
        }
        if(buf[ETH_TYPE_H_P]!=ETHTYPE_IP_H_V || 
    1322:	88 23       	and	r24, r24
    1324:	11 f0       	breq	.+4      	; 0x132a <eth_type_is_ip_and_my_ip+0x46>
           buf[ETH_TYPE_L_P]!=ETHTYPE_IP_L_V){
                return(0);
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	26 c0       	rjmp	.+76     	; 0x1376 <eth_type_is_ip_and_my_ip+0x92>
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	0e 96       	adiw	r24, 0x0e	; 14
    1330:	fc 01       	movw	r30, r24
    1332:	80 81       	ld	r24, Z
    1334:	85 34       	cpi	r24, 0x45	; 69
    1336:	11 f0       	breq	.+4      	; 0x133c <eth_type_is_ip_and_my_ip+0x58>
                // must be IP V4 and 20 byte header
                return(0);
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	1d c0       	rjmp	.+58     	; 0x1376 <eth_type_is_ip_and_my_ip+0x92>
        }
        while(i<4){
    133c:	18 c0       	rjmp	.+48     	; 0x136e <eth_type_is_ip_and_my_ip+0x8a>
                if(buf[IP_DST_P+i]!=ipaddr[i]){
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	4e 96       	adiw	r24, 0x1e	; 30
    1346:	2a 81       	ldd	r18, Y+2	; 0x02
    1348:	3b 81       	ldd	r19, Y+3	; 0x03
    134a:	82 0f       	add	r24, r18
    134c:	93 1f       	adc	r25, r19
    134e:	fc 01       	movw	r30, r24
    1350:	20 81       	ld	r18, Z
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	89 5d       	subi	r24, 0xD9	; 217
    135a:	9e 4f       	sbci	r25, 0xFE	; 254
    135c:	fc 01       	movw	r30, r24
    135e:	80 81       	ld	r24, Z
    1360:	28 17       	cp	r18, r24
    1362:	11 f0       	breq	.+4      	; 0x1368 <eth_type_is_ip_and_my_ip+0x84>
                        return(0);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <eth_type_is_ip_and_my_ip+0x92>
                }
                i++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01
        }
        if (buf[IP_HEADER_LEN_VER_P]!=0x45){
                // must be IP V4 and 20 byte header
                return(0);
        }
        while(i<4){
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	84 30       	cpi	r24, 0x04	; 4
    1372:	28 f3       	brcs	.-54     	; 0x133e <eth_type_is_ip_and_my_ip+0x5a>
                if(buf[IP_DST_P+i]!=ipaddr[i]){
                        return(0);
                }
                i++;
        }
        return(1);
    1374:	81 e0       	ldi	r24, 0x01	; 1
}
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <make_eth>:
// make a return eth header from a received eth packet
void make_eth(uint8_t *buf)
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	00 d0       	rcall	.+0      	; 0x138c <make_eth+0x6>
    138c:	1f 92       	push	r1
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	9b 83       	std	Y+3, r25	; 0x03
    1394:	8a 83       	std	Y+2, r24	; 0x02
        uint8_t i=0;
    1396:	19 82       	std	Y+1, r1	; 0x01
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
    1398:	28 c0       	rjmp	.+80     	; 0x13ea <make_eth+0x64>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
    139a:	89 81       	ldd	r24, Y+1	; 0x01
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	2a 81       	ldd	r18, Y+2	; 0x02
    13a2:	3b 81       	ldd	r19, Y+3	; 0x03
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	29 81       	ldd	r18, Y+1	; 0x01
    13aa:	22 2f       	mov	r18, r18
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	2a 5f       	subi	r18, 0xFA	; 250
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	4a 81       	ldd	r20, Y+2	; 0x02
    13b4:	5b 81       	ldd	r21, Y+3	; 0x03
    13b6:	24 0f       	add	r18, r20
    13b8:	35 1f       	adc	r19, r21
    13ba:	f9 01       	movw	r30, r18
    13bc:	20 81       	ld	r18, Z
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18
                buf[ETH_SRC_MAC +i]=macaddr[i];
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	88 2f       	mov	r24, r24
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	06 96       	adiw	r24, 0x06	; 6
    13ca:	2a 81       	ldd	r18, Y+2	; 0x02
    13cc:	3b 81       	ldd	r19, Y+3	; 0x03
    13ce:	82 0f       	add	r24, r18
    13d0:	93 1f       	adc	r25, r19
    13d2:	29 81       	ldd	r18, Y+1	; 0x01
    13d4:	22 2f       	mov	r18, r18
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	2f 5d       	subi	r18, 0xDF	; 223
    13da:	3e 4f       	sbci	r19, 0xFE	; 254
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
                i++;
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	8f 5f       	subi	r24, 0xFF	; 255
    13e8:	89 83       	std	Y+1, r24	; 0x01
void make_eth(uint8_t *buf)
{
        uint8_t i=0;
        //
        //copy the destination mac from the source and fill my mac into src
        while(i<6){
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	86 30       	cpi	r24, 0x06	; 6
    13ee:	a8 f2       	brcs	.-86     	; 0x139a <make_eth+0x14>
                buf[ETH_DST_MAC +i]=buf[ETH_SRC_MAC +i];
                buf[ETH_SRC_MAC +i]=macaddr[i];
                i++;
        }
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <fill_ip_hdr_checksum>:
void fill_ip_hdr_checksum(uint8_t *buf)
{
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	00 d0       	rcall	.+0      	; 0x1402 <fill_ip_hdr_checksum+0x6>
    1402:	00 d0       	rcall	.+0      	; 0x1404 <fill_ip_hdr_checksum+0x8>
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	9c 83       	std	Y+4, r25	; 0x04
    140a:	8b 83       	std	Y+3, r24	; 0x03
        uint16_t ck;
        // clear the 2 byte checksum
        buf[IP_CHECKSUM_P]=0;
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	9c 81       	ldd	r25, Y+4	; 0x04
    1410:	48 96       	adiw	r24, 0x18	; 24
    1412:	fc 01       	movw	r30, r24
    1414:	10 82       	st	Z, r1
        buf[IP_CHECKSUM_P+1]=0;
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	49 96       	adiw	r24, 0x19	; 25
    141c:	fc 01       	movw	r30, r24
    141e:	10 82       	st	Z, r1
        buf[IP_FLAGS_P]=0x40; // don't fragment
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	44 96       	adiw	r24, 0x14	; 20
    1426:	20 e4       	ldi	r18, 0x40	; 64
    1428:	fc 01       	movw	r30, r24
    142a:	20 83       	st	Z, r18
        buf[IP_FLAGS_P+1]=0;  // fragement offset
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	45 96       	adiw	r24, 0x15	; 21
    1432:	fc 01       	movw	r30, r24
    1434:	10 82       	st	Z, r1
        buf[IP_TTL_P]=64; // ttl
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	46 96       	adiw	r24, 0x16	; 22
    143c:	20 e4       	ldi	r18, 0x40	; 64
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
        // calculate the checksum:
        ck=checksum(&buf[IP_P], IP_HEADER_LEN,0);
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	0e 96       	adiw	r24, 0x0e	; 14
    1448:	40 e0       	ldi	r20, 0x00	; 0
    144a:	64 e1       	ldi	r22, 0x14	; 20
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	0e 94 11 08 	call	0x1022	; 0x1022 <checksum>
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
        buf[IP_CHECKSUM_P]=ck>>8;
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	48 96       	adiw	r24, 0x18	; 24
    145c:	29 81       	ldd	r18, Y+1	; 0x01
    145e:	3a 81       	ldd	r19, Y+2	; 0x02
    1460:	23 2f       	mov	r18, r19
    1462:	33 27       	eor	r19, r19
    1464:	fc 01       	movw	r30, r24
    1466:	20 83       	st	Z, r18
        buf[IP_CHECKSUM_P+1]=ck& 0xff;
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	49 96       	adiw	r24, 0x19	; 25
    146e:	29 81       	ldd	r18, Y+1	; 0x01
    1470:	fc 01       	movw	r30, r24
    1472:	20 83       	st	Z, r18
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <make_ip>:

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
    1482:	cf 93       	push	r28
    1484:	df 93       	push	r29
    1486:	00 d0       	rcall	.+0      	; 0x1488 <make_ip+0x6>
    1488:	1f 92       	push	r1
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9b 83       	std	Y+3, r25	; 0x03
    1490:	8a 83       	std	Y+2, r24	; 0x02
        uint8_t i=0;
    1492:	19 82       	std	Y+1, r1	; 0x01
        while(i<4){
    1494:	29 c0       	rjmp	.+82     	; 0x14e8 <make_ip+0x66>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	88 2f       	mov	r24, r24
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	4e 96       	adiw	r24, 0x1e	; 30
    149e:	2a 81       	ldd	r18, Y+2	; 0x02
    14a0:	3b 81       	ldd	r19, Y+3	; 0x03
    14a2:	82 0f       	add	r24, r18
    14a4:	93 1f       	adc	r25, r19
    14a6:	29 81       	ldd	r18, Y+1	; 0x01
    14a8:	22 2f       	mov	r18, r18
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	26 5e       	subi	r18, 0xE6	; 230
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255
    14b0:	4a 81       	ldd	r20, Y+2	; 0x02
    14b2:	5b 81       	ldd	r21, Y+3	; 0x03
    14b4:	24 0f       	add	r18, r20
    14b6:	35 1f       	adc	r19, r21
    14b8:	f9 01       	movw	r30, r18
    14ba:	20 81       	ld	r18, Z
    14bc:	fc 01       	movw	r30, r24
    14be:	20 83       	st	Z, r18
                buf[IP_SRC_P+i]=ipaddr[i];
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	4a 96       	adiw	r24, 0x1a	; 26
    14c8:	2a 81       	ldd	r18, Y+2	; 0x02
    14ca:	3b 81       	ldd	r19, Y+3	; 0x03
    14cc:	82 0f       	add	r24, r18
    14ce:	93 1f       	adc	r25, r19
    14d0:	29 81       	ldd	r18, Y+1	; 0x01
    14d2:	22 2f       	mov	r18, r18
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	29 5d       	subi	r18, 0xD9	; 217
    14d8:	3e 4f       	sbci	r19, 0xFE	; 254
    14da:	f9 01       	movw	r30, r18
    14dc:	20 81       	ld	r18, Z
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
                i++;
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	89 83       	std	Y+1, r24	; 0x01

// make a return ip header from a received ip packet
void make_ip(uint8_t *buf)
{
        uint8_t i=0;
        while(i<4){
    14e8:	89 81       	ldd	r24, Y+1	; 0x01
    14ea:	84 30       	cpi	r24, 0x04	; 4
    14ec:	a0 f2       	brcs	.-88     	; 0x1496 <make_ip+0x14>
                buf[IP_DST_P+i]=buf[IP_SRC_P+i];
                buf[IP_SRC_P+i]=ipaddr[i];
                i++;
        }
        fill_ip_hdr_checksum(buf);
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	9b 81       	ldd	r25, Y+3	; 0x03
    14f2:	0e 94 fe 09 	call	0x13fc	; 0x13fc <fill_ip_hdr_checksum>
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <make_tcphead>:
//
// After calling this function you can fill in the first data byte at TCP_OPTIONS_P+4
// If cp_seq=0 then an initial sequence number is used (should be use in synack)
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	28 97       	sbiw	r28, 0x08	; 8
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	9c 83       	std	Y+4, r25	; 0x04
    1518:	8b 83       	std	Y+3, r24	; 0x03
    151a:	7e 83       	std	Y+6, r23	; 0x06
    151c:	6d 83       	std	Y+5, r22	; 0x05
    151e:	4f 83       	std	Y+7, r20	; 0x07
    1520:	28 87       	std	Y+8, r18	; 0x08
        uint8_t i=0;
    1522:	19 82       	std	Y+1, r1	; 0x01
        uint8_t tseq;
        while(i<2){
    1524:	22 c0       	rjmp	.+68     	; 0x156a <make_tcphead+0x68>
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	84 96       	adiw	r24, 0x24	; 36
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	29 81       	ldd	r18, Y+1	; 0x01
    1538:	22 2f       	mov	r18, r18
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	2e 5d       	subi	r18, 0xDE	; 222
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	4b 81       	ldd	r20, Y+3	; 0x03
    1542:	5c 81       	ldd	r21, Y+4	; 0x04
    1544:	24 0f       	add	r18, r20
    1546:	35 1f       	adc	r19, r21
    1548:	f9 01       	movw	r30, r18
    154a:	20 81       	ld	r18, Z
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	88 2f       	mov	r24, r24
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	82 96       	adiw	r24, 0x22	; 34
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	fc 01       	movw	r30, r24
    1562:	10 82       	st	Z, r1
                i++;
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	8f 5f       	subi	r24, 0xFF	; 255
    1568:	89 83       	std	Y+1, r24	; 0x01
// otherwise it is copied from the packet we received
void make_tcphead(uint8_t *buf,uint16_t rel_ack_num,uint8_t mss,uint8_t cp_seq)
{
        uint8_t i=0;
        uint8_t tseq;
        while(i<2){
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	d8 f2       	brcs	.-74     	; 0x1526 <make_tcphead+0x24>
                buf[TCP_DST_PORT_H_P+i]=buf[TCP_SRC_PORT_H_P+i];
                buf[TCP_SRC_PORT_H_P+i]=0; // clear source port
                i++;
        }
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	83 96       	adiw	r24, 0x23	; 35
    1576:	20 91 06 01 	lds	r18, 0x0106
    157a:	fc 01       	movw	r30, r24
    157c:	20 83       	st	Z, r18
        i=4;
    157e:	84 e0       	ldi	r24, 0x04	; 4
    1580:	89 83       	std	Y+1, r24	; 0x01
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
    1582:	4a c0       	rjmp	.+148    	; 0x1618 <make_tcphead+0x116>
                rel_ack_num=buf[TCP_SEQ_H_P+i-1]+rel_ack_num;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	85 96       	adiw	r24, 0x25	; 37
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	82 0f       	add	r24, r18
    1592:	93 1f       	adc	r25, r19
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2d 81       	ldd	r18, Y+5	; 0x05
    159e:	3e 81       	ldd	r19, Y+6	; 0x06
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	9e 83       	std	Y+6, r25	; 0x06
    15a6:	8d 83       	std	Y+5, r24	; 0x05
                tseq=buf[TCP_SEQACK_H_P+i-1];
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	89 96       	adiw	r24, 0x29	; 41
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	82 0f       	add	r24, r18
    15b6:	93 1f       	adc	r25, r19
    15b8:	fc 01       	movw	r30, r24
    15ba:	80 81       	ld	r24, Z
    15bc:	8a 83       	std	Y+2, r24	; 0x02
                buf[TCP_SEQACK_H_P+i-1]=0xff&rel_ack_num;
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	88 2f       	mov	r24, r24
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	89 96       	adiw	r24, 0x29	; 41
    15c6:	2b 81       	ldd	r18, Y+3	; 0x03
    15c8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	2d 81       	ldd	r18, Y+5	; 0x05
    15d0:	fc 01       	movw	r30, r24
    15d2:	20 83       	st	Z, r18
                if (cp_seq){
    15d4:	88 85       	ldd	r24, Y+8	; 0x08
    15d6:	88 23       	and	r24, r24
    15d8:	61 f0       	breq	.+24     	; 0x15f2 <make_tcphead+0xf0>
                        // copy the acknum sent to us into the sequence number
                        buf[TCP_SEQ_H_P+i-1]=tseq;
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	85 96       	adiw	r24, 0x25	; 37
    15e2:	2b 81       	ldd	r18, Y+3	; 0x03
    15e4:	3c 81       	ldd	r19, Y+4	; 0x04
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	2a 81       	ldd	r18, Y+2	; 0x02
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
    15f0:	0a c0       	rjmp	.+20     	; 0x1606 <make_tcphead+0x104>
                }else{
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
    15f2:	89 81       	ldd	r24, Y+1	; 0x01
    15f4:	88 2f       	mov	r24, r24
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	85 96       	adiw	r24, 0x25	; 37
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	82 0f       	add	r24, r18
    1600:	93 1f       	adc	r25, r19
    1602:	fc 01       	movw	r30, r24
    1604:	10 82       	st	Z, r1
                }
                rel_ack_num=rel_ack_num>>8;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	89 2f       	mov	r24, r25
    160c:	99 27       	eor	r25, r25
    160e:	9e 83       	std	Y+6, r25	; 0x06
    1610:	8d 83       	std	Y+5, r24	; 0x05
                i--;
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	81 50       	subi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
        // set source port  (http):
        buf[TCP_SRC_PORT_L_P]=wwwport;
        i=4;
        // sequence numbers:
        // add the rel ack num to SEQACK
        while(i>0){
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	88 23       	and	r24, r24
    161c:	09 f0       	breq	.+2      	; 0x1620 <make_tcphead+0x11e>
    161e:	b2 cf       	rjmp	.-156    	; 0x1584 <make_tcphead+0x82>
                        buf[TCP_SEQ_H_P+i-1]= 0; // some preset vallue
                }
                rel_ack_num=rel_ack_num>>8;
                i--;
        }
        if (cp_seq==0){
    1620:	88 85       	ldd	r24, Y+8	; 0x08
    1622:	88 23       	and	r24, r24
    1624:	d9 f4       	brne	.+54     	; 0x165c <make_tcphead+0x15a>
                // put inital seq number
                buf[TCP_SEQ_H_P+0]= 0;
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	86 96       	adiw	r24, 0x26	; 38
    162c:	fc 01       	movw	r30, r24
    162e:	10 82       	st	Z, r1
                buf[TCP_SEQ_H_P+1]= 0;
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	9c 81       	ldd	r25, Y+4	; 0x04
    1634:	87 96       	adiw	r24, 0x27	; 39
    1636:	fc 01       	movw	r30, r24
    1638:	10 82       	st	Z, r1
                // we step only the second byte, this allows us to send packts 
                // with 255 bytes or 512 (if we step the initial seqnum by 2)
                buf[TCP_SEQ_H_P+2]= seqnum; 
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	88 96       	adiw	r24, 0x28	; 40
    1640:	20 91 07 01 	lds	r18, 0x0107
    1644:	fc 01       	movw	r30, r24
    1646:	20 83       	st	Z, r18
                buf[TCP_SEQ_H_P+3]= 0;
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	89 96       	adiw	r24, 0x29	; 41
    164e:	fc 01       	movw	r30, r24
    1650:	10 82       	st	Z, r1
                // step the inititial seq num by something we will not use
                // during this tcp session:
                seqnum+=2;
    1652:	80 91 07 01 	lds	r24, 0x0107
    1656:	8e 5f       	subi	r24, 0xFE	; 254
    1658:	80 93 07 01 	sts	0x0107, r24
        }
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	c2 96       	adiw	r24, 0x32	; 50
    1662:	fc 01       	movw	r30, r24
    1664:	10 82       	st	Z, r1
        buf[TCP_CHECKSUM_L_P]=0;
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	9c 81       	ldd	r25, Y+4	; 0x04
    166a:	c3 96       	adiw	r24, 0x33	; 51
    166c:	fc 01       	movw	r30, r24
    166e:	10 82       	st	Z, r1

        // The tcp header length is only a 4 bit field (the upper 4 bits).
        // It is calculated in units of 4 bytes. 
        // E.g 24 bytes: 24/4=6 => 0x60=header len field
        //buf[TCP_HEADER_LEN_P]=(((TCP_HEADER_LEN_PLAIN+4)/4)) <<4; // 0x60
        if (mss){
    1670:	8f 81       	ldd	r24, Y+7	; 0x07
    1672:	88 23       	and	r24, r24
    1674:	f9 f0       	breq	.+62     	; 0x16b4 <make_tcphead+0x1b2>
                // the only option we set is MSS to 1408:
                // 1408 in hex is 0x580
                buf[TCP_OPTIONS_P]=2;
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	9c 81       	ldd	r25, Y+4	; 0x04
    167a:	c6 96       	adiw	r24, 0x36	; 54
    167c:	22 e0       	ldi	r18, 0x02	; 2
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
                buf[TCP_OPTIONS_P+1]=4;
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	c7 96       	adiw	r24, 0x37	; 55
    1688:	24 e0       	ldi	r18, 0x04	; 4
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18
                buf[TCP_OPTIONS_P+2]=0x05; 
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	9c 81       	ldd	r25, Y+4	; 0x04
    1692:	c8 96       	adiw	r24, 0x38	; 56
    1694:	25 e0       	ldi	r18, 0x05	; 5
    1696:	fc 01       	movw	r30, r24
    1698:	20 83       	st	Z, r18
                buf[TCP_OPTIONS_P+3]=0x80;
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	c9 96       	adiw	r24, 0x39	; 57
    16a0:	20 e8       	ldi	r18, 0x80	; 128
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
                // 24 bytes:
                buf[TCP_HEADER_LEN_P]=0x60;
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	9c 81       	ldd	r25, Y+4	; 0x04
    16aa:	8e 96       	adiw	r24, 0x2e	; 46
    16ac:	20 e6       	ldi	r18, 0x60	; 96
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18
    16b2:	06 c0       	rjmp	.+12     	; 0x16c0 <make_tcphead+0x1be>
        }else{
                // no options:
                // 20 bytes:
                buf[TCP_HEADER_LEN_P]=0x50;
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	8e 96       	adiw	r24, 0x2e	; 46
    16ba:	20 e5       	ldi	r18, 0x50	; 80
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
        }
}
    16c0:	28 96       	adiw	r28, 0x08	; 8
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	df 91       	pop	r29
    16ce:	cf 91       	pop	r28
    16d0:	08 95       	ret

000016d2 <make_arp_answer_from_request>:

void make_arp_answer_from_request(uint8_t *buf)
{
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <make_arp_answer_from_request+0x6>
    16d8:	1f 92       	push	r1
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9b 83       	std	Y+3, r25	; 0x03
    16e0:	8a 83       	std	Y+2, r24	; 0x02
        uint8_t i=0;
    16e2:	19 82       	std	Y+1, r1	; 0x01
        //
        make_eth(buf);
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	0e 94 c3 09 	call	0x1386	; 0x1386 <make_eth>
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	9b 81       	ldd	r25, Y+3	; 0x03
    16f0:	44 96       	adiw	r24, 0x14	; 20
    16f2:	fc 01       	movw	r30, r24
    16f4:	10 82       	st	Z, r1
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	45 96       	adiw	r24, 0x15	; 21
    16fc:	22 e0       	ldi	r18, 0x02	; 2
    16fe:	fc 01       	movw	r30, r24
    1700:	20 83       	st	Z, r18
        // fill the mac addresses:
        while(i<6){
    1702:	29 c0       	rjmp	.+82     	; 0x1756 <make_arp_answer_from_request+0x84>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	88 2f       	mov	r24, r24
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	80 96       	adiw	r24, 0x20	; 32
    170c:	2a 81       	ldd	r18, Y+2	; 0x02
    170e:	3b 81       	ldd	r19, Y+3	; 0x03
    1710:	82 0f       	add	r24, r18
    1712:	93 1f       	adc	r25, r19
    1714:	29 81       	ldd	r18, Y+1	; 0x01
    1716:	22 2f       	mov	r18, r18
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	2a 5e       	subi	r18, 0xEA	; 234
    171c:	3f 4f       	sbci	r19, 0xFF	; 255
    171e:	4a 81       	ldd	r20, Y+2	; 0x02
    1720:	5b 81       	ldd	r21, Y+3	; 0x03
    1722:	24 0f       	add	r18, r20
    1724:	35 1f       	adc	r19, r21
    1726:	f9 01       	movw	r30, r18
    1728:	20 81       	ld	r18, Z
    172a:	fc 01       	movw	r30, r24
    172c:	20 83       	st	Z, r18
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	46 96       	adiw	r24, 0x16	; 22
    1736:	2a 81       	ldd	r18, Y+2	; 0x02
    1738:	3b 81       	ldd	r19, Y+3	; 0x03
    173a:	82 0f       	add	r24, r18
    173c:	93 1f       	adc	r25, r19
    173e:	29 81       	ldd	r18, Y+1	; 0x01
    1740:	22 2f       	mov	r18, r18
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	2f 5d       	subi	r18, 0xDF	; 223
    1746:	3e 4f       	sbci	r19, 0xFE	; 254
    1748:	f9 01       	movw	r30, r18
    174a:	20 81       	ld	r18, Z
    174c:	fc 01       	movw	r30, r24
    174e:	20 83       	st	Z, r18
                i++;
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	89 83       	std	Y+1, r24	; 0x01
        //
        make_eth(buf);
        buf[ETH_ARP_OPCODE_H_P]=ETH_ARP_OPCODE_REPLY_H_V;
        buf[ETH_ARP_OPCODE_L_P]=ETH_ARP_OPCODE_REPLY_L_V;
        // fill the mac addresses:
        while(i<6){
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	86 30       	cpi	r24, 0x06	; 6
    175a:	a0 f2       	brcs	.-88     	; 0x1704 <make_arp_answer_from_request+0x32>
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
    175c:	19 82       	std	Y+1, r1	; 0x01
        while(i<4){
    175e:	29 c0       	rjmp	.+82     	; 0x17b2 <make_arp_answer_from_request+0xe0>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
    1760:	89 81       	ldd	r24, Y+1	; 0x01
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	86 96       	adiw	r24, 0x26	; 38
    1768:	2a 81       	ldd	r18, Y+2	; 0x02
    176a:	3b 81       	ldd	r19, Y+3	; 0x03
    176c:	82 0f       	add	r24, r18
    176e:	93 1f       	adc	r25, r19
    1770:	29 81       	ldd	r18, Y+1	; 0x01
    1772:	22 2f       	mov	r18, r18
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	24 5e       	subi	r18, 0xE4	; 228
    1778:	3f 4f       	sbci	r19, 0xFF	; 255
    177a:	4a 81       	ldd	r20, Y+2	; 0x02
    177c:	5b 81       	ldd	r21, Y+3	; 0x03
    177e:	24 0f       	add	r18, r20
    1780:	35 1f       	adc	r19, r21
    1782:	f9 01       	movw	r30, r18
    1784:	20 81       	ld	r18, Z
    1786:	fc 01       	movw	r30, r24
    1788:	20 83       	st	Z, r18
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	88 2f       	mov	r24, r24
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	4c 96       	adiw	r24, 0x1c	; 28
    1792:	2a 81       	ldd	r18, Y+2	; 0x02
    1794:	3b 81       	ldd	r19, Y+3	; 0x03
    1796:	82 0f       	add	r24, r18
    1798:	93 1f       	adc	r25, r19
    179a:	29 81       	ldd	r18, Y+1	; 0x01
    179c:	22 2f       	mov	r18, r18
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	29 5d       	subi	r18, 0xD9	; 217
    17a2:	3e 4f       	sbci	r19, 0xFE	; 254
    17a4:	f9 01       	movw	r30, r18
    17a6:	20 81       	ld	r18, Z
    17a8:	fc 01       	movw	r30, r24
    17aa:	20 83       	st	Z, r18
                i++;
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	8f 5f       	subi	r24, 0xFF	; 255
    17b0:	89 83       	std	Y+1, r24	; 0x01
                buf[ETH_ARP_DST_MAC_P+i]=buf[ETH_ARP_SRC_MAC_P+i];
                buf[ETH_ARP_SRC_MAC_P+i]=macaddr[i];
                i++;
        }
        i=0;
        while(i<4){
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	a0 f2       	brcs	.-88     	; 0x1760 <make_arp_answer_from_request+0x8e>
                buf[ETH_ARP_DST_IP_P+i]=buf[ETH_ARP_SRC_IP_P+i];
                buf[ETH_ARP_SRC_IP_P+i]=ipaddr[i];
                i++;
        }
        // eth+arp is 42 bytes:
        enc28j60PacketSend(42,buf); 
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	9b 81       	ldd	r25, Y+3	; 0x03
    17bc:	bc 01       	movw	r22, r24
    17be:	8a e2       	ldi	r24, 0x2A	; 42
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	08 95       	ret

000017d2 <make_echo_reply_from_request>:

void make_echo_reply_from_request(uint8_t *buf,uint16_t len)
{
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	00 d0       	rcall	.+0      	; 0x17d8 <make_echo_reply_from_request+0x6>
    17d8:	00 d0       	rcall	.+0      	; 0x17da <make_echo_reply_from_request+0x8>
    17da:	cd b7       	in	r28, 0x3d	; 61
    17dc:	de b7       	in	r29, 0x3e	; 62
    17de:	9a 83       	std	Y+2, r25	; 0x02
    17e0:	89 83       	std	Y+1, r24	; 0x01
    17e2:	7c 83       	std	Y+4, r23	; 0x04
    17e4:	6b 83       	std	Y+3, r22	; 0x03
        make_eth(buf);
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	0e 94 c3 09 	call	0x1386	; 0x1386 <make_eth>
        make_ip(buf);
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	9a 81       	ldd	r25, Y+2	; 0x02
    17f2:	0e 94 41 0a 	call	0x1482	; 0x1482 <make_ip>
        buf[ICMP_TYPE_P]=ICMP_TYPE_ECHOREPLY_V;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	82 96       	adiw	r24, 0x22	; 34
    17fc:	fc 01       	movw	r30, r24
    17fe:	10 82       	st	Z, r1
        // we changed only the icmp.type field from request(=8) to reply(=0).
        // we can therefore easily correct the checksum:
        if (buf[ICMP_CHECKSUM_P] > (0xff-0x08)){
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	9a 81       	ldd	r25, Y+2	; 0x02
    1804:	84 96       	adiw	r24, 0x24	; 36
    1806:	fc 01       	movw	r30, r24
    1808:	80 81       	ld	r24, Z
    180a:	88 3f       	cpi	r24, 0xF8	; 248
    180c:	40 f0       	brcs	.+16     	; 0x181e <make_echo_reply_from_request+0x4c>
                buf[ICMP_CHECKSUM_P+1]++;
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	85 96       	adiw	r24, 0x25	; 37
    1814:	fc 01       	movw	r30, r24
    1816:	20 81       	ld	r18, Z
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
        }
        buf[ICMP_CHECKSUM_P]+=0x08;
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	84 96       	adiw	r24, 0x24	; 36
    1824:	29 81       	ldd	r18, Y+1	; 0x01
    1826:	3a 81       	ldd	r19, Y+2	; 0x02
    1828:	2c 5d       	subi	r18, 0xDC	; 220
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	f9 01       	movw	r30, r18
    182e:	20 81       	ld	r18, Z
    1830:	28 5f       	subi	r18, 0xF8	; 248
    1832:	fc 01       	movw	r30, r24
    1834:	20 83       	st	Z, r18
        //
        enc28j60PacketSend(len,buf);
    1836:	29 81       	ldd	r18, Y+1	; 0x01
    1838:	3a 81       	ldd	r19, Y+2	; 0x02
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	9c 81       	ldd	r25, Y+4	; 0x04
    183e:	b9 01       	movw	r22, r18
    1840:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	08 95       	ret

00001852 <make_udp_reply_from_request>:

// you can send a max of 220 bytes of data
void make_udp_reply_from_request(uint8_t *buf,char *data,uint8_t datalen,uint16_t port)
{
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	2a 97       	sbiw	r28, 0x0a	; 10
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	9d 83       	std	Y+5, r25	; 0x05
    1868:	8c 83       	std	Y+4, r24	; 0x04
    186a:	7f 83       	std	Y+7, r23	; 0x07
    186c:	6e 83       	std	Y+6, r22	; 0x06
    186e:	48 87       	std	Y+8, r20	; 0x08
    1870:	3a 87       	std	Y+10, r19	; 0x0a
    1872:	29 87       	std	Y+9, r18	; 0x09
        uint8_t i=0;
    1874:	19 82       	std	Y+1, r1	; 0x01
        uint16_t ck;
        make_eth(buf);
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	0e 94 c3 09 	call	0x1386	; 0x1386 <make_eth>
        if (datalen>220){
    187e:	88 85       	ldd	r24, Y+8	; 0x08
    1880:	8d 3d       	cpi	r24, 0xDD	; 221
    1882:	10 f0       	brcs	.+4      	; 0x1888 <make_udp_reply_from_request+0x36>
                datalen=220;
    1884:	8c ed       	ldi	r24, 0xDC	; 220
    1886:	88 87       	std	Y+8, r24	; 0x08
        }
        // total length field in the IP header must be set:
        buf[IP_TOTLEN_H_P]=0;
    1888:	8c 81       	ldd	r24, Y+4	; 0x04
    188a:	9d 81       	ldd	r25, Y+5	; 0x05
    188c:	40 96       	adiw	r24, 0x10	; 16
    188e:	fc 01       	movw	r30, r24
    1890:	10 82       	st	Z, r1
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+UDP_HEADER_LEN+datalen;
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	41 96       	adiw	r24, 0x11	; 17
    1898:	28 85       	ldd	r18, Y+8	; 0x08
    189a:	24 5e       	subi	r18, 0xE4	; 228
    189c:	fc 01       	movw	r30, r24
    189e:	20 83       	st	Z, r18
        make_ip(buf);
    18a0:	8c 81       	ldd	r24, Y+4	; 0x04
    18a2:	9d 81       	ldd	r25, Y+5	; 0x05
    18a4:	0e 94 41 0a 	call	0x1482	; 0x1482 <make_ip>
        buf[UDP_DST_PORT_H_P]=port>>8;
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	9d 81       	ldd	r25, Y+5	; 0x05
    18ac:	84 96       	adiw	r24, 0x24	; 36
    18ae:	29 85       	ldd	r18, Y+9	; 0x09
    18b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b2:	23 2f       	mov	r18, r19
    18b4:	33 27       	eor	r19, r19
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
        buf[UDP_DST_PORT_L_P]=port & 0xff;
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	85 96       	adiw	r24, 0x25	; 37
    18c0:	29 85       	ldd	r18, Y+9	; 0x09
    18c2:	fc 01       	movw	r30, r24
    18c4:	20 83       	st	Z, r18
        // source port does not matter and is what the sender used.
        // calculte the udp length:
        buf[UDP_LEN_H_P]=0;
    18c6:	8c 81       	ldd	r24, Y+4	; 0x04
    18c8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ca:	86 96       	adiw	r24, 0x26	; 38
    18cc:	fc 01       	movw	r30, r24
    18ce:	10 82       	st	Z, r1
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	87 96       	adiw	r24, 0x27	; 39
    18d6:	28 85       	ldd	r18, Y+8	; 0x08
    18d8:	28 5f       	subi	r18, 0xF8	; 248
    18da:	fc 01       	movw	r30, r24
    18dc:	20 83       	st	Z, r18
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	9d 81       	ldd	r25, Y+5	; 0x05
    18e2:	88 96       	adiw	r24, 0x28	; 40
    18e4:	fc 01       	movw	r30, r24
    18e6:	10 82       	st	Z, r1
        buf[UDP_CHECKSUM_L_P]=0;
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	89 96       	adiw	r24, 0x29	; 41
    18ee:	fc 01       	movw	r30, r24
    18f0:	10 82       	st	Z, r1
        // copy the data:
        while(i<datalen){
    18f2:	16 c0       	rjmp	.+44     	; 0x1920 <make_udp_reply_from_request+0xce>
                buf[UDP_DATA_P+i]=data[i];
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	8a 96       	adiw	r24, 0x2a	; 42
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	82 0f       	add	r24, r18
    1902:	93 1f       	adc	r25, r19
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	22 2f       	mov	r18, r18
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	4e 81       	ldd	r20, Y+6	; 0x06
    190c:	5f 81       	ldd	r21, Y+7	; 0x07
    190e:	24 0f       	add	r18, r20
    1910:	35 1f       	adc	r19, r21
    1912:	f9 01       	movw	r30, r18
    1914:	20 81       	ld	r18, Z
    1916:	fc 01       	movw	r30, r24
    1918:	20 83       	st	Z, r18
                i++;
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	8f 5f       	subi	r24, 0xFF	; 255
    191e:	89 83       	std	Y+1, r24	; 0x01
        buf[UDP_LEN_L_P]=UDP_HEADER_LEN+datalen;
        // zero the checksum
        buf[UDP_CHECKSUM_H_P]=0;
        buf[UDP_CHECKSUM_L_P]=0;
        // copy the data:
        while(i<datalen){
    1920:	99 81       	ldd	r25, Y+1	; 0x01
    1922:	88 85       	ldd	r24, Y+8	; 0x08
    1924:	98 17       	cp	r25, r24
    1926:	30 f3       	brcs	.-52     	; 0x18f4 <make_udp_reply_from_request+0xa2>
                buf[UDP_DATA_P+i]=data[i];
                i++;
        }
        ck=checksum(&buf[IP_SRC_P], 16 + datalen,1);
    1928:	88 85       	ldd	r24, Y+8	; 0x08
    192a:	88 2f       	mov	r24, r24
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	40 96       	adiw	r24, 0x10	; 16
    1930:	9c 01       	movw	r18, r24
    1932:	8c 81       	ldd	r24, Y+4	; 0x04
    1934:	9d 81       	ldd	r25, Y+5	; 0x05
    1936:	4a 96       	adiw	r24, 0x1a	; 26
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	b9 01       	movw	r22, r18
    193c:	0e 94 11 08 	call	0x1022	; 0x1022 <checksum>
    1940:	9b 83       	std	Y+3, r25	; 0x03
    1942:	8a 83       	std	Y+2, r24	; 0x02
        buf[UDP_CHECKSUM_H_P]=ck>>8;
    1944:	8c 81       	ldd	r24, Y+4	; 0x04
    1946:	9d 81       	ldd	r25, Y+5	; 0x05
    1948:	88 96       	adiw	r24, 0x28	; 40
    194a:	2a 81       	ldd	r18, Y+2	; 0x02
    194c:	3b 81       	ldd	r19, Y+3	; 0x03
    194e:	23 2f       	mov	r18, r19
    1950:	33 27       	eor	r19, r19
    1952:	fc 01       	movw	r30, r24
    1954:	20 83       	st	Z, r18
        buf[UDP_CHECKSUM_L_P]=ck& 0xff;
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	9d 81       	ldd	r25, Y+5	; 0x05
    195a:	89 96       	adiw	r24, 0x29	; 41
    195c:	2a 81       	ldd	r18, Y+2	; 0x02
    195e:	fc 01       	movw	r30, r24
    1960:	20 83       	st	Z, r18
        enc28j60PacketSend(UDP_HEADER_LEN+IP_HEADER_LEN+ETH_HEADER_LEN+datalen,buf);
    1962:	88 85       	ldd	r24, Y+8	; 0x08
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	8a 96       	adiw	r24, 0x2a	; 42
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	b9 01       	movw	r22, r18
    1970:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    1974:	2a 96       	adiw	r28, 0x0a	; 10
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	df 91       	pop	r29
    1982:	cf 91       	pop	r28
    1984:	08 95       	ret

00001986 <make_tcp_synack_from_syn>:

void make_tcp_synack_from_syn(uint8_t *buf)
{
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	00 d0       	rcall	.+0      	; 0x198c <make_tcp_synack_from_syn+0x6>
    198c:	00 d0       	rcall	.+0      	; 0x198e <make_tcp_synack_from_syn+0x8>
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	9c 83       	std	Y+4, r25	; 0x04
    1994:	8b 83       	std	Y+3, r24	; 0x03
        uint16_t ck;
        make_eth(buf);
    1996:	8b 81       	ldd	r24, Y+3	; 0x03
    1998:	9c 81       	ldd	r25, Y+4	; 0x04
    199a:	0e 94 c3 09 	call	0x1386	; 0x1386 <make_eth>
        // total length field in the IP header must be set:
        // 20 bytes IP + 24 bytes (20tcp+4tcp options)
        buf[IP_TOTLEN_H_P]=0;
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	40 96       	adiw	r24, 0x10	; 16
    19a4:	fc 01       	movw	r30, r24
    19a6:	10 82       	st	Z, r1
        buf[IP_TOTLEN_L_P]=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4;
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	9c 81       	ldd	r25, Y+4	; 0x04
    19ac:	41 96       	adiw	r24, 0x11	; 17
    19ae:	2c e2       	ldi	r18, 0x2C	; 44
    19b0:	fc 01       	movw	r30, r24
    19b2:	20 83       	st	Z, r18
        make_ip(buf);
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	9c 81       	ldd	r25, Y+4	; 0x04
    19b8:	0e 94 41 0a 	call	0x1482	; 0x1482 <make_ip>
        buf[TCP_FLAGS_P]=TCP_FLAGS_SYNACK_V;
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	9c 81       	ldd	r25, Y+4	; 0x04
    19c0:	8f 96       	adiw	r24, 0x2f	; 47
    19c2:	22 e1       	ldi	r18, 0x12	; 18
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
        make_tcphead(buf,1,1,0);
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	9c 81       	ldd	r25, Y+4	; 0x04
    19cc:	20 e0       	ldi	r18, 0x00	; 0
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	70 e0       	ldi	r23, 0x00	; 0
    19d4:	0e 94 81 0a 	call	0x1502	; 0x1502 <make_tcphead>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + 4 (one option: mss)
        ck=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+4,2);
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	4a 96       	adiw	r24, 0x1a	; 26
    19de:	42 e0       	ldi	r20, 0x02	; 2
    19e0:	60 e2       	ldi	r22, 0x20	; 32
    19e2:	70 e0       	ldi	r23, 0x00	; 0
    19e4:	0e 94 11 08 	call	0x1022	; 0x1022 <checksum>
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
        buf[TCP_CHECKSUM_H_P]=ck>>8;
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	c2 96       	adiw	r24, 0x32	; 50
    19f2:	29 81       	ldd	r18, Y+1	; 0x01
    19f4:	3a 81       	ldd	r19, Y+2	; 0x02
    19f6:	23 2f       	mov	r18, r19
    19f8:	33 27       	eor	r19, r19
    19fa:	fc 01       	movw	r30, r24
    19fc:	20 83       	st	Z, r18
        buf[TCP_CHECKSUM_L_P]=ck& 0xff;
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	c3 96       	adiw	r24, 0x33	; 51
    1a04:	29 81       	ldd	r18, Y+1	; 0x01
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
        // add 4 for option mss:
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+4+ETH_HEADER_LEN,buf);
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	bc 01       	movw	r22, r24
    1a10:	8a e3       	ldi	r24, 0x3A	; 58
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	df 91       	pop	r29
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <get_tcp_data_pointer>:

// get a pointer to the start of tcp data in buf
// Returns 0 if there is no data
// You must call init_len_info once before calling this function
uint16_t get_tcp_data_pointer(void)
{
    1a26:	cf 93       	push	r28
    1a28:	df 93       	push	r29
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
        if (info_data_len){
    1a2e:	80 91 2d 01 	lds	r24, 0x012D
    1a32:	90 91 2e 01 	lds	r25, 0x012E
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	31 f0       	breq	.+12     	; 0x1a46 <get_tcp_data_pointer+0x20>
                return((uint16_t)TCP_SRC_PORT_H_P+info_hdr_len);
    1a3a:	80 91 2b 01 	lds	r24, 0x012B
    1a3e:	90 91 2c 01 	lds	r25, 0x012C
    1a42:	82 96       	adiw	r24, 0x22	; 34
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <get_tcp_data_pointer+0x24>
        }else{
                return(0);
    1a46:	80 e0       	ldi	r24, 0x00	; 0
    1a48:	90 e0       	ldi	r25, 0x00	; 0
        }
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	08 95       	ret

00001a50 <init_len_info>:

// do some basic length calculations and store the result in static varibales
void init_len_info(uint8_t *buf)
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	00 d0       	rcall	.+0      	; 0x1a56 <init_len_info+0x6>
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
    1a5a:	9a 83       	std	Y+2, r25	; 0x02
    1a5c:	89 83       	std	Y+1, r24	; 0x01
        info_data_len=(buf[IP_TOTLEN_H_P]<<8)|(buf[IP_TOTLEN_L_P]&0xff);
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	9a 81       	ldd	r25, Y+2	; 0x02
    1a62:	40 96       	adiw	r24, 0x10	; 16
    1a64:	fc 01       	movw	r30, r24
    1a66:	80 81       	ld	r24, Z
    1a68:	88 2f       	mov	r24, r24
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	38 2f       	mov	r19, r24
    1a6e:	22 27       	eor	r18, r18
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	41 96       	adiw	r24, 0x11	; 17
    1a76:	fc 01       	movw	r30, r24
    1a78:	80 81       	ld	r24, Z
    1a7a:	88 2f       	mov	r24, r24
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	99 27       	eor	r25, r25
    1a80:	82 2b       	or	r24, r18
    1a82:	93 2b       	or	r25, r19
    1a84:	90 93 2e 01 	sts	0x012E, r25
    1a88:	80 93 2d 01 	sts	0x012D, r24
        info_data_len-=IP_HEADER_LEN;
    1a8c:	80 91 2d 01 	lds	r24, 0x012D
    1a90:	90 91 2e 01 	lds	r25, 0x012E
    1a94:	44 97       	sbiw	r24, 0x14	; 20
    1a96:	90 93 2e 01 	sts	0x012E, r25
    1a9a:	80 93 2d 01 	sts	0x012D, r24
        info_hdr_len=(buf[TCP_HEADER_LEN_P]>>4)*4; // generate len in bytes;
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	8e 96       	adiw	r24, 0x2e	; 46
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	80 81       	ld	r24, Z
    1aa8:	82 95       	swap	r24
    1aaa:	8f 70       	andi	r24, 0x0F	; 15
    1aac:	88 2f       	mov	r24, r24
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	88 0f       	add	r24, r24
    1ab6:	99 1f       	adc	r25, r25
    1ab8:	90 93 2c 01 	sts	0x012C, r25
    1abc:	80 93 2b 01 	sts	0x012B, r24
        info_data_len-=info_hdr_len;
    1ac0:	20 91 2d 01 	lds	r18, 0x012D
    1ac4:	30 91 2e 01 	lds	r19, 0x012E
    1ac8:	80 91 2b 01 	lds	r24, 0x012B
    1acc:	90 91 2c 01 	lds	r25, 0x012C
    1ad0:	a9 01       	movw	r20, r18
    1ad2:	48 1b       	sub	r20, r24
    1ad4:	59 0b       	sbc	r21, r25
    1ad6:	ca 01       	movw	r24, r20
    1ad8:	90 93 2e 01 	sts	0x012E, r25
    1adc:	80 93 2d 01 	sts	0x012D, r24
        if (info_data_len<=0){
    1ae0:	80 91 2d 01 	lds	r24, 0x012D
    1ae4:	90 91 2e 01 	lds	r25, 0x012E
    1ae8:	18 16       	cp	r1, r24
    1aea:	19 06       	cpc	r1, r25
    1aec:	24 f0       	brlt	.+8      	; 0x1af6 <init_len_info+0xa6>
                info_data_len=0;
    1aee:	10 92 2e 01 	sts	0x012E, r1
    1af2:	10 92 2d 01 	sts	0x012D, r1
        }
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	08 95       	ret

00001b00 <fill_tcp_data_p>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data_p(uint8_t *buf,uint16_t pos, const char *progmem_s)
{
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
    1b08:	2a 97       	sbiw	r28, 0x0a	; 10
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	de bf       	out	0x3e, r29	; 62
    1b10:	0f be       	out	0x3f, r0	; 63
    1b12:	cd bf       	out	0x3d, r28	; 61
    1b14:	9e 83       	std	Y+6, r25	; 0x06
    1b16:	8d 83       	std	Y+5, r24	; 0x05
    1b18:	78 87       	std	Y+8, r23	; 0x08
    1b1a:	6f 83       	std	Y+7, r22	; 0x07
    1b1c:	5a 87       	std	Y+10, r21	; 0x0a
    1b1e:	49 87       	std	Y+9, r20	; 0x09
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <fill_tcp_data_p+0x40>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
    1b22:	8f 81       	ldd	r24, Y+7	; 0x07
    1b24:	98 85       	ldd	r25, Y+8	; 0x08
    1b26:	c6 96       	adiw	r24, 0x36	; 54
    1b28:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	fc 01       	movw	r30, r24
    1b34:	20 83       	st	Z, r18
                pos++;
    1b36:	8f 81       	ldd	r24, Y+7	; 0x07
    1b38:	98 85       	ldd	r25, Y+8	; 0x08
    1b3a:	01 96       	adiw	r24, 0x01	; 1
    1b3c:	98 87       	std	Y+8, r25	; 0x08
    1b3e:	8f 83       	std	Y+7, r24	; 0x07
{
        char c;
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while ((c = pgm_read_byte(progmem_s++))) {
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	9c 01       	movw	r18, r24
    1b46:	2f 5f       	subi	r18, 0xFF	; 255
    1b48:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4a:	3a 87       	std	Y+10, r19	; 0x0a
    1b4c:	29 87       	std	Y+9, r18	; 0x09
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	fc 01       	movw	r30, r24
    1b58:	84 91       	lpm	r24, Z
    1b5a:	8b 83       	std	Y+3, r24	; 0x03
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	8c 83       	std	Y+4, r24	; 0x04
    1b60:	8c 81       	ldd	r24, Y+4	; 0x04
    1b62:	88 23       	and	r24, r24
    1b64:	f1 f6       	brne	.-68     	; 0x1b22 <fill_tcp_data_p+0x22>
                buf[TCP_CHECKSUM_L_P+3+pos]=c;
                pos++;
        }
        return(pos);
    1b66:	8f 81       	ldd	r24, Y+7	; 0x07
    1b68:	98 85       	ldd	r25, Y+8	; 0x08
}
    1b6a:	2a 96       	adiw	r28, 0x0a	; 10
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <fill_tcp_data>:

// fill in tcp data at position pos. pos=0 means start of
// tcp data. Returns the position at which the string after
// this string could be filled.
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <fill_tcp_data+0x6>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <fill_tcp_data+0x8>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <fill_tcp_data+0xa>
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9a 83       	std	Y+2, r25	; 0x02
    1b8c:	89 83       	std	Y+1, r24	; 0x01
    1b8e:	7c 83       	std	Y+4, r23	; 0x04
    1b90:	6b 83       	std	Y+3, r22	; 0x03
    1b92:	5e 83       	std	Y+6, r21	; 0x06
    1b94:	4d 83       	std	Y+5, r20	; 0x05
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    1b96:	17 c0       	rjmp	.+46     	; 0x1bc6 <fill_tcp_data+0x4a>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	c6 96       	adiw	r24, 0x36	; 54
    1b9e:	29 81       	ldd	r18, Y+1	; 0x01
    1ba0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ba2:	82 0f       	add	r24, r18
    1ba4:	93 1f       	adc	r25, r19
    1ba6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba8:	3e 81       	ldd	r19, Y+6	; 0x06
    1baa:	f9 01       	movw	r30, r18
    1bac:	20 81       	ld	r18, Z
    1bae:	fc 01       	movw	r30, r24
    1bb0:	20 83       	st	Z, r18
                pos++;
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	9c 83       	std	Y+4, r25	; 0x04
    1bba:	8b 83       	std	Y+3, r24	; 0x03
                s++;
    1bbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
uint16_t fill_tcp_data(uint8_t *buf,uint16_t pos, const char *s)
{
        // fill in tcp data at position pos
        //
        // with no options the data starts after the checksum + 2 more bytes (urgent ptr)
        while (*s) {
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	fc 01       	movw	r30, r24
    1bcc:	80 81       	ld	r24, Z
    1bce:	88 23       	and	r24, r24
    1bd0:	19 f7       	brne	.-58     	; 0x1b98 <fill_tcp_data+0x1c>
                buf[TCP_CHECKSUM_L_P+3+pos]=*s;
                pos++;
                s++;
        }
        return(pos);
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1bd6:	26 96       	adiw	r28, 0x06	; 6
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	08 95       	ret

00001be8 <make_tcp_ack_from_any>:

// Make just an ack packet with no tcp data inside
// This will modify the eth/ip/tcp header 
void make_tcp_ack_from_any(uint8_t *buf)
{
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <make_tcp_ack_from_any+0x6>
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <make_tcp_ack_from_any+0x8>
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
        uint16_t j;
        make_eth(buf);
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	0e 94 c3 09 	call	0x1386	; 0x1386 <make_eth>
        // fill the header:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V;
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	9c 81       	ldd	r25, Y+4	; 0x04
    1c04:	8f 96       	adiw	r24, 0x2f	; 47
    1c06:	20 e1       	ldi	r18, 0x10	; 16
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 83       	st	Z, r18
        if (info_data_len==0){
    1c0c:	80 91 2d 01 	lds	r24, 0x012D
    1c10:	90 91 2e 01 	lds	r25, 0x012E
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	49 f4       	brne	.+18     	; 0x1c2a <make_tcp_ack_from_any+0x42>
                // if there is no data then we must still acknoledge one packet
                make_tcphead(buf,1,0,1); // no options
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	21 e0       	ldi	r18, 0x01	; 1
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	0e 94 81 0a 	call	0x1502	; 0x1502 <make_tcphead>
    1c28:	0b c0       	rjmp	.+22     	; 0x1c40 <make_tcp_ack_from_any+0x58>
        }else{
                make_tcphead(buf,info_data_len,0,1); // no options
    1c2a:	80 91 2d 01 	lds	r24, 0x012D
    1c2e:	90 91 2e 01 	lds	r25, 0x012E
    1c32:	bc 01       	movw	r22, r24
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	9c 81       	ldd	r25, Y+4	; 0x04
    1c38:	21 e0       	ldi	r18, 0x01	; 1
    1c3a:	40 e0       	ldi	r20, 0x00	; 0
    1c3c:	0e 94 81 0a 	call	0x1502	; 0x1502 <make_tcphead>
        }

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) 
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN;
    1c40:	88 e2       	ldi	r24, 0x28	; 40
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
        buf[IP_TOTLEN_H_P]=j>>8;
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c4c:	40 96       	adiw	r24, 0x10	; 16
    1c4e:	29 81       	ldd	r18, Y+1	; 0x01
    1c50:	3a 81       	ldd	r19, Y+2	; 0x02
    1c52:	23 2f       	mov	r18, r19
    1c54:	33 27       	eor	r19, r19
    1c56:	fc 01       	movw	r30, r24
    1c58:	20 83       	st	Z, r18
        buf[IP_TOTLEN_L_P]=j& 0xff;
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	41 96       	adiw	r24, 0x11	; 17
    1c60:	29 81       	ldd	r18, Y+1	; 0x01
    1c62:	fc 01       	movw	r30, r24
    1c64:	20 83       	st	Z, r18
        make_ip(buf);
    1c66:	8b 81       	ldd	r24, Y+3	; 0x03
    1c68:	9c 81       	ldd	r25, Y+4	; 0x04
    1c6a:	0e 94 41 0a 	call	0x1482	; 0x1482 <make_ip>
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN,2);
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	4a 96       	adiw	r24, 0x1a	; 26
    1c74:	42 e0       	ldi	r20, 0x02	; 2
    1c76:	6c e1       	ldi	r22, 0x1C	; 28
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	0e 94 11 08 	call	0x1022	; 0x1022 <checksum>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
        buf[TCP_CHECKSUM_H_P]=j>>8;
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	c2 96       	adiw	r24, 0x32	; 50
    1c88:	29 81       	ldd	r18, Y+1	; 0x01
    1c8a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c8c:	23 2f       	mov	r18, r19
    1c8e:	33 27       	eor	r19, r19
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 83       	st	Z, r18
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	c3 96       	adiw	r24, 0x33	; 51
    1c9a:	29 81       	ldd	r18, Y+1	; 0x01
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	20 83       	st	Z, r18
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+ETH_HEADER_LEN,buf);
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	bc 01       	movw	r22, r24
    1ca6:	86 e3       	ldi	r24, 0x36	; 54
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	08 95       	ret

00001cbc <make_tcp_ack_with_data>:
// dlen is the amount of tcp data (http data) we send in this packet
// You can use this function only immediately after make_tcp_ack_from_any
// This is because this function will NOT modify the eth/ip/tcp header except for
// length and checksum
void make_tcp_ack_with_data(uint8_t *buf,uint16_t dlen)
{
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <make_tcp_ack_with_data+0x6>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <make_tcp_ack_with_data+0x8>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <make_tcp_ack_with_data+0xa>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	9c 83       	std	Y+4, r25	; 0x04
    1ccc:	8b 83       	std	Y+3, r24	; 0x03
    1cce:	7e 83       	std	Y+6, r23	; 0x06
    1cd0:	6d 83       	std	Y+5, r22	; 0x05
        uint16_t j;
        // fill the header:
        // This code requires that we send only one data packet
        // because we keep no state information. We must therefore set
        // the fin here:
        buf[TCP_FLAGS_P]=TCP_FLAGS_ACK_V|TCP_FLAGS_PUSH_V|TCP_FLAGS_FIN_V;
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd6:	8f 96       	adiw	r24, 0x2f	; 47
    1cd8:	29 e1       	ldi	r18, 0x19	; 25
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 83       	st	Z, r18

        // total length field in the IP header must be set:
        // 20 bytes IP + 20 bytes tcp (when no options) + len of data
        j=IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	88 96       	adiw	r24, 0x28	; 40
    1ce4:	9a 83       	std	Y+2, r25	; 0x02
    1ce6:	89 83       	std	Y+1, r24	; 0x01
        buf[IP_TOTLEN_H_P]=j>>8;
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	40 96       	adiw	r24, 0x10	; 16
    1cee:	29 81       	ldd	r18, Y+1	; 0x01
    1cf0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf2:	23 2f       	mov	r18, r19
    1cf4:	33 27       	eor	r19, r19
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	20 83       	st	Z, r18
        buf[IP_TOTLEN_L_P]=j& 0xff;
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	41 96       	adiw	r24, 0x11	; 17
    1d00:	29 81       	ldd	r18, Y+1	; 0x01
    1d02:	fc 01       	movw	r30, r24
    1d04:	20 83       	st	Z, r18
        fill_ip_hdr_checksum(buf);
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <fill_ip_hdr_checksum>
        // zero the checksum
        buf[TCP_CHECKSUM_H_P]=0;
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	c2 96       	adiw	r24, 0x32	; 50
    1d14:	fc 01       	movw	r30, r24
    1d16:	10 82       	st	Z, r1
        buf[TCP_CHECKSUM_L_P]=0;
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1c:	c3 96       	adiw	r24, 0x33	; 51
    1d1e:	fc 01       	movw	r30, r24
    1d20:	10 82       	st	Z, r1
        // calculate the checksum, len=8 (start from ip.src) + TCP_HEADER_LEN_PLAIN + data len
        j=checksum(&buf[IP_SRC_P], 8+TCP_HEADER_LEN_PLAIN+dlen,2);
    1d22:	8d 81       	ldd	r24, Y+5	; 0x05
    1d24:	9e 81       	ldd	r25, Y+6	; 0x06
    1d26:	9c 01       	movw	r18, r24
    1d28:	24 5e       	subi	r18, 0xE4	; 228
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	4a 96       	adiw	r24, 0x1a	; 26
    1d32:	42 e0       	ldi	r20, 0x02	; 2
    1d34:	b9 01       	movw	r22, r18
    1d36:	0e 94 11 08 	call	0x1022	; 0x1022 <checksum>
    1d3a:	9a 83       	std	Y+2, r25	; 0x02
    1d3c:	89 83       	std	Y+1, r24	; 0x01
        buf[TCP_CHECKSUM_H_P]=j>>8;
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	c2 96       	adiw	r24, 0x32	; 50
    1d44:	29 81       	ldd	r18, Y+1	; 0x01
    1d46:	3a 81       	ldd	r19, Y+2	; 0x02
    1d48:	23 2f       	mov	r18, r19
    1d4a:	33 27       	eor	r19, r19
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	20 83       	st	Z, r18
        buf[TCP_CHECKSUM_L_P]=j& 0xff;
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	c3 96       	adiw	r24, 0x33	; 51
    1d56:	29 81       	ldd	r18, Y+1	; 0x01
    1d58:	fc 01       	movw	r30, r24
    1d5a:	20 83       	st	Z, r18
        enc28j60PacketSend(IP_HEADER_LEN+TCP_HEADER_LEN_PLAIN+dlen+ETH_HEADER_LEN,buf);
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	c6 96       	adiw	r24, 0x36	; 54
    1d62:	2b 81       	ldd	r18, Y+3	; 0x03
    1d64:	3c 81       	ldd	r19, Y+4	; 0x04
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <enc28j60PacketSend>
}
    1d6c:	26 96       	adiw	r28, 0x06	; 6
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	de bf       	out	0x3e, r29	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	cd bf       	out	0x3d, r28	; 61
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	08 95       	ret

00001d7e <lcd_out_low>:
** local functions
*/


static void lcd_out_low(u08 d)
{	/* output low nibble */
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	1f 92       	push	r1
    1d84:	cd b7       	in	r28, 0x3d	; 61
    1d86:	de b7       	in	r29, 0x3e	; 62
    1d88:	89 83       	std	Y+1, r24	; 0x01
	if (d&0x08)  sbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	88 70       	andi	r24, 0x08	; 8
    1d92:	99 27       	eor	r25, r25
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	51 f0       	breq	.+20     	; 0x1dac <lcd_out_low+0x2e>
    1d98:	8b e2       	ldi	r24, 0x2B	; 43
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	2b e2       	ldi	r18, 0x2B	; 43
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	f9 01       	movw	r30, r18
    1da2:	20 81       	ld	r18, Z
    1da4:	20 68       	ori	r18, 0x80	; 128
    1da6:	fc 01       	movw	r30, r24
    1da8:	20 83       	st	Z, r18
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <lcd_out_low+0x40>
		else cbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
    1dac:	8b e2       	ldi	r24, 0x2B	; 43
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	2b e2       	ldi	r18, 0x2B	; 43
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	f9 01       	movw	r30, r18
    1db6:	20 81       	ld	r18, Z
    1db8:	2f 77       	andi	r18, 0x7F	; 127
    1dba:	fc 01       	movw	r30, r24
    1dbc:	20 83       	st	Z, r18
	if (d&0x04)  sbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	88 2f       	mov	r24, r24
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	84 70       	andi	r24, 0x04	; 4
    1dc6:	99 27       	eor	r25, r25
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	51 f0       	breq	.+20     	; 0x1de0 <lcd_out_low+0x62>
    1dcc:	8b e2       	ldi	r24, 0x2B	; 43
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	2b e2       	ldi	r18, 0x2B	; 43
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	f9 01       	movw	r30, r18
    1dd6:	20 81       	ld	r18, Z
    1dd8:	20 64       	ori	r18, 0x40	; 64
    1dda:	fc 01       	movw	r30, r24
    1ddc:	20 83       	st	Z, r18
    1dde:	09 c0       	rjmp	.+18     	; 0x1df2 <lcd_out_low+0x74>
		else cbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
    1de0:	8b e2       	ldi	r24, 0x2B	; 43
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	2b e2       	ldi	r18, 0x2B	; 43
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	f9 01       	movw	r30, r18
    1dea:	20 81       	ld	r18, Z
    1dec:	2f 7b       	andi	r18, 0xBF	; 191
    1dee:	fc 01       	movw	r30, r24
    1df0:	20 83       	st	Z, r18
	if (d&0x02)  sbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	88 2f       	mov	r24, r24
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	82 70       	andi	r24, 0x02	; 2
    1dfa:	99 27       	eor	r25, r25
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	51 f0       	breq	.+20     	; 0x1e14 <lcd_out_low+0x96>
    1e00:	8b e2       	ldi	r24, 0x2B	; 43
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	2b e2       	ldi	r18, 0x2B	; 43
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	f9 01       	movw	r30, r18
    1e0a:	20 81       	ld	r18, Z
    1e0c:	20 62       	ori	r18, 0x20	; 32
    1e0e:	fc 01       	movw	r30, r24
    1e10:	20 83       	st	Z, r18
    1e12:	09 c0       	rjmp	.+18     	; 0x1e26 <lcd_out_low+0xa8>
		else cbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
    1e14:	8b e2       	ldi	r24, 0x2B	; 43
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	2b e2       	ldi	r18, 0x2B	; 43
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	f9 01       	movw	r30, r18
    1e1e:	20 81       	ld	r18, Z
    1e20:	2f 7d       	andi	r18, 0xDF	; 223
    1e22:	fc 01       	movw	r30, r24
    1e24:	20 83       	st	Z, r18
	if (d&0x01)  sbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4);
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	99 27       	eor	r25, r25
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	51 f0       	breq	.+20     	; 0x1e48 <lcd_out_low+0xca>
    1e34:	8b e2       	ldi	r24, 0x2B	; 43
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	2b e2       	ldi	r18, 0x2B	; 43
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	f9 01       	movw	r30, r18
    1e3e:	20 81       	ld	r18, Z
    1e40:	20 61       	ori	r18, 0x10	; 16
    1e42:	fc 01       	movw	r30, r24
    1e44:	20 83       	st	Z, r18
    1e46:	09 c0       	rjmp	.+18     	; 0x1e5a <lcd_out_low+0xdc>
		else cbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4); 
    1e48:	8b e2       	ldi	r24, 0x2B	; 43
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	2b e2       	ldi	r18, 0x2B	; 43
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	f9 01       	movw	r30, r18
    1e52:	20 81       	ld	r18, Z
    1e54:	2f 7e       	andi	r18, 0xEF	; 239
    1e56:	fc 01       	movw	r30, r24
    1e58:	20 83       	st	Z, r18
}
    1e5a:	0f 90       	pop	r0
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <lcd_out_high>:
static void lcd_out_high(u08 d)
{	/* output high nibble */ 
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	1f 92       	push	r1
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
    1e6c:	89 83       	std	Y+1, r24	; 0x01
	if (d&0x80)  sbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	88 23       	and	r24, r24
    1e72:	54 f4       	brge	.+20     	; 0x1e88 <lcd_out_high+0x26>
    1e74:	8b e2       	ldi	r24, 0x2B	; 43
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	2b e2       	ldi	r18, 0x2B	; 43
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	f9 01       	movw	r30, r18
    1e7e:	20 81       	ld	r18, Z
    1e80:	20 68       	ori	r18, 0x80	; 128
    1e82:	fc 01       	movw	r30, r24
    1e84:	20 83       	st	Z, r18
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <lcd_out_high+0x38>
		else cbi(LCD_DATA_PORT_D7,LCD_DATA_PIN_D7);
    1e88:	8b e2       	ldi	r24, 0x2B	; 43
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	2b e2       	ldi	r18, 0x2B	; 43
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	f9 01       	movw	r30, r18
    1e92:	20 81       	ld	r18, Z
    1e94:	2f 77       	andi	r18, 0x7F	; 127
    1e96:	fc 01       	movw	r30, r24
    1e98:	20 83       	st	Z, r18
	if (d&0x40)  sbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
    1e9a:	89 81       	ldd	r24, Y+1	; 0x01
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	80 74       	andi	r24, 0x40	; 64
    1ea2:	99 27       	eor	r25, r25
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	51 f0       	breq	.+20     	; 0x1ebc <lcd_out_high+0x5a>
    1ea8:	8b e2       	ldi	r24, 0x2B	; 43
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	2b e2       	ldi	r18, 0x2B	; 43
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	f9 01       	movw	r30, r18
    1eb2:	20 81       	ld	r18, Z
    1eb4:	20 64       	ori	r18, 0x40	; 64
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 83       	st	Z, r18
    1eba:	09 c0       	rjmp	.+18     	; 0x1ece <lcd_out_high+0x6c>
		else cbi(LCD_DATA_PORT_D6,LCD_DATA_PIN_D6);
    1ebc:	8b e2       	ldi	r24, 0x2B	; 43
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	2b e2       	ldi	r18, 0x2B	; 43
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	f9 01       	movw	r30, r18
    1ec6:	20 81       	ld	r18, Z
    1ec8:	2f 7b       	andi	r18, 0xBF	; 191
    1eca:	fc 01       	movw	r30, r24
    1ecc:	20 83       	st	Z, r18
	if (d&0x20)  sbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	88 2f       	mov	r24, r24
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	80 72       	andi	r24, 0x20	; 32
    1ed6:	99 27       	eor	r25, r25
    1ed8:	00 97       	sbiw	r24, 0x00	; 0
    1eda:	51 f0       	breq	.+20     	; 0x1ef0 <lcd_out_high+0x8e>
    1edc:	8b e2       	ldi	r24, 0x2B	; 43
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	2b e2       	ldi	r18, 0x2B	; 43
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	f9 01       	movw	r30, r18
    1ee6:	20 81       	ld	r18, Z
    1ee8:	20 62       	ori	r18, 0x20	; 32
    1eea:	fc 01       	movw	r30, r24
    1eec:	20 83       	st	Z, r18
    1eee:	09 c0       	rjmp	.+18     	; 0x1f02 <lcd_out_high+0xa0>
		else cbi(LCD_DATA_PORT_D5,LCD_DATA_PIN_D5);
    1ef0:	8b e2       	ldi	r24, 0x2B	; 43
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	2b e2       	ldi	r18, 0x2B	; 43
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	f9 01       	movw	r30, r18
    1efa:	20 81       	ld	r18, Z
    1efc:	2f 7d       	andi	r18, 0xDF	; 223
    1efe:	fc 01       	movw	r30, r24
    1f00:	20 83       	st	Z, r18
	if (d&0x10)  sbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4);
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	80 71       	andi	r24, 0x10	; 16
    1f0a:	99 27       	eor	r25, r25
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	51 f0       	breq	.+20     	; 0x1f24 <lcd_out_high+0xc2>
    1f10:	8b e2       	ldi	r24, 0x2B	; 43
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	2b e2       	ldi	r18, 0x2B	; 43
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	f9 01       	movw	r30, r18
    1f1a:	20 81       	ld	r18, Z
    1f1c:	20 61       	ori	r18, 0x10	; 16
    1f1e:	fc 01       	movw	r30, r24
    1f20:	20 83       	st	Z, r18
    1f22:	09 c0       	rjmp	.+18     	; 0x1f36 <lcd_out_high+0xd4>
		else cbi(LCD_DATA_PORT_D4,LCD_DATA_PIN_D4); 
    1f24:	8b e2       	ldi	r24, 0x2B	; 43
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	2b e2       	ldi	r18, 0x2B	; 43
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	20 81       	ld	r18, Z
    1f30:	2f 7e       	andi	r18, 0xEF	; 239
    1f32:	fc 01       	movw	r30, r24
    1f34:	20 83       	st	Z, r18
}
    1f36:	0f 90       	pop	r0
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	08 95       	ret

00001f3e <lcd_e_toggle>:

static void lcd_e_toggle(void)
/* toggle Enable Pin */
{
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	e0 97       	sbiw	r28, 0x30	; 48
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
	lcd_e_high();
    1f52:	8b e2       	ldi	r24, 0x2B	; 43
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	2b e2       	ldi	r18, 0x2B	; 43
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	f9 01       	movw	r30, r18
    1f5c:	20 81       	ld	r18, Z
    1f5e:	28 60       	ori	r18, 0x08	; 8
    1f60:	fc 01       	movw	r30, r24
    1f62:	20 83       	st	Z, r18
    1f64:	80 e0       	ldi	r24, 0x00	; 0
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	a0 e2       	ldi	r26, 0x20	; 32
    1f6a:	b1 e4       	ldi	r27, 0x41	; 65
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	ab 83       	std	Y+3, r26	; 0x03
    1f72:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    1f74:	2b ea       	ldi	r18, 0xAB	; 171
    1f76:	3a ea       	ldi	r19, 0xAA	; 170
    1f78:	4a ea       	ldi	r20, 0xAA	; 170
    1f7a:	50 e4       	ldi	r21, 0x40	; 64
    1f7c:	69 81       	ldd	r22, Y+1	; 0x01
    1f7e:	7a 81       	ldd	r23, Y+2	; 0x02
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    1f88:	dc 01       	movw	r26, r24
    1f8a:	cb 01       	movw	r24, r22
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	af 83       	std	Y+7, r26	; 0x07
    1f92:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	6d 81       	ldd	r22, Y+5	; 0x05
    1f9e:	7e 81       	ldd	r23, Y+6	; 0x06
    1fa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa2:	98 85       	ldd	r25, Y+8	; 0x08
    1fa4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	1c f4       	brge	.+6      	; 0x1fb2 <lcd_e_toggle+0x74>
		__ticks = 1;
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	89 87       	std	Y+9, r24	; 0x09
    1fb0:	91 c0       	rjmp	.+290    	; 0x20d4 <lcd_e_toggle+0x196>
	else if (__tmp > 255)
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	53 e4       	ldi	r21, 0x43	; 67
    1fba:	6d 81       	ldd	r22, Y+5	; 0x05
    1fbc:	7e 81       	ldd	r23, Y+6	; 0x06
    1fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc0:	98 85       	ldd	r25, Y+8	; 0x08
    1fc2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	0c f0       	brlt	.+2      	; 0x1fcc <lcd_e_toggle+0x8e>
    1fca:	7b c0       	rjmp	.+246    	; 0x20c2 <lcd_e_toggle+0x184>
	{
		_delay_ms(__us / 1000.0);
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	54 e4       	ldi	r21, 0x44	; 68
    1fd4:	69 81       	ldd	r22, Y+1	; 0x01
    1fd6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	9c 81       	ldd	r25, Y+4	; 0x04
    1fdc:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divsf3>
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	cb 01       	movw	r24, r22
    1fe4:	8a 87       	std	Y+10, r24	; 0x0a
    1fe6:	9b 87       	std	Y+11, r25	; 0x0b
    1fe8:	ac 87       	std	Y+12, r26	; 0x0c
    1fea:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a e7       	ldi	r20, 0x7A	; 122
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	6a 85       	ldd	r22, Y+10	; 0x0a
    1ff6:	7b 85       	ldd	r23, Y+11	; 0x0b
    1ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ffc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8e 87       	std	Y+14, r24	; 0x0e
    2006:	9f 87       	std	Y+15, r25	; 0x0f
    2008:	a8 8b       	std	Y+16, r26	; 0x10
    200a:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	6e 85       	ldd	r22, Y+14	; 0x0e
    2016:	7f 85       	ldd	r23, Y+15	; 0x0f
    2018:	88 89       	ldd	r24, Y+16	; 0x10
    201a:	99 89       	ldd	r25, Y+17	; 0x11
    201c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <lcd_e_toggle+0xf0>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9b 8b       	std	Y+19, r25	; 0x13
    202a:	8a 8b       	std	Y+18, r24	; 0x12
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <lcd_e_toggle+0x16e>
	else if (__tmp > 65535)
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	6e 85       	ldd	r22, Y+14	; 0x0e
    2038:	7f 85       	ldd	r23, Y+15	; 0x0f
    203a:	88 89       	ldd	r24, Y+16	; 0x10
    203c:	99 89       	ldd	r25, Y+17	; 0x11
    203e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <lcd_e_toggle+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	6a 85       	ldd	r22, Y+10	; 0x0a
    2050:	7b 85       	ldd	r23, Y+11	; 0x0b
    2052:	8c 85       	ldd	r24, Y+12	; 0x0c
    2054:	9d 85       	ldd	r25, Y+13	; 0x0d
    2056:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9b 8b       	std	Y+19, r25	; 0x13
    206c:	8a 8b       	std	Y+18, r24	; 0x12
    206e:	0f c0       	rjmp	.+30     	; 0x208e <lcd_e_toggle+0x150>
    2070:	80 e9       	ldi	r24, 0x90	; 144
    2072:	91 e0       	ldi	r25, 0x01	; 1
    2074:	9d 8b       	std	Y+21, r25	; 0x15
    2076:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2078:	8c 89       	ldd	r24, Y+20	; 0x14
    207a:	9d 89       	ldd	r25, Y+21	; 0x15
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <lcd_e_toggle+0x13e>
    2080:	9d 8b       	std	Y+21, r25	; 0x15
    2082:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8a 89       	ldd	r24, Y+18	; 0x12
    2086:	9b 89       	ldd	r25, Y+19	; 0x13
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9b 8b       	std	Y+19, r25	; 0x13
    208c:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8a 89       	ldd	r24, Y+18	; 0x12
    2090:	9b 89       	ldd	r25, Y+19	; 0x13
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <lcd_e_toggle+0x132>
    2096:	24 c0       	rjmp	.+72     	; 0x20e0 <lcd_e_toggle+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6e 85       	ldd	r22, Y+14	; 0x0e
    209a:	7f 85       	ldd	r23, Y+15	; 0x0f
    209c:	88 89       	ldd	r24, Y+16	; 0x10
    209e:	99 89       	ldd	r25, Y+17	; 0x11
    20a0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9b 8b       	std	Y+19, r25	; 0x13
    20aa:	8a 8b       	std	Y+18, r24	; 0x12
    20ac:	8a 89       	ldd	r24, Y+18	; 0x12
    20ae:	9b 89       	ldd	r25, Y+19	; 0x13
    20b0:	9f 8b       	std	Y+23, r25	; 0x17
    20b2:	8e 8b       	std	Y+22, r24	; 0x16
    20b4:	8e 89       	ldd	r24, Y+22	; 0x16
    20b6:	9f 89       	ldd	r25, Y+23	; 0x17
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <lcd_e_toggle+0x17a>
    20bc:	9f 8b       	std	Y+23, r25	; 0x17
    20be:	8e 8b       	std	Y+22, r24	; 0x16
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <lcd_e_toggle+0x1a2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20c2:	6d 81       	ldd	r22, Y+5	; 0x05
    20c4:	7e 81       	ldd	r23, Y+6	; 0x06
    20c6:	8f 81       	ldd	r24, Y+7	; 0x07
    20c8:	98 85       	ldd	r25, Y+8	; 0x08
    20ca:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	89 87       	std	Y+9, r24	; 0x09
    20d4:	89 85       	ldd	r24, Y+9	; 0x09
    20d6:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20d8:	88 8d       	ldd	r24, Y+24	; 0x18
    20da:	8a 95       	dec	r24
    20dc:	f1 f7       	brne	.-4      	; 0x20da <lcd_e_toggle+0x19c>
    20de:	88 8f       	std	Y+24, r24	; 0x18
	_delay_us(10);
	lcd_e_low();
    20e0:	8b e2       	ldi	r24, 0x2B	; 43
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	2b e2       	ldi	r18, 0x2B	; 43
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	f9 01       	movw	r30, r18
    20ea:	20 81       	ld	r18, Z
    20ec:	27 7f       	andi	r18, 0xF7	; 247
    20ee:	fc 01       	movw	r30, r24
    20f0:	20 83       	st	Z, r18
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e4       	ldi	r27, 0x40	; 64
    20fa:	89 8f       	std	Y+25, r24	; 0x19
    20fc:	9a 8f       	std	Y+26, r25	; 0x1a
    20fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2100:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    2102:	2b ea       	ldi	r18, 0xAB	; 171
    2104:	3a ea       	ldi	r19, 0xAA	; 170
    2106:	4a ea       	ldi	r20, 0xAA	; 170
    2108:	50 e4       	ldi	r21, 0x40	; 64
    210a:	69 8d       	ldd	r22, Y+25	; 0x19
    210c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2112:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 8f       	std	Y+29, r24	; 0x1d
    211c:	9e 8f       	std	Y+30, r25	; 0x1e
    211e:	af 8f       	std	Y+31, r26	; 0x1f
    2120:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    212c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    212e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2130:	98 a1       	ldd	r25, Y+32	; 0x20
    2132:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    2136:	88 23       	and	r24, r24
    2138:	1c f4       	brge	.+6      	; 0x2140 <lcd_e_toggle+0x202>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 a3       	std	Y+33, r24	; 0x21
    213e:	91 c0       	rjmp	.+290    	; 0x2262 <lcd_e_toggle+0x324>
	else if (__tmp > 255)
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	4f e7       	ldi	r20, 0x7F	; 127
    2146:	53 e4       	ldi	r21, 0x43	; 67
    2148:	6d 8d       	ldd	r22, Y+29	; 0x1d
    214a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    214c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    214e:	98 a1       	ldd	r25, Y+32	; 0x20
    2150:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    2154:	18 16       	cp	r1, r24
    2156:	0c f0       	brlt	.+2      	; 0x215a <lcd_e_toggle+0x21c>
    2158:	7b c0       	rjmp	.+246    	; 0x2250 <lcd_e_toggle+0x312>
	{
		_delay_ms(__us / 1000.0);
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	4a e7       	ldi	r20, 0x7A	; 122
    2160:	54 e4       	ldi	r21, 0x44	; 68
    2162:	69 8d       	ldd	r22, Y+25	; 0x19
    2164:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2166:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2168:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divsf3>
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	8a a3       	std	Y+34, r24	; 0x22
    2174:	9b a3       	std	Y+35, r25	; 0x23
    2176:	ac a3       	std	Y+36, r26	; 0x24
    2178:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	4a e7       	ldi	r20, 0x7A	; 122
    2180:	55 e4       	ldi	r21, 0x45	; 69
    2182:	6a a1       	ldd	r22, Y+34	; 0x22
    2184:	7b a1       	ldd	r23, Y+35	; 0x23
    2186:	8c a1       	ldd	r24, Y+36	; 0x24
    2188:	9d a1       	ldd	r25, Y+37	; 0x25
    218a:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	8e a3       	std	Y+38, r24	; 0x26
    2194:	9f a3       	std	Y+39, r25	; 0x27
    2196:	a8 a7       	std	Y+40, r26	; 0x28
    2198:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	6e a1       	ldd	r22, Y+38	; 0x26
    21a4:	7f a1       	ldd	r23, Y+39	; 0x27
    21a6:	88 a5       	ldd	r24, Y+40	; 0x28
    21a8:	99 a5       	ldd	r25, Y+41	; 0x29
    21aa:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    21ae:	88 23       	and	r24, r24
    21b0:	2c f4       	brge	.+10     	; 0x21bc <lcd_e_toggle+0x27e>
		__ticks = 1;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	9b a7       	std	Y+43, r25	; 0x2b
    21b8:	8a a7       	std	Y+42, r24	; 0x2a
    21ba:	3f c0       	rjmp	.+126    	; 0x223a <lcd_e_toggle+0x2fc>
	else if (__tmp > 65535)
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	3f ef       	ldi	r19, 0xFF	; 255
    21c0:	4f e7       	ldi	r20, 0x7F	; 127
    21c2:	57 e4       	ldi	r21, 0x47	; 71
    21c4:	6e a1       	ldd	r22, Y+38	; 0x26
    21c6:	7f a1       	ldd	r23, Y+39	; 0x27
    21c8:	88 a5       	ldd	r24, Y+40	; 0x28
    21ca:	99 a5       	ldd	r25, Y+41	; 0x29
    21cc:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    21d0:	18 16       	cp	r1, r24
    21d2:	4c f5       	brge	.+82     	; 0x2226 <lcd_e_toggle+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	51 e4       	ldi	r21, 0x41	; 65
    21dc:	6a a1       	ldd	r22, Y+34	; 0x22
    21de:	7b a1       	ldd	r23, Y+35	; 0x23
    21e0:	8c a1       	ldd	r24, Y+36	; 0x24
    21e2:	9d a1       	ldd	r25, Y+37	; 0x25
    21e4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	bc 01       	movw	r22, r24
    21ee:	cd 01       	movw	r24, r26
    21f0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	9b a7       	std	Y+43, r25	; 0x2b
    21fa:	8a a7       	std	Y+42, r24	; 0x2a
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <lcd_e_toggle+0x2de>
    21fe:	80 e9       	ldi	r24, 0x90	; 144
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	9d a7       	std	Y+45, r25	; 0x2d
    2204:	8c a7       	std	Y+44, r24	; 0x2c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2206:	8c a5       	ldd	r24, Y+44	; 0x2c
    2208:	9d a5       	ldd	r25, Y+45	; 0x2d
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <lcd_e_toggle+0x2cc>
    220e:	9d a7       	std	Y+45, r25	; 0x2d
    2210:	8c a7       	std	Y+44, r24	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2212:	8a a5       	ldd	r24, Y+42	; 0x2a
    2214:	9b a5       	ldd	r25, Y+43	; 0x2b
    2216:	01 97       	sbiw	r24, 0x01	; 1
    2218:	9b a7       	std	Y+43, r25	; 0x2b
    221a:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    221c:	8a a5       	ldd	r24, Y+42	; 0x2a
    221e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2220:	00 97       	sbiw	r24, 0x00	; 0
    2222:	69 f7       	brne	.-38     	; 0x21fe <lcd_e_toggle+0x2c0>
    2224:	24 c0       	rjmp	.+72     	; 0x226e <lcd_e_toggle+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2226:	6e a1       	ldd	r22, Y+38	; 0x26
    2228:	7f a1       	ldd	r23, Y+39	; 0x27
    222a:	88 a5       	ldd	r24, Y+40	; 0x28
    222c:	99 a5       	ldd	r25, Y+41	; 0x29
    222e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	9b a7       	std	Y+43, r25	; 0x2b
    2238:	8a a7       	std	Y+42, r24	; 0x2a
    223a:	8a a5       	ldd	r24, Y+42	; 0x2a
    223c:	9b a5       	ldd	r25, Y+43	; 0x2b
    223e:	9f a7       	std	Y+47, r25	; 0x2f
    2240:	8e a7       	std	Y+46, r24	; 0x2e
    2242:	8e a5       	ldd	r24, Y+46	; 0x2e
    2244:	9f a5       	ldd	r25, Y+47	; 0x2f
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <lcd_e_toggle+0x308>
    224a:	9f a7       	std	Y+47, r25	; 0x2f
    224c:	8e a7       	std	Y+46, r24	; 0x2e
    224e:	0f c0       	rjmp	.+30     	; 0x226e <lcd_e_toggle+0x330>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2250:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2252:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	98 a1       	ldd	r25, Y+32	; 0x20
    2258:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	89 a3       	std	Y+33, r24	; 0x21
    2262:	89 a1       	ldd	r24, Y+33	; 0x21
    2264:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2266:	88 a9       	ldd	r24, Y+48	; 0x30
    2268:	8a 95       	dec	r24
    226a:	f1 f7       	brne	.-4      	; 0x2268 <lcd_e_toggle+0x32a>
    226c:	88 ab       	std	Y+48, r24	; 0x30
	_delay_us(2);
}
    226e:	e0 96       	adiw	r28, 0x30	; 48
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	f8 94       	cli
    2274:	de bf       	out	0x3e, r29	; 62
    2276:	0f be       	out	0x3f, r0	; 63
    2278:	cd bf       	out	0x3d, r28	; 61
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	08 95       	ret

00002280 <lcd_write>:


static void lcd_write(u08 data, u08 rs)
{
    2280:	cf 93       	push	r28
    2282:	df 93       	push	r29
    2284:	00 d0       	rcall	.+0      	; 0x2286 <lcd_write+0x6>
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	6a 83       	std	Y+2, r22	; 0x02
	/* configure data pins as output */
	lcd_data_port_out();
    228e:	8a e2       	ldi	r24, 0x2A	; 42
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	2a e2       	ldi	r18, 0x2A	; 42
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	f9 01       	movw	r30, r18
    2298:	20 81       	ld	r18, Z
    229a:	20 68       	ori	r18, 0x80	; 128
    229c:	fc 01       	movw	r30, r24
    229e:	20 83       	st	Z, r18
    22a0:	8a e2       	ldi	r24, 0x2A	; 42
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	2a e2       	ldi	r18, 0x2A	; 42
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	f9 01       	movw	r30, r18
    22aa:	20 81       	ld	r18, Z
    22ac:	20 64       	ori	r18, 0x40	; 64
    22ae:	fc 01       	movw	r30, r24
    22b0:	20 83       	st	Z, r18
    22b2:	8a e2       	ldi	r24, 0x2A	; 42
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	2a e2       	ldi	r18, 0x2A	; 42
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	f9 01       	movw	r30, r18
    22bc:	20 81       	ld	r18, Z
    22be:	20 62       	ori	r18, 0x20	; 32
    22c0:	fc 01       	movw	r30, r24
    22c2:	20 83       	st	Z, r18
    22c4:	8a e2       	ldi	r24, 0x2A	; 42
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	2a e2       	ldi	r18, 0x2A	; 42
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	f9 01       	movw	r30, r18
    22ce:	20 81       	ld	r18, Z
    22d0:	20 61       	ori	r18, 0x10	; 16
    22d2:	fc 01       	movw	r30, r24
    22d4:	20 83       	st	Z, r18

	/* output high nibble first */

	lcd_out_high(data);
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <lcd_out_high>

	if (rs)
    22dc:	8a 81       	ldd	r24, Y+2	; 0x02
    22de:	88 23       	and	r24, r24
    22e0:	51 f0       	breq	.+20     	; 0x22f6 <lcd_write+0x76>
		lcd_data_mode();	/* RS=1: write data            */
    22e2:	8b e2       	ldi	r24, 0x2B	; 43
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	2b e2       	ldi	r18, 0x2B	; 43
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	20 81       	ld	r18, Z
    22ee:	24 60       	ori	r18, 0x04	; 4
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	09 c0       	rjmp	.+18     	; 0x2308 <lcd_write+0x88>
	else
		lcd_cmd_mode();	/* RS=0: write instruction     */
    22f6:	8b e2       	ldi	r24, 0x2B	; 43
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	2b e2       	ldi	r18, 0x2B	; 43
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	f9 01       	movw	r30, r18
    2300:	20 81       	ld	r18, Z
    2302:	2b 7f       	andi	r18, 0xFB	; 251
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
	lcd_e_toggle();
    2308:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>

	/* output low nibble */
	lcd_out_low(data);
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	0e 94 bf 0e 	call	0x1d7e	; 0x1d7e <lcd_out_low>

	if (rs)
    2312:	8a 81       	ldd	r24, Y+2	; 0x02
    2314:	88 23       	and	r24, r24
    2316:	51 f0       	breq	.+20     	; 0x232c <lcd_write+0xac>
		lcd_data_mode();	/* RS=1: write data            */
    2318:	8b e2       	ldi	r24, 0x2B	; 43
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	2b e2       	ldi	r18, 0x2B	; 43
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	f9 01       	movw	r30, r18
    2322:	20 81       	ld	r18, Z
    2324:	24 60       	ori	r18, 0x04	; 4
    2326:	fc 01       	movw	r30, r24
    2328:	20 83       	st	Z, r18
    232a:	09 c0       	rjmp	.+18     	; 0x233e <lcd_write+0xbe>
	else
		lcd_cmd_mode();	/* RS=0: write instruction     */
    232c:	8b e2       	ldi	r24, 0x2B	; 43
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	2b e2       	ldi	r18, 0x2B	; 43
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	f9 01       	movw	r30, r18
    2336:	20 81       	ld	r18, Z
    2338:	2b 7f       	andi	r18, 0xFB	; 251
    233a:	fc 01       	movw	r30, r24
    233c:	20 83       	st	Z, r18

	lcd_e_toggle();
    233e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>

}
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <lcd_waitcmd>:
static unsigned char lcd_waitcmd(unsigned char cmdwait)
/* this function used to loop while lcd is busy and read address i
 * counter however for this we need the RW line. This function
 * has been changed to just delay a bit. In that case the LCD
 * is only slightly slower but we do not need the RW pin. */
{
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	69 97       	sbiw	r28, 0x19	; 25
    2356:	0f b6       	in	r0, 0x3f	; 63
    2358:	f8 94       	cli
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	0f be       	out	0x3f, r0	; 63
    235e:	cd bf       	out	0x3d, r28	; 61
    2360:	89 8f       	std	Y+25, r24	; 0x19
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	a0 e2       	ldi	r26, 0x20	; 32
    2368:	b1 e4       	ldi	r27, 0x41	; 65
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	ab 83       	std	Y+3, r26	; 0x03
    2370:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
    2372:	2b ea       	ldi	r18, 0xAB	; 171
    2374:	3a ea       	ldi	r19, 0xAA	; 170
    2376:	4a ea       	ldi	r20, 0xAA	; 170
    2378:	50 e4       	ldi	r21, 0x40	; 64
    237a:	69 81       	ldd	r22, Y+1	; 0x01
    237c:	7a 81       	ldd	r23, Y+2	; 0x02
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	8d 83       	std	Y+5, r24	; 0x05
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	af 83       	std	Y+7, r26	; 0x07
    2390:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e8       	ldi	r20, 0x80	; 128
    2398:	5f e3       	ldi	r21, 0x3F	; 63
    239a:	6d 81       	ldd	r22, Y+5	; 0x05
    239c:	7e 81       	ldd	r23, Y+6	; 0x06
    239e:	8f 81       	ldd	r24, Y+7	; 0x07
    23a0:	98 85       	ldd	r25, Y+8	; 0x08
    23a2:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    23a6:	88 23       	and	r24, r24
    23a8:	1c f4       	brge	.+6      	; 0x23b0 <lcd_waitcmd+0x64>
		__ticks = 1;
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	89 87       	std	Y+9, r24	; 0x09
    23ae:	91 c0       	rjmp	.+290    	; 0x24d2 <lcd_waitcmd+0x186>
	else if (__tmp > 255)
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	4f e7       	ldi	r20, 0x7F	; 127
    23b6:	53 e4       	ldi	r21, 0x43	; 67
    23b8:	6d 81       	ldd	r22, Y+5	; 0x05
    23ba:	7e 81       	ldd	r23, Y+6	; 0x06
    23bc:	8f 81       	ldd	r24, Y+7	; 0x07
    23be:	98 85       	ldd	r25, Y+8	; 0x08
    23c0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    23c4:	18 16       	cp	r1, r24
    23c6:	0c f0       	brlt	.+2      	; 0x23ca <lcd_waitcmd+0x7e>
    23c8:	7b c0       	rjmp	.+246    	; 0x24c0 <lcd_waitcmd+0x174>
	{
		_delay_ms(__us / 1000.0);
    23ca:	20 e0       	ldi	r18, 0x00	; 0
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	4a e7       	ldi	r20, 0x7A	; 122
    23d0:	54 e4       	ldi	r21, 0x44	; 68
    23d2:	69 81       	ldd	r22, Y+1	; 0x01
    23d4:	7a 81       	ldd	r23, Y+2	; 0x02
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__divsf3>
    23de:	dc 01       	movw	r26, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	8a 87       	std	Y+10, r24	; 0x0a
    23e4:	9b 87       	std	Y+11, r25	; 0x0b
    23e6:	ac 87       	std	Y+12, r26	; 0x0c
    23e8:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	4a e7       	ldi	r20, 0x7A	; 122
    23f0:	55 e4       	ldi	r21, 0x45	; 69
    23f2:	6a 85       	ldd	r22, Y+10	; 0x0a
    23f4:	7b 85       	ldd	r23, Y+11	; 0x0b
    23f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    23fa:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	8e 87       	std	Y+14, r24	; 0x0e
    2404:	9f 87       	std	Y+15, r25	; 0x0f
    2406:	a8 8b       	std	Y+16, r26	; 0x10
    2408:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	40 e8       	ldi	r20, 0x80	; 128
    2410:	5f e3       	ldi	r21, 0x3F	; 63
    2412:	6e 85       	ldd	r22, Y+14	; 0x0e
    2414:	7f 85       	ldd	r23, Y+15	; 0x0f
    2416:	88 89       	ldd	r24, Y+16	; 0x10
    2418:	99 89       	ldd	r25, Y+17	; 0x11
    241a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    241e:	88 23       	and	r24, r24
    2420:	2c f4       	brge	.+10     	; 0x242c <lcd_waitcmd+0xe0>
		__ticks = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9b 8b       	std	Y+19, r25	; 0x13
    2428:	8a 8b       	std	Y+18, r24	; 0x12
    242a:	3f c0       	rjmp	.+126    	; 0x24aa <lcd_waitcmd+0x15e>
	else if (__tmp > 65535)
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	3f ef       	ldi	r19, 0xFF	; 255
    2430:	4f e7       	ldi	r20, 0x7F	; 127
    2432:	57 e4       	ldi	r21, 0x47	; 71
    2434:	6e 85       	ldd	r22, Y+14	; 0x0e
    2436:	7f 85       	ldd	r23, Y+15	; 0x0f
    2438:	88 89       	ldd	r24, Y+16	; 0x10
    243a:	99 89       	ldd	r25, Y+17	; 0x11
    243c:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    2440:	18 16       	cp	r1, r24
    2442:	4c f5       	brge	.+82     	; 0x2496 <lcd_waitcmd+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	6a 85       	ldd	r22, Y+10	; 0x0a
    244e:	7b 85       	ldd	r23, Y+11	; 0x0b
    2450:	8c 85       	ldd	r24, Y+12	; 0x0c
    2452:	9d 85       	ldd	r25, Y+13	; 0x0d
    2454:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	bc 01       	movw	r22, r24
    245e:	cd 01       	movw	r24, r26
    2460:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9b 8b       	std	Y+19, r25	; 0x13
    246a:	8a 8b       	std	Y+18, r24	; 0x12
    246c:	0f c0       	rjmp	.+30     	; 0x248c <lcd_waitcmd+0x140>
    246e:	80 e9       	ldi	r24, 0x90	; 144
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	9d 8b       	std	Y+21, r25	; 0x15
    2474:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2476:	8c 89       	ldd	r24, Y+20	; 0x14
    2478:	9d 89       	ldd	r25, Y+21	; 0x15
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <lcd_waitcmd+0x12e>
    247e:	9d 8b       	std	Y+21, r25	; 0x15
    2480:	8c 8b       	std	Y+20, r24	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2482:	8a 89       	ldd	r24, Y+18	; 0x12
    2484:	9b 89       	ldd	r25, Y+19	; 0x13
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9b 8b       	std	Y+19, r25	; 0x13
    248a:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	9b 89       	ldd	r25, Y+19	; 0x13
    2490:	00 97       	sbiw	r24, 0x00	; 0
    2492:	69 f7       	brne	.-38     	; 0x246e <lcd_waitcmd+0x122>
    2494:	24 c0       	rjmp	.+72     	; 0x24de <lcd_waitcmd+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2496:	6e 85       	ldd	r22, Y+14	; 0x0e
    2498:	7f 85       	ldd	r23, Y+15	; 0x0f
    249a:	88 89       	ldd	r24, Y+16	; 0x10
    249c:	99 89       	ldd	r25, Y+17	; 0x11
    249e:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	9b 8b       	std	Y+19, r25	; 0x13
    24a8:	8a 8b       	std	Y+18, r24	; 0x12
    24aa:	8a 89       	ldd	r24, Y+18	; 0x12
    24ac:	9b 89       	ldd	r25, Y+19	; 0x13
    24ae:	9f 8b       	std	Y+23, r25	; 0x17
    24b0:	8e 8b       	std	Y+22, r24	; 0x16
    24b2:	8e 89       	ldd	r24, Y+22	; 0x16
    24b4:	9f 89       	ldd	r25, Y+23	; 0x17
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <lcd_waitcmd+0x16a>
    24ba:	9f 8b       	std	Y+23, r25	; 0x17
    24bc:	8e 8b       	std	Y+22, r24	; 0x16
    24be:	0f c0       	rjmp	.+30     	; 0x24de <lcd_waitcmd+0x192>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24c0:	6d 81       	ldd	r22, Y+5	; 0x05
    24c2:	7e 81       	ldd	r23, Y+6	; 0x06
    24c4:	8f 81       	ldd	r24, Y+7	; 0x07
    24c6:	98 85       	ldd	r25, Y+8	; 0x08
    24c8:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	89 87       	std	Y+9, r24	; 0x09
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24d6:	88 8d       	ldd	r24, Y+24	; 0x18
    24d8:	8a 95       	dec	r24
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <lcd_waitcmd+0x18c>
    24dc:	88 8f       	std	Y+24, r24	; 0x18
        _delay_us(10);
	/* the display needs much longer to process a command */
	if (cmdwait){
    24de:	89 8d       	ldd	r24, Y+25	; 0x19
    24e0:	88 23       	and	r24, r24
    24e2:	21 f0       	breq	.+8      	; 0x24ec <lcd_waitcmd+0x1a0>
		delay_ms(3);
    24e4:	83 e0       	ldi	r24, 0x03	; 3
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>
	}
	return (0); 
    24ec:	80 e0       	ldi	r24, 0x00	; 0
}
    24ee:	69 96       	adiw	r28, 0x19	; 25
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	df 91       	pop	r29
    24fc:	cf 91       	pop	r28
    24fe:	08 95       	ret

00002500 <lcd_command>:
** PUBLIC FUNCTIONS 
*/

void lcd_command(u08 cmd)
/* send commando <cmd> to LCD */
{
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	1f 92       	push	r1
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	89 83       	std	Y+1, r24	; 0x01
	lcd_waitcmd(0);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	0e 94 a6 11 	call	0x234c	; 0x234c <lcd_waitcmd>
	lcd_write(cmd, 0);
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	0e 94 40 11 	call	0x2280	; 0x2280 <lcd_write>
	lcd_waitcmd(1);
    251a:	81 e0       	ldi	r24, 0x01	; 1
    251c:	0e 94 a6 11 	call	0x234c	; 0x234c <lcd_waitcmd>
}
    2520:	0f 90       	pop	r0
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	08 95       	ret

00002528 <lcd_gotoxy>:


void lcd_gotoxy(u08 x, u08 y)
/* goto position (x,y) */
{
    2528:	cf 93       	push	r28
    252a:	df 93       	push	r29
    252c:	00 d0       	rcall	.+0      	; 0x252e <lcd_gotoxy+0x6>
    252e:	cd b7       	in	r28, 0x3d	; 61
    2530:	de b7       	in	r29, 0x3e	; 62
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	6a 83       	std	Y+2, r22	; 0x02
#if LCD_LINES==1
	lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
#endif
#if LCD_LINES==2
	if (y == 0)
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	88 23       	and	r24, r24
    253a:	29 f4       	brne	.+10     	; 0x2546 <lcd_gotoxy+0x1e>
		lcd_command((1 << LCD_DDRAM) + LCD_START_LINE1 + x);
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	80 58       	subi	r24, 0x80	; 128
    2540:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
    2544:	04 c0       	rjmp	.+8      	; 0x254e <lcd_gotoxy+0x26>
	else
		lcd_command((1 << LCD_DDRAM) + LCD_START_LINE2 + x);
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	80 54       	subi	r24, 0x40	; 64
    254a:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
		lcd_command((1 << LCD_DDRAM) + LCD_START_LINE3 + x);
	else			/* y==3 */
		lcd_command((1 << LCD_DDRAM) + LCD_START_LINE4 + x);
#endif

}				/* lcd_gotoxy */
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <lcd_putc>:



void lcd_putc(char c)
/* print character at current cursor position */
{
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	1f 92       	push	r1
    255e:	cd b7       	in	r28, 0x3d	; 61
    2560:	de b7       	in	r29, 0x3e	; 62
    2562:	89 83       	std	Y+1, r24	; 0x01
	lcd_waitcmd(0);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	0e 94 a6 11 	call	0x234c	; 0x234c <lcd_waitcmd>
	lcd_write((unsigned char)c, 1);
    256a:	61 e0       	ldi	r22, 0x01	; 1
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	0e 94 40 11 	call	0x2280	; 0x2280 <lcd_write>
	lcd_waitcmd(1);
    2572:	81 e0       	ldi	r24, 0x01	; 1
    2574:	0e 94 a6 11 	call	0x234c	; 0x234c <lcd_waitcmd>
}
    2578:	0f 90       	pop	r0
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <lcd_puts>:


void lcd_puts(const char *s)
/* print string on lcd  */
{
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	00 d0       	rcall	.+0      	; 0x2586 <lcd_puts+0x6>
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	9a 83       	std	Y+2, r25	; 0x02
    258c:	89 83       	std	Y+1, r24	; 0x01
	while (*s) {
    258e:	0b c0       	rjmp	.+22     	; 0x25a6 <lcd_puts+0x26>
		lcd_putc(*s);
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	fc 01       	movw	r30, r24
    2596:	80 81       	ld	r24, Z
    2598:	0e 94 ac 12 	call	0x2558	; 0x2558 <lcd_putc>
		s++;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	9a 83       	std	Y+2, r25	; 0x02
    25a4:	89 83       	std	Y+1, r24	; 0x01


void lcd_puts(const char *s)
/* print string on lcd  */
{
	while (*s) {
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	fc 01       	movw	r30, r24
    25ac:	80 81       	ld	r24, Z
    25ae:	88 23       	and	r24, r24
    25b0:	79 f7       	brne	.-34     	; 0x2590 <lcd_puts+0x10>
		lcd_putc(*s);
		s++;
	}

}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	df 91       	pop	r29
    25b8:	cf 91       	pop	r28
    25ba:	08 95       	ret

000025bc <lcd_puts_p>:


void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd  */
{
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	00 d0       	rcall	.+0      	; 0x25c4 <lcd_puts_p+0x8>
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <lcd_puts_p+0xa>
    25c6:	1f 92       	push	r1
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	9d 83       	std	Y+5, r25	; 0x05
    25ce:	8c 83       	std	Y+4, r24	; 0x04
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <lcd_puts_p+0x1c>
		lcd_putc(c);
    25d2:	81 2f       	mov	r24, r17
    25d4:	0e 94 ac 12 	call	0x2558	; 0x2558 <lcd_putc>
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd  */
{
	register char c;

	while ((c = pgm_read_byte(progmem_s++))) {
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	9c 01       	movw	r18, r24
    25de:	2f 5f       	subi	r18, 0xFF	; 255
    25e0:	3f 4f       	sbci	r19, 0xFF	; 255
    25e2:	3d 83       	std	Y+5, r19	; 0x05
    25e4:	2c 83       	std	Y+4, r18	; 0x04
    25e6:	9a 83       	std	Y+2, r25	; 0x02
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	fc 01       	movw	r30, r24
    25f0:	84 91       	lpm	r24, Z
    25f2:	8b 83       	std	Y+3, r24	; 0x03
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	18 2f       	mov	r17, r24
    25f8:	11 23       	and	r17, r17
    25fa:	59 f7       	brne	.-42     	; 0x25d2 <lcd_puts_p+0x16>
		lcd_putc(c);
	}

}
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <lcd_init>:


void lcd_init(u08 dispAttr)
/* initialize display and select type of cursor */
/* dispAttr: LCD_DISP_OFF, LCD_DISP_ON, LCD_DISP_ON_CURSOR, LCD_DISP_CURSOR_BLINK */
{
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	1f 92       	push	r1
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	89 83       	std	Y+1, r24	; 0x01
    /*------ Initialize lcd to 4 bit i/o mode -------*/

	lcd_data_port_out();	/* all data port bits as output */
    261a:	8a e2       	ldi	r24, 0x2A	; 42
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	2a e2       	ldi	r18, 0x2A	; 42
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	f9 01       	movw	r30, r18
    2624:	20 81       	ld	r18, Z
    2626:	20 68       	ori	r18, 0x80	; 128
    2628:	fc 01       	movw	r30, r24
    262a:	20 83       	st	Z, r18
    262c:	8a e2       	ldi	r24, 0x2A	; 42
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	2a e2       	ldi	r18, 0x2A	; 42
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	f9 01       	movw	r30, r18
    2636:	20 81       	ld	r18, Z
    2638:	20 64       	ori	r18, 0x40	; 64
    263a:	fc 01       	movw	r30, r24
    263c:	20 83       	st	Z, r18
    263e:	8a e2       	ldi	r24, 0x2A	; 42
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	2a e2       	ldi	r18, 0x2A	; 42
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	f9 01       	movw	r30, r18
    2648:	20 81       	ld	r18, Z
    264a:	20 62       	ori	r18, 0x20	; 32
    264c:	fc 01       	movw	r30, r24
    264e:	20 83       	st	Z, r18
    2650:	8a e2       	ldi	r24, 0x2A	; 42
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	2a e2       	ldi	r18, 0x2A	; 42
    2656:	30 e0       	ldi	r19, 0x00	; 0
    2658:	f9 01       	movw	r30, r18
    265a:	20 81       	ld	r18, Z
    265c:	20 61       	ori	r18, 0x10	; 16
    265e:	fc 01       	movw	r30, r24
    2660:	20 83       	st	Z, r18
	sbi(LCD_RS_DDR, LCD_RS_PIN);	/* RS pin as output */
    2662:	8a e2       	ldi	r24, 0x2A	; 42
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	2a e2       	ldi	r18, 0x2A	; 42
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	f9 01       	movw	r30, r18
    266c:	20 81       	ld	r18, Z
    266e:	24 60       	ori	r18, 0x04	; 4
    2670:	fc 01       	movw	r30, r24
    2672:	20 83       	st	Z, r18
	sbi(LCD_E_DDR, LCD_E_PIN);	/* E  pin as output */
    2674:	8a e2       	ldi	r24, 0x2A	; 42
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	2a e2       	ldi	r18, 0x2A	; 42
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	f9 01       	movw	r30, r18
    267e:	20 81       	ld	r18, Z
    2680:	28 60       	ori	r18, 0x08	; 8
    2682:	fc 01       	movw	r30, r24
    2684:	20 83       	st	Z, r18


	delay_ms(14);	/* wait 12ms or more after power-on       */
    2686:	8e e0       	ldi	r24, 0x0E	; 14
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>

	/* initial write to lcd is 8bit */
	lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    268e:	80 e3       	ldi	r24, 0x30	; 48
    2690:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <lcd_out_high>
	lcd_e_toggle();
    2694:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>
	delay_ms(4);	/* delay, busy flag can't be checked here */
    2698:	84 e0       	ldi	r24, 0x04	; 4
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>

	lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    26a0:	80 e3       	ldi	r24, 0x30	; 48
    26a2:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <lcd_out_high>
	lcd_e_toggle();
    26a6:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>
	delay_ms(4);	/* delay, busy flag can't be checked here */
    26aa:	84 e0       	ldi	r24, 0x04	; 4
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>

	lcd_out_high(LCD_FUNCTION_8BIT_1LINE);
    26b2:	80 e3       	ldi	r24, 0x30	; 48
    26b4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <lcd_out_high>
	lcd_e_toggle();
    26b8:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>
	delay_ms(4);	/* delay, busy flag can't be checked here */
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>

	lcd_out_high(LCD_FUNCTION_4BIT_1LINE);	/* set IO mode to 4bit */
    26c4:	80 e2       	ldi	r24, 0x20	; 32
    26c6:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <lcd_out_high>
	lcd_e_toggle();
    26ca:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <lcd_e_toggle>
	delay_ms(4);	/* delay, busy flag can't be checked here */
    26ce:	84 e0       	ldi	r24, 0x04	; 4
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	0e 94 81 13 	call	0x2702	; 0x2702 <delay_ms>

	/* from now the lcd only accepts 4 bit I/O, we can use lcd_command() */
	lcd_command(LCD_FUNCTION_DEFAULT);	/* function set: display lines  */
    26d6:	88 e2       	ldi	r24, 0x28	; 40
    26d8:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
	lcd_command(LCD_DISP_OFF);	/* display off                  */
    26dc:	88 e0       	ldi	r24, 0x08	; 8
    26de:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
	lcd_clrscr();		/* display clear                */
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
	lcd_command(LCD_MODE_DEFAULT);	/* set entry mode               */
    26e8:	86 e0       	ldi	r24, 0x06	; 6
    26ea:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
	lcd_command(dispAttr);	/* display/cursor control       */
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
	lcd_waitcmd(2);
    26f4:	82 e0       	ldi	r24, 0x02	; 2
    26f6:	0e 94 a6 11 	call	0x234c	; 0x234c <lcd_waitcmd>
}
    26fa:	0f 90       	pop	r0
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <delay_ms>:
#include "timeout.h"
// just using _delay_ms makes the code very fat. If we encapsulate it in 
// a function then it is OK.
//
void delay_ms(unsigned int ms)
{
    2702:	cf 93       	push	r28
    2704:	df 93       	push	r29
    2706:	cd b7       	in	r28, 0x3d	; 61
    2708:	de b7       	in	r29, 0x3e	; 62
    270a:	60 97       	sbiw	r28, 0x10	; 16
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	98 8b       	std	Y+16, r25	; 0x10
    2718:	8f 87       	std	Y+15, r24	; 0x0f
        while(ms){
    271a:	77 c0       	rjmp	.+238    	; 0x280a <delay_ms+0x108>
    271c:	8f e8       	ldi	r24, 0x8F	; 143
    271e:	92 ec       	ldi	r25, 0xC2	; 194
    2720:	a5 e7       	ldi	r26, 0x75	; 117
    2722:	bf e3       	ldi	r27, 0x3F	; 63
    2724:	89 83       	std	Y+1, r24	; 0x01
    2726:	9a 83       	std	Y+2, r25	; 0x02
    2728:	ab 83       	std	Y+3, r26	; 0x03
    272a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	4a e7       	ldi	r20, 0x7A	; 122
    2732:	55 e4       	ldi	r21, 0x45	; 69
    2734:	69 81       	ldd	r22, Y+1	; 0x01
    2736:	7a 81       	ldd	r23, Y+2	; 0x02
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	8d 83       	std	Y+5, r24	; 0x05
    2746:	9e 83       	std	Y+6, r25	; 0x06
    2748:	af 83       	std	Y+7, r26	; 0x07
    274a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	6d 81       	ldd	r22, Y+5	; 0x05
    2756:	7e 81       	ldd	r23, Y+6	; 0x06
    2758:	8f 81       	ldd	r24, Y+7	; 0x07
    275a:	98 85       	ldd	r25, Y+8	; 0x08
    275c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__cmpsf2>
    2760:	88 23       	and	r24, r24
    2762:	2c f4       	brge	.+10     	; 0x276e <delay_ms+0x6c>
		__ticks = 1;
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	9a 87       	std	Y+10, r25	; 0x0a
    276a:	89 87       	std	Y+9, r24	; 0x09
    276c:	3f c0       	rjmp	.+126    	; 0x27ec <delay_ms+0xea>
	else if (__tmp > 65535)
    276e:	20 e0       	ldi	r18, 0x00	; 0
    2770:	3f ef       	ldi	r19, 0xFF	; 255
    2772:	4f e7       	ldi	r20, 0x7F	; 127
    2774:	57 e4       	ldi	r21, 0x47	; 71
    2776:	6d 81       	ldd	r22, Y+5	; 0x05
    2778:	7e 81       	ldd	r23, Y+6	; 0x06
    277a:	8f 81       	ldd	r24, Y+7	; 0x07
    277c:	98 85       	ldd	r25, Y+8	; 0x08
    277e:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <__gesf2>
    2782:	18 16       	cp	r1, r24
    2784:	4c f5       	brge	.+82     	; 0x27d8 <delay_ms+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e2       	ldi	r20, 0x20	; 32
    278c:	51 e4       	ldi	r21, 0x41	; 65
    278e:	69 81       	ldd	r22, Y+1	; 0x01
    2790:	7a 81       	ldd	r23, Y+2	; 0x02
    2792:	8b 81       	ldd	r24, Y+3	; 0x03
    2794:	9c 81       	ldd	r25, Y+4	; 0x04
    2796:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <__mulsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	bc 01       	movw	r22, r24
    27a0:	cd 01       	movw	r24, r26
    27a2:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	9a 87       	std	Y+10, r25	; 0x0a
    27ac:	89 87       	std	Y+9, r24	; 0x09
    27ae:	0f c0       	rjmp	.+30     	; 0x27ce <delay_ms+0xcc>
    27b0:	80 e9       	ldi	r24, 0x90	; 144
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	9c 87       	std	Y+12, r25	; 0x0c
    27b6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    27ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <delay_ms+0xba>
    27c0:	9c 87       	std	Y+12, r25	; 0x0c
    27c2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	9a 87       	std	Y+10, r25	; 0x0a
    27cc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	89 85       	ldd	r24, Y+9	; 0x09
    27d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d2:	00 97       	sbiw	r24, 0x00	; 0
    27d4:	69 f7       	brne	.-38     	; 0x27b0 <delay_ms+0xae>
    27d6:	14 c0       	rjmp	.+40     	; 0x2800 <delay_ms+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d8:	6d 81       	ldd	r22, Y+5	; 0x05
    27da:	7e 81       	ldd	r23, Y+6	; 0x06
    27dc:	8f 81       	ldd	r24, Y+7	; 0x07
    27de:	98 85       	ldd	r25, Y+8	; 0x08
    27e0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <__fixunssfsi>
    27e4:	dc 01       	movw	r26, r24
    27e6:	cb 01       	movw	r24, r22
    27e8:	9a 87       	std	Y+10, r25	; 0x0a
    27ea:	89 87       	std	Y+9, r24	; 0x09
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	9e 87       	std	Y+14, r25	; 0x0e
    27f2:	8d 87       	std	Y+13, r24	; 0x0d
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <delay_ms+0xf6>
    27fc:	9e 87       	std	Y+14, r25	; 0x0e
    27fe:	8d 87       	std	Y+13, r24	; 0x0d
                _delay_ms(0.96);
                ms--;
    2800:	8f 85       	ldd	r24, Y+15	; 0x0f
    2802:	98 89       	ldd	r25, Y+16	; 0x10
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	98 8b       	std	Y+16, r25	; 0x10
    2808:	8f 87       	std	Y+15, r24	; 0x0f
// just using _delay_ms makes the code very fat. If we encapsulate it in 
// a function then it is OK.
//
void delay_ms(unsigned int ms)
{
        while(ms){
    280a:	8f 85       	ldd	r24, Y+15	; 0x0f
    280c:	98 89       	ldd	r25, Y+16	; 0x10
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	09 f0       	breq	.+2      	; 0x2814 <delay_ms+0x112>
    2812:	84 cf       	rjmp	.-248    	; 0x271c <delay_ms+0x1a>
                _delay_ms(0.96);
                ms--;
        }
}
    2814:	60 96       	adiw	r28, 0x10	; 16
    2816:	0f b6       	in	r0, 0x3f	; 63
    2818:	f8 94       	cli
    281a:	de bf       	out	0x3e, r29	; 62
    281c:	0f be       	out	0x3f, r0	; 63
    281e:	cd bf       	out	0x3d, r28	; 61
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	08 95       	ret

00002826 <main>:
#define BUFFER_SIZE 750
static uint8_t buf[BUFFER_SIZE+1];
#define STR_BUFFER_SIZE 22


int main(void){
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	2f 97       	sbiw	r28, 0x0f	; 15
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
	int8_t red;
	int8_t green;
	int8_t blue;

	// pixel krams
	TCCR2B &= ~(1 << CS22) & ~(1 << CS21) & ~(1 << CS20);			// Stop the timer during setup
    283a:	81 eb       	ldi	r24, 0xB1	; 177
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	21 eb       	ldi	r18, 0xB1	; 177
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	f9 01       	movw	r30, r18
    2844:	20 81       	ld	r18, Z
    2846:	28 7f       	andi	r18, 0xF8	; 248
    2848:	fc 01       	movw	r30, r24
    284a:	20 83       	st	Z, r18
	TIFR2 |= (1 << TOV2);	// Clear the overflow interrupt flag
    284c:	87 e3       	ldi	r24, 0x37	; 55
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	27 e3       	ldi	r18, 0x37	; 55
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	f9 01       	movw	r30, r18
    2856:	20 81       	ld	r18, Z
    2858:	21 60       	ori	r18, 0x01	; 1
    285a:	fc 01       	movw	r30, r24
    285c:	20 83       	st	Z, r18
	TIMSK2 |= (1 << TOIE2);	// Enable interrupts on overflow of timer2
    285e:	80 e7       	ldi	r24, 0x70	; 112
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	20 e7       	ldi	r18, 0x70	; 112
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	f9 01       	movw	r30, r18
    2868:	20 81       	ld	r18, Z
    286a:	21 60       	ori	r18, 0x01	; 1
    286c:	fc 01       	movw	r30, r24
    286e:	20 83       	st	Z, r18
	ASSR &= ~(1 << AS2);	// Clock timer / counter 2 from the I/O clock
    2870:	86 eb       	ldi	r24, 0xB6	; 182
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	26 eb       	ldi	r18, 0xB6	; 182
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	f9 01       	movw	r30, r18
    287a:	20 81       	ld	r18, Z
    287c:	2f 7d       	andi	r18, 0xDF	; 223
    287e:	fc 01       	movw	r30, r24
    2880:	20 83       	st	Z, r18
	TCCR2A &= ~(1 << COM2B1); TCCR2A &= ~(1 << COM2B0);			// OC2B disconnected
    2882:	80 eb       	ldi	r24, 0xB0	; 176
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	20 eb       	ldi	r18, 0xB0	; 176
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	f9 01       	movw	r30, r18
    288c:	20 81       	ld	r18, Z
    288e:	2f 7d       	andi	r18, 0xDF	; 223
    2890:	fc 01       	movw	r30, r24
    2892:	20 83       	st	Z, r18
    2894:	80 eb       	ldi	r24, 0xB0	; 176
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	20 eb       	ldi	r18, 0xB0	; 176
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	f9 01       	movw	r30, r18
    289e:	20 81       	ld	r18, Z
    28a0:	2f 7e       	andi	r18, 0xEF	; 239
    28a2:	fc 01       	movw	r30, r24
    28a4:	20 83       	st	Z, r18
	TCCR2B &= ~(1 << WGM22); TCCR2A &= ~(1 << WGM21); TCCR2A &= ~(1 << WGM20);	// 'Normal' mode
    28a6:	81 eb       	ldi	r24, 0xB1	; 177
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	21 eb       	ldi	r18, 0xB1	; 177
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	f9 01       	movw	r30, r18
    28b0:	20 81       	ld	r18, Z
    28b2:	27 7f       	andi	r18, 0xF7	; 247
    28b4:	fc 01       	movw	r30, r24
    28b6:	20 83       	st	Z, r18
    28b8:	80 eb       	ldi	r24, 0xB0	; 176
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	20 eb       	ldi	r18, 0xB0	; 176
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	f9 01       	movw	r30, r18
    28c2:	20 81       	ld	r18, Z
    28c4:	2d 7f       	andi	r18, 0xFD	; 253
    28c6:	fc 01       	movw	r30, r24
    28c8:	20 83       	st	Z, r18
    28ca:	80 eb       	ldi	r24, 0xB0	; 176
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	20 eb       	ldi	r18, 0xB0	; 176
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	f9 01       	movw	r30, r18
    28d4:	20 81       	ld	r18, Z
    28d6:	2e 7f       	andi	r18, 0xFE	; 254
    28d8:	fc 01       	movw	r30, r24
    28da:	20 83       	st	Z, r18
	TCCR2B &= ~(1 << CS22) & ~(1 << CS21);
    28dc:	81 eb       	ldi	r24, 0xB1	; 177
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	21 eb       	ldi	r18, 0xB1	; 177
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	f9 01       	movw	r30, r18
    28e6:	20 81       	ld	r18, Z
    28e8:	29 7f       	andi	r18, 0xF9	; 249
    28ea:	fc 01       	movw	r30, r24
    28ec:	20 83       	st	Z, r18
	TCCR2B |= (1 << CS20);			// Prescale the clock by 1, switching it on
    28ee:	81 eb       	ldi	r24, 0xB1	; 177
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	21 eb       	ldi	r18, 0xB1	; 177
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	f9 01       	movw	r30, r18
    28f8:	20 81       	ld	r18, Z
    28fa:	21 60       	ori	r18, 0x01	; 1
    28fc:	fc 01       	movw	r30, r24
    28fe:	20 83       	st	Z, r18

    /*initialize enc28j60*/
    enc28j60Init(mymac);
    2900:	88 e0       	ldi	r24, 0x08	; 8
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	0e 94 bc 05 	call	0xb78	; 0xb78 <enc28j60Init>
    enc28j60clkout(2); // change clkout from 6.25MHz to 12.5MHz
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	0e 94 ac 05 	call	0xb58	; 0xb58 <enc28j60clkout>
    290e:	82 e3       	ldi	r24, 0x32	; 50
    2910:	8b 87       	std	Y+11, r24	; 0x0b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2912:	8b 85       	ldd	r24, Y+11	; 0x0b
    2914:	8a 95       	dec	r24
    2916:	f1 f7       	brne	.-4      	; 0x2914 <main+0xee>
    2918:	8b 87       	std	Y+11, r24	; 0x0b
    _delay_loop_1(50); // 12ms
    enc28j60PhyWrite(PHLCON,0x476);
    291a:	66 e7       	ldi	r22, 0x76	; 118
    291c:	74 e0       	ldi	r23, 0x04	; 4
    291e:	84 e1       	ldi	r24, 0x14	; 20
    2920:	0e 94 bc 04 	call	0x978	; 0x978 <enc28j60PhyWrite>
    2924:	82 e3       	ldi	r24, 0x32	; 50
    2926:	8c 87       	std	Y+12, r24	; 0x0c
    2928:	8c 85       	ldd	r24, Y+12	; 0x0c
    292a:	8a 95       	dec	r24
    292c:	f1 f7       	brne	.-4      	; 0x292a <main+0x104>
    292e:	8c 87       	std	Y+12, r24	; 0x0c
    _delay_loop_1(50); // 12ms
    // lcd display:
    lcd_init(LCD_DISP_ON);
    2930:	8c e0       	ldi	r24, 0x0C	; 12
    2932:	0e 94 07 13 	call	0x260e	; 0x260e <lcd_init>
    lcd_clrscr();
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
    lcd_puts_P("=ok=");
    293c:	88 e6       	ldi	r24, 0x68	; 104
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	0e 94 de 12 	call	0x25bc	; 0x25bc <lcd_puts_p>
    //init the ethernet/ip layer:
    init_ip_arp_udp_tcp(mymac,myip,mywwwport);
    2944:	80 91 12 01 	lds	r24, 0x0112
    2948:	90 91 13 01 	lds	r25, 0x0113
    294c:	48 2f       	mov	r20, r24
    294e:	6e e0       	ldi	r22, 0x0E	; 14
    2950:	71 e0       	ldi	r23, 0x01	; 1
    2952:	88 e0       	ldi	r24, 0x08	; 8
    2954:	91 e0       	ldi	r25, 0x01	; 1
    2956:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <init_ip_arp_udp_tcp>


	// pixel INIT
	//counter = 0;
	sei();	// enable interrupts
    295a:	78 94       	sei
	init_WS2812B();
    295c:	0e 94 96 00 	call	0x12c	; 0x12c <init_WS2812B>
	set_WS2812B(3, 0, 0, 255); // RED
    2960:	2f ef       	ldi	r18, 0xFF	; 255
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	83 e0       	ldi	r24, 0x03	; 3
    2968:	0e 94 3d 01 	call	0x27a	; 0x27a <set_WS2812B>
	show_WS2812B();
    296c:	0e 94 b9 00 	call	0x172	; 0x172 <show_WS2812B>
	cli();	// enable interrupts
    2970:	f8 94       	cli

	while(1){
        // get the next new packet:
         plen = enc28j60PacketReceive(BUFFER_SIZE, buf);
    2972:	6f e2       	ldi	r22, 0x2F	; 47
    2974:	71 e0       	ldi	r23, 0x01	; 1
    2976:	8e ee       	ldi	r24, 0xEE	; 238
    2978:	92 e0       	ldi	r25, 0x02	; 2
    297a:	0e 94 34 07 	call	0xe68	; 0xe68 <enc28j60PacketReceive>
    297e:	9b 83       	std	Y+3, r25	; 0x03
    2980:	8a 83       	std	Y+2, r24	; 0x02

         // plen will ne unequal to zero if there is a valid
         // packet (without crc error)
         if(plen==0){
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	9b 81       	ldd	r25, Y+3	; 0x03
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	09 f4       	brne	.+2      	; 0x298c <main+0x166>
                 continue;
    298a:	cd c0       	rjmp	.+410    	; 0x2b26 <main+0x300>
         }

         // arp is broadcast if unknown but a host may also
         // verify the mac address by sending it to
         // a unicast address.
         if(eth_type_is_arp_and_my_ip(buf,plen)){
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	9b 81       	ldd	r25, Y+3	; 0x03
    2990:	bc 01       	movw	r22, r24
    2992:	8f e2       	ldi	r24, 0x2F	; 47
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	0e 94 2a 09 	call	0x1254	; 0x1254 <eth_type_is_arp_and_my_ip>
    299a:	88 23       	and	r24, r24
    299c:	29 f0       	breq	.+10     	; 0x29a8 <main+0x182>
                 make_arp_answer_from_request(buf);
    299e:	8f e2       	ldi	r24, 0x2F	; 47
    29a0:	91 e0       	ldi	r25, 0x01	; 1
    29a2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <make_arp_answer_from_request>
                 continue;
    29a6:	bf c0       	rjmp	.+382    	; 0x2b26 <main+0x300>
         }

         // check if ip packets are for us:
         if(eth_type_is_ip_and_my_ip(buf,plen)==0){
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	9b 81       	ldd	r25, Y+3	; 0x03
    29ac:	bc 01       	movw	r22, r24
    29ae:	8f e2       	ldi	r24, 0x2F	; 47
    29b0:	91 e0       	ldi	r25, 0x01	; 1
    29b2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <eth_type_is_ip_and_my_ip>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f4       	brne	.+2      	; 0x29bc <main+0x196>
                 continue;
    29ba:	b5 c0       	rjmp	.+362    	; 0x2b26 <main+0x300>
         }

         if(buf[IP_PROTO_P]==IP_PROTO_ICMP_V && buf[ICMP_TYPE_P]==ICMP_TYPE_ECHOREQUEST_V){
    29bc:	80 91 46 01 	lds	r24, 0x0146
    29c0:	81 30       	cpi	r24, 0x01	; 1
    29c2:	61 f4       	brne	.+24     	; 0x29dc <main+0x1b6>
    29c4:	80 91 51 01 	lds	r24, 0x0151
    29c8:	88 30       	cpi	r24, 0x08	; 8
    29ca:	41 f4       	brne	.+16     	; 0x29dc <main+0x1b6>
                 // a ping packet, let's send pong
                 make_echo_reply_from_request(buf,plen);
    29cc:	8a 81       	ldd	r24, Y+2	; 0x02
    29ce:	9b 81       	ldd	r25, Y+3	; 0x03
    29d0:	bc 01       	movw	r22, r24
    29d2:	8f e2       	ldi	r24, 0x2F	; 47
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <make_echo_reply_from_request>
                 continue;
    29da:	a5 c0       	rjmp	.+330    	; 0x2b26 <main+0x300>
         }

         // tcp port www start, compare only the lower byte
         if (buf[IP_PROTO_P]==IP_PROTO_TCP_V&&buf[TCP_DST_PORT_H_P]==0&&buf[TCP_DST_PORT_L_P]==mywwwport){
    29dc:	80 91 46 01 	lds	r24, 0x0146
    29e0:	86 30       	cpi	r24, 0x06	; 6
    29e2:	09 f0       	breq	.+2      	; 0x29e6 <main+0x1c0>
    29e4:	a0 c0       	rjmp	.+320    	; 0x2b26 <main+0x300>
    29e6:	80 91 53 01 	lds	r24, 0x0153
    29ea:	88 23       	and	r24, r24
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <main+0x1ca>
    29ee:	9b c0       	rjmp	.+310    	; 0x2b26 <main+0x300>
    29f0:	80 91 54 01 	lds	r24, 0x0154
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	80 91 12 01 	lds	r24, 0x0112
    29fc:	90 91 13 01 	lds	r25, 0x0113
    2a00:	28 17       	cp	r18, r24
    2a02:	39 07       	cpc	r19, r25
    2a04:	09 f0       	breq	.+2      	; 0x2a08 <main+0x1e2>
    2a06:	8f c0       	rjmp	.+286    	; 0x2b26 <main+0x300>
                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_SYN_V){
    2a08:	80 91 5e 01 	lds	r24, 0x015E
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	82 70       	andi	r24, 0x02	; 2
    2a12:	99 27       	eor	r25, r25
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	29 f0       	breq	.+10     	; 0x2a22 <main+0x1fc>
                         make_tcp_synack_from_syn(buf);
    2a18:	8f e2       	ldi	r24, 0x2F	; 47
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <make_tcp_synack_from_syn>
                         // make_tcp_synack_from_syn does already send the syn,ack
                         continue;
    2a20:	82 c0       	rjmp	.+260    	; 0x2b26 <main+0x300>
                 }
                 if (buf[TCP_FLAGS_P] & TCP_FLAGS_ACK_V){
    2a22:	80 91 5e 01 	lds	r24, 0x015E
    2a26:	88 2f       	mov	r24, r24
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	80 71       	andi	r24, 0x10	; 16
    2a2c:	99 27       	eor	r25, r25
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <main+0x20e>
    2a32:	79 c0       	rjmp	.+242    	; 0x2b26 <main+0x300>
                         init_len_info(buf); // init some data structures
    2a34:	8f e2       	ldi	r24, 0x2F	; 47
    2a36:	91 e0       	ldi	r25, 0x01	; 1
    2a38:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <init_len_info>
                         // we can possibly have no data, just ack:
                         dat_p=get_tcp_data_pointer();
    2a3c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <get_tcp_data_pointer>
    2a40:	9d 83       	std	Y+5, r25	; 0x05
    2a42:	8c 83       	std	Y+4, r24	; 0x04
                         if (dat_p==0){
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	9d 81       	ldd	r25, Y+5	; 0x05
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	71 f4       	brne	.+28     	; 0x2a68 <main+0x242>
                         	if (buf[TCP_FLAGS_P] & TCP_FLAGS_FIN_V){
    2a4c:	80 91 5e 01 	lds	r24, 0x015E
    2a50:	88 2f       	mov	r24, r24
    2a52:	90 e0       	ldi	r25, 0x00	; 0
    2a54:	81 70       	andi	r24, 0x01	; 1
    2a56:	99 27       	eor	r25, r25
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	29 f0       	breq	.+10     	; 0x2a66 <main+0x240>
                         		// finack, answer with ack
                                  make_tcp_ack_from_any(buf);
    2a5c:	8f e2       	ldi	r24, 0x2F	; 47
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
    2a60:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <make_tcp_ack_from_any>
                             }
                             // just an ack with no data, wait for next packet
                         	continue;
    2a64:	60 c0       	rjmp	.+192    	; 0x2b26 <main+0x300>
    2a66:	5f c0       	rjmp	.+190    	; 0x2b26 <main+0x300>
                         }
                         if(buf[TCP_FLAGS_P] & TCP_FLAGS_PSHACK_V){
    2a68:	80 91 5e 01 	lds	r24, 0x015E
    2a6c:	88 2f       	mov	r24, r24
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	88 71       	andi	r24, 0x18	; 24
    2a72:	99 27       	eor	r25, r25
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	09 f4       	brne	.+2      	; 0x2a7a <main+0x254>
    2a78:	55 c0       	rjmp	.+170    	; 0x2b24 <main+0x2fe>
                         	lcd_clrscr();
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	0e 94 80 12 	call	0x2500	; 0x2500 <lcd_command>
                         	lcd_puts_P("PUSH/ACK");
    2a80:	8d e6       	ldi	r24, 0x6D	; 109
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 de 12 	call	0x25bc	; 0x25bc <lcd_puts_p>
                         	make_tcp_ack_from_any(buf);
    2a88:	8f e2       	ldi	r24, 0x2F	; 47
    2a8a:	91 e0       	ldi	r25, 0x01	; 1
    2a8c:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <make_tcp_ack_from_any>

                         	cmd = (char *)&(buf[dat_p]);
    2a90:	8c 81       	ldd	r24, Y+4	; 0x04
    2a92:	9d 81       	ldd	r25, Y+5	; 0x05
    2a94:	81 5d       	subi	r24, 0xD1	; 209
    2a96:	9e 4f       	sbci	r25, 0xFE	; 254
    2a98:	9f 83       	std	Y+7, r25	; 0x07
    2a9a:	8e 83       	std	Y+6, r24	; 0x06
							lcd_gotoxy(0,1);
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	80 e0       	ldi	r24, 0x00	; 0
    2aa0:	0e 94 94 12 	call	0x2528	; 0x2528 <lcd_gotoxy>
							lcd_puts(cmd);
    2aa4:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa6:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa8:	0e 94 c0 12 	call	0x2580	; 0x2580 <lcd_puts>

							splitString(byte, cmd,0,1);
    2aac:	6e 81       	ldd	r22, Y+6	; 0x06
    2aae:	7f 81       	ldd	r23, Y+7	; 0x07
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	0d 96       	adiw	r24, 0x0d	; 13
    2ab4:	21 e0       	ldi	r18, 0x01	; 1
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	0e 94 90 01 	call	0x320	; 0x320 <splitString>
							red = hex2int(byte);
    2abc:	ce 01       	movw	r24, r28
    2abe:	0d 96       	adiw	r24, 0x0d	; 13
    2ac0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <hex2int>
    2ac4:	88 87       	std	Y+8, r24	; 0x08

							splitString(byte, cmd,2,3);
    2ac6:	6e 81       	ldd	r22, Y+6	; 0x06
    2ac8:	7f 81       	ldd	r23, Y+7	; 0x07
    2aca:	ce 01       	movw	r24, r28
    2acc:	0d 96       	adiw	r24, 0x0d	; 13
    2ace:	23 e0       	ldi	r18, 0x03	; 3
    2ad0:	42 e0       	ldi	r20, 0x02	; 2
    2ad2:	0e 94 90 01 	call	0x320	; 0x320 <splitString>
							green = hex2int(byte);
    2ad6:	ce 01       	movw	r24, r28
    2ad8:	0d 96       	adiw	r24, 0x0d	; 13
    2ada:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <hex2int>
    2ade:	89 87       	std	Y+9, r24	; 0x09

							splitString(byte, cmd,4,5);
    2ae0:	6e 81       	ldd	r22, Y+6	; 0x06
    2ae2:	7f 81       	ldd	r23, Y+7	; 0x07
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	0d 96       	adiw	r24, 0x0d	; 13
    2ae8:	25 e0       	ldi	r18, 0x05	; 5
    2aea:	44 e0       	ldi	r20, 0x04	; 4
    2aec:	0e 94 90 01 	call	0x320	; 0x320 <splitString>
							blue = hex2int(byte);
    2af0:	ce 01       	movw	r24, r28
    2af2:	0d 96       	adiw	r24, 0x0d	; 13
    2af4:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <hex2int>
    2af8:	8a 87       	std	Y+10, r24	; 0x0a

							for(led_pos=0;led_pos<MAX_PIXEL;led_pos++){
    2afa:	19 82       	std	Y+1, r1	; 0x01
    2afc:	0b c0       	rjmp	.+22     	; 0x2b14 <main+0x2ee>
								set_WS2812B(led_pos, red, green,blue); // RED
    2afe:	2a 85       	ldd	r18, Y+10	; 0x0a
    2b00:	39 85       	ldd	r19, Y+9	; 0x09
    2b02:	98 85       	ldd	r25, Y+8	; 0x08
    2b04:	89 81       	ldd	r24, Y+1	; 0x01
    2b06:	43 2f       	mov	r20, r19
    2b08:	69 2f       	mov	r22, r25
    2b0a:	0e 94 3d 01 	call	0x27a	; 0x27a <set_WS2812B>
							green = hex2int(byte);

							splitString(byte, cmd,4,5);
							blue = hex2int(byte);

							for(led_pos=0;led_pos<MAX_PIXEL;led_pos++){
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	8f 5f       	subi	r24, 0xFF	; 255
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	8e 31       	cpi	r24, 0x1E	; 30
    2b18:	94 f3       	brlt	.-28     	; 0x2afe <main+0x2d8>
								set_WS2812B(led_pos, red, green,blue); // RED
							}
							sei();	// enable interrupts
    2b1a:	78 94       	sei
  					 	    show_WS2812B();
    2b1c:	0e 94 b9 00 	call	0x172	; 0x172 <show_WS2812B>
							cli();	// enable interrupts
    2b20:	f8 94       	cli

                        }
                        continue;
    2b22:	00 c0       	rjmp	.+0      	; 0x2b24 <main+0x2fe>
    2b24:	00 00       	nop
                 }
         }
	}
    2b26:	25 cf       	rjmp	.-438    	; 0x2972 <main+0x14c>

00002b28 <__cmpsf2>:
    2b28:	97 d0       	rcall	.+302    	; 0x2c58 <__fp_cmp>
    2b2a:	08 f4       	brcc	.+2      	; 0x2b2e <__cmpsf2+0x6>
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	08 95       	ret

00002b30 <__divsf3>:
    2b30:	0c d0       	rcall	.+24     	; 0x2b4a <__divsf3x>
    2b32:	cd c0       	rjmp	.+410    	; 0x2cce <__fp_round>
    2b34:	c5 d0       	rcall	.+394    	; 0x2cc0 <__fp_pscB>
    2b36:	40 f0       	brcs	.+16     	; 0x2b48 <__divsf3+0x18>
    2b38:	bc d0       	rcall	.+376    	; 0x2cb2 <__fp_pscA>
    2b3a:	30 f0       	brcs	.+12     	; 0x2b48 <__divsf3+0x18>
    2b3c:	21 f4       	brne	.+8      	; 0x2b46 <__divsf3+0x16>
    2b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    2b40:	19 f0       	breq	.+6      	; 0x2b48 <__divsf3+0x18>
    2b42:	ae c0       	rjmp	.+348    	; 0x2ca0 <__fp_inf>
    2b44:	51 11       	cpse	r21, r1
    2b46:	f7 c0       	rjmp	.+494    	; 0x2d36 <__fp_szero>
    2b48:	b1 c0       	rjmp	.+354    	; 0x2cac <__fp_nan>

00002b4a <__divsf3x>:
    2b4a:	d2 d0       	rcall	.+420    	; 0x2cf0 <__fp_split3>
    2b4c:	98 f3       	brcs	.-26     	; 0x2b34 <__divsf3+0x4>

00002b4e <__divsf3_pse>:
    2b4e:	99 23       	and	r25, r25
    2b50:	c9 f3       	breq	.-14     	; 0x2b44 <__divsf3+0x14>
    2b52:	55 23       	and	r21, r21
    2b54:	b1 f3       	breq	.-20     	; 0x2b42 <__divsf3+0x12>
    2b56:	95 1b       	sub	r25, r21
    2b58:	55 0b       	sbc	r21, r21
    2b5a:	bb 27       	eor	r27, r27
    2b5c:	aa 27       	eor	r26, r26
    2b5e:	62 17       	cp	r22, r18
    2b60:	73 07       	cpc	r23, r19
    2b62:	84 07       	cpc	r24, r20
    2b64:	38 f0       	brcs	.+14     	; 0x2b74 <__divsf3_pse+0x26>
    2b66:	9f 5f       	subi	r25, 0xFF	; 255
    2b68:	5f 4f       	sbci	r21, 0xFF	; 255
    2b6a:	22 0f       	add	r18, r18
    2b6c:	33 1f       	adc	r19, r19
    2b6e:	44 1f       	adc	r20, r20
    2b70:	aa 1f       	adc	r26, r26
    2b72:	a9 f3       	breq	.-22     	; 0x2b5e <__divsf3_pse+0x10>
    2b74:	33 d0       	rcall	.+102    	; 0x2bdc <__divsf3_pse+0x8e>
    2b76:	0e 2e       	mov	r0, r30
    2b78:	3a f0       	brmi	.+14     	; 0x2b88 <__divsf3_pse+0x3a>
    2b7a:	e0 e8       	ldi	r30, 0x80	; 128
    2b7c:	30 d0       	rcall	.+96     	; 0x2bde <__divsf3_pse+0x90>
    2b7e:	91 50       	subi	r25, 0x01	; 1
    2b80:	50 40       	sbci	r21, 0x00	; 0
    2b82:	e6 95       	lsr	r30
    2b84:	00 1c       	adc	r0, r0
    2b86:	ca f7       	brpl	.-14     	; 0x2b7a <__divsf3_pse+0x2c>
    2b88:	29 d0       	rcall	.+82     	; 0x2bdc <__divsf3_pse+0x8e>
    2b8a:	fe 2f       	mov	r31, r30
    2b8c:	27 d0       	rcall	.+78     	; 0x2bdc <__divsf3_pse+0x8e>
    2b8e:	66 0f       	add	r22, r22
    2b90:	77 1f       	adc	r23, r23
    2b92:	88 1f       	adc	r24, r24
    2b94:	bb 1f       	adc	r27, r27
    2b96:	26 17       	cp	r18, r22
    2b98:	37 07       	cpc	r19, r23
    2b9a:	48 07       	cpc	r20, r24
    2b9c:	ab 07       	cpc	r26, r27
    2b9e:	b0 e8       	ldi	r27, 0x80	; 128
    2ba0:	09 f0       	breq	.+2      	; 0x2ba4 <__divsf3_pse+0x56>
    2ba2:	bb 0b       	sbc	r27, r27
    2ba4:	80 2d       	mov	r24, r0
    2ba6:	bf 01       	movw	r22, r30
    2ba8:	ff 27       	eor	r31, r31
    2baa:	93 58       	subi	r25, 0x83	; 131
    2bac:	5f 4f       	sbci	r21, 0xFF	; 255
    2bae:	2a f0       	brmi	.+10     	; 0x2bba <__divsf3_pse+0x6c>
    2bb0:	9e 3f       	cpi	r25, 0xFE	; 254
    2bb2:	51 05       	cpc	r21, r1
    2bb4:	68 f0       	brcs	.+26     	; 0x2bd0 <__divsf3_pse+0x82>
    2bb6:	74 c0       	rjmp	.+232    	; 0x2ca0 <__fp_inf>
    2bb8:	be c0       	rjmp	.+380    	; 0x2d36 <__fp_szero>
    2bba:	5f 3f       	cpi	r21, 0xFF	; 255
    2bbc:	ec f3       	brlt	.-6      	; 0x2bb8 <__divsf3_pse+0x6a>
    2bbe:	98 3e       	cpi	r25, 0xE8	; 232
    2bc0:	dc f3       	brlt	.-10     	; 0x2bb8 <__divsf3_pse+0x6a>
    2bc2:	86 95       	lsr	r24
    2bc4:	77 95       	ror	r23
    2bc6:	67 95       	ror	r22
    2bc8:	b7 95       	ror	r27
    2bca:	f7 95       	ror	r31
    2bcc:	9f 5f       	subi	r25, 0xFF	; 255
    2bce:	c9 f7       	brne	.-14     	; 0x2bc2 <__divsf3_pse+0x74>
    2bd0:	88 0f       	add	r24, r24
    2bd2:	91 1d       	adc	r25, r1
    2bd4:	96 95       	lsr	r25
    2bd6:	87 95       	ror	r24
    2bd8:	97 f9       	bld	r25, 7
    2bda:	08 95       	ret
    2bdc:	e1 e0       	ldi	r30, 0x01	; 1
    2bde:	66 0f       	add	r22, r22
    2be0:	77 1f       	adc	r23, r23
    2be2:	88 1f       	adc	r24, r24
    2be4:	bb 1f       	adc	r27, r27
    2be6:	62 17       	cp	r22, r18
    2be8:	73 07       	cpc	r23, r19
    2bea:	84 07       	cpc	r24, r20
    2bec:	ba 07       	cpc	r27, r26
    2bee:	20 f0       	brcs	.+8      	; 0x2bf8 <__divsf3_pse+0xaa>
    2bf0:	62 1b       	sub	r22, r18
    2bf2:	73 0b       	sbc	r23, r19
    2bf4:	84 0b       	sbc	r24, r20
    2bf6:	ba 0b       	sbc	r27, r26
    2bf8:	ee 1f       	adc	r30, r30
    2bfa:	88 f7       	brcc	.-30     	; 0x2bde <__divsf3_pse+0x90>
    2bfc:	e0 95       	com	r30
    2bfe:	08 95       	ret

00002c00 <__fixunssfsi>:
    2c00:	7f d0       	rcall	.+254    	; 0x2d00 <__fp_splitA>
    2c02:	88 f0       	brcs	.+34     	; 0x2c26 <__fixunssfsi+0x26>
    2c04:	9f 57       	subi	r25, 0x7F	; 127
    2c06:	90 f0       	brcs	.+36     	; 0x2c2c <__fixunssfsi+0x2c>
    2c08:	b9 2f       	mov	r27, r25
    2c0a:	99 27       	eor	r25, r25
    2c0c:	b7 51       	subi	r27, 0x17	; 23
    2c0e:	a0 f0       	brcs	.+40     	; 0x2c38 <__fixunssfsi+0x38>
    2c10:	d1 f0       	breq	.+52     	; 0x2c46 <__fixunssfsi+0x46>
    2c12:	66 0f       	add	r22, r22
    2c14:	77 1f       	adc	r23, r23
    2c16:	88 1f       	adc	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	1a f0       	brmi	.+6      	; 0x2c22 <__fixunssfsi+0x22>
    2c1c:	ba 95       	dec	r27
    2c1e:	c9 f7       	brne	.-14     	; 0x2c12 <__fixunssfsi+0x12>
    2c20:	12 c0       	rjmp	.+36     	; 0x2c46 <__fixunssfsi+0x46>
    2c22:	b1 30       	cpi	r27, 0x01	; 1
    2c24:	81 f0       	breq	.+32     	; 0x2c46 <__fixunssfsi+0x46>
    2c26:	86 d0       	rcall	.+268    	; 0x2d34 <__fp_zero>
    2c28:	b1 e0       	ldi	r27, 0x01	; 1
    2c2a:	08 95       	ret
    2c2c:	83 c0       	rjmp	.+262    	; 0x2d34 <__fp_zero>
    2c2e:	67 2f       	mov	r22, r23
    2c30:	78 2f       	mov	r23, r24
    2c32:	88 27       	eor	r24, r24
    2c34:	b8 5f       	subi	r27, 0xF8	; 248
    2c36:	39 f0       	breq	.+14     	; 0x2c46 <__fixunssfsi+0x46>
    2c38:	b9 3f       	cpi	r27, 0xF9	; 249
    2c3a:	cc f3       	brlt	.-14     	; 0x2c2e <__fixunssfsi+0x2e>
    2c3c:	86 95       	lsr	r24
    2c3e:	77 95       	ror	r23
    2c40:	67 95       	ror	r22
    2c42:	b3 95       	inc	r27
    2c44:	d9 f7       	brne	.-10     	; 0x2c3c <__fixunssfsi+0x3c>
    2c46:	3e f4       	brtc	.+14     	; 0x2c56 <__fixunssfsi+0x56>
    2c48:	90 95       	com	r25
    2c4a:	80 95       	com	r24
    2c4c:	70 95       	com	r23
    2c4e:	61 95       	neg	r22
    2c50:	7f 4f       	sbci	r23, 0xFF	; 255
    2c52:	8f 4f       	sbci	r24, 0xFF	; 255
    2c54:	9f 4f       	sbci	r25, 0xFF	; 255
    2c56:	08 95       	ret

00002c58 <__fp_cmp>:
    2c58:	99 0f       	add	r25, r25
    2c5a:	00 08       	sbc	r0, r0
    2c5c:	55 0f       	add	r21, r21
    2c5e:	aa 0b       	sbc	r26, r26
    2c60:	e0 e8       	ldi	r30, 0x80	; 128
    2c62:	fe ef       	ldi	r31, 0xFE	; 254
    2c64:	16 16       	cp	r1, r22
    2c66:	17 06       	cpc	r1, r23
    2c68:	e8 07       	cpc	r30, r24
    2c6a:	f9 07       	cpc	r31, r25
    2c6c:	c0 f0       	brcs	.+48     	; 0x2c9e <__fp_cmp+0x46>
    2c6e:	12 16       	cp	r1, r18
    2c70:	13 06       	cpc	r1, r19
    2c72:	e4 07       	cpc	r30, r20
    2c74:	f5 07       	cpc	r31, r21
    2c76:	98 f0       	brcs	.+38     	; 0x2c9e <__fp_cmp+0x46>
    2c78:	62 1b       	sub	r22, r18
    2c7a:	73 0b       	sbc	r23, r19
    2c7c:	84 0b       	sbc	r24, r20
    2c7e:	95 0b       	sbc	r25, r21
    2c80:	39 f4       	brne	.+14     	; 0x2c90 <__fp_cmp+0x38>
    2c82:	0a 26       	eor	r0, r26
    2c84:	61 f0       	breq	.+24     	; 0x2c9e <__fp_cmp+0x46>
    2c86:	23 2b       	or	r18, r19
    2c88:	24 2b       	or	r18, r20
    2c8a:	25 2b       	or	r18, r21
    2c8c:	21 f4       	brne	.+8      	; 0x2c96 <__fp_cmp+0x3e>
    2c8e:	08 95       	ret
    2c90:	0a 26       	eor	r0, r26
    2c92:	09 f4       	brne	.+2      	; 0x2c96 <__fp_cmp+0x3e>
    2c94:	a1 40       	sbci	r26, 0x01	; 1
    2c96:	a6 95       	lsr	r26
    2c98:	8f ef       	ldi	r24, 0xFF	; 255
    2c9a:	81 1d       	adc	r24, r1
    2c9c:	81 1d       	adc	r24, r1
    2c9e:	08 95       	ret

00002ca0 <__fp_inf>:
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	9f 67       	ori	r25, 0x7F	; 127
    2ca4:	80 e8       	ldi	r24, 0x80	; 128
    2ca6:	70 e0       	ldi	r23, 0x00	; 0
    2ca8:	60 e0       	ldi	r22, 0x00	; 0
    2caa:	08 95       	ret

00002cac <__fp_nan>:
    2cac:	9f ef       	ldi	r25, 0xFF	; 255
    2cae:	80 ec       	ldi	r24, 0xC0	; 192
    2cb0:	08 95       	ret

00002cb2 <__fp_pscA>:
    2cb2:	00 24       	eor	r0, r0
    2cb4:	0a 94       	dec	r0
    2cb6:	16 16       	cp	r1, r22
    2cb8:	17 06       	cpc	r1, r23
    2cba:	18 06       	cpc	r1, r24
    2cbc:	09 06       	cpc	r0, r25
    2cbe:	08 95       	ret

00002cc0 <__fp_pscB>:
    2cc0:	00 24       	eor	r0, r0
    2cc2:	0a 94       	dec	r0
    2cc4:	12 16       	cp	r1, r18
    2cc6:	13 06       	cpc	r1, r19
    2cc8:	14 06       	cpc	r1, r20
    2cca:	05 06       	cpc	r0, r21
    2ccc:	08 95       	ret

00002cce <__fp_round>:
    2cce:	09 2e       	mov	r0, r25
    2cd0:	03 94       	inc	r0
    2cd2:	00 0c       	add	r0, r0
    2cd4:	11 f4       	brne	.+4      	; 0x2cda <__fp_round+0xc>
    2cd6:	88 23       	and	r24, r24
    2cd8:	52 f0       	brmi	.+20     	; 0x2cee <__fp_round+0x20>
    2cda:	bb 0f       	add	r27, r27
    2cdc:	40 f4       	brcc	.+16     	; 0x2cee <__fp_round+0x20>
    2cde:	bf 2b       	or	r27, r31
    2ce0:	11 f4       	brne	.+4      	; 0x2ce6 <__fp_round+0x18>
    2ce2:	60 ff       	sbrs	r22, 0
    2ce4:	04 c0       	rjmp	.+8      	; 0x2cee <__fp_round+0x20>
    2ce6:	6f 5f       	subi	r22, 0xFF	; 255
    2ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    2cea:	8f 4f       	sbci	r24, 0xFF	; 255
    2cec:	9f 4f       	sbci	r25, 0xFF	; 255
    2cee:	08 95       	ret

00002cf0 <__fp_split3>:
    2cf0:	57 fd       	sbrc	r21, 7
    2cf2:	90 58       	subi	r25, 0x80	; 128
    2cf4:	44 0f       	add	r20, r20
    2cf6:	55 1f       	adc	r21, r21
    2cf8:	59 f0       	breq	.+22     	; 0x2d10 <__fp_splitA+0x10>
    2cfa:	5f 3f       	cpi	r21, 0xFF	; 255
    2cfc:	71 f0       	breq	.+28     	; 0x2d1a <__fp_splitA+0x1a>
    2cfe:	47 95       	ror	r20

00002d00 <__fp_splitA>:
    2d00:	88 0f       	add	r24, r24
    2d02:	97 fb       	bst	r25, 7
    2d04:	99 1f       	adc	r25, r25
    2d06:	61 f0       	breq	.+24     	; 0x2d20 <__fp_splitA+0x20>
    2d08:	9f 3f       	cpi	r25, 0xFF	; 255
    2d0a:	79 f0       	breq	.+30     	; 0x2d2a <__fp_splitA+0x2a>
    2d0c:	87 95       	ror	r24
    2d0e:	08 95       	ret
    2d10:	12 16       	cp	r1, r18
    2d12:	13 06       	cpc	r1, r19
    2d14:	14 06       	cpc	r1, r20
    2d16:	55 1f       	adc	r21, r21
    2d18:	f2 cf       	rjmp	.-28     	; 0x2cfe <__fp_split3+0xe>
    2d1a:	46 95       	lsr	r20
    2d1c:	f1 df       	rcall	.-30     	; 0x2d00 <__fp_splitA>
    2d1e:	08 c0       	rjmp	.+16     	; 0x2d30 <__fp_splitA+0x30>
    2d20:	16 16       	cp	r1, r22
    2d22:	17 06       	cpc	r1, r23
    2d24:	18 06       	cpc	r1, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	f1 cf       	rjmp	.-30     	; 0x2d0c <__fp_splitA+0xc>
    2d2a:	86 95       	lsr	r24
    2d2c:	71 05       	cpc	r23, r1
    2d2e:	61 05       	cpc	r22, r1
    2d30:	08 94       	sec
    2d32:	08 95       	ret

00002d34 <__fp_zero>:
    2d34:	e8 94       	clt

00002d36 <__fp_szero>:
    2d36:	bb 27       	eor	r27, r27
    2d38:	66 27       	eor	r22, r22
    2d3a:	77 27       	eor	r23, r23
    2d3c:	cb 01       	movw	r24, r22
    2d3e:	97 f9       	bld	r25, 7
    2d40:	08 95       	ret

00002d42 <__gesf2>:
    2d42:	8a df       	rcall	.-236    	; 0x2c58 <__fp_cmp>
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <__gesf2+0x6>
    2d46:	8f ef       	ldi	r24, 0xFF	; 255
    2d48:	08 95       	ret

00002d4a <__mulsf3>:
    2d4a:	0b d0       	rcall	.+22     	; 0x2d62 <__mulsf3x>
    2d4c:	c0 cf       	rjmp	.-128    	; 0x2cce <__fp_round>
    2d4e:	b1 df       	rcall	.-158    	; 0x2cb2 <__fp_pscA>
    2d50:	28 f0       	brcs	.+10     	; 0x2d5c <__mulsf3+0x12>
    2d52:	b6 df       	rcall	.-148    	; 0x2cc0 <__fp_pscB>
    2d54:	18 f0       	brcs	.+6      	; 0x2d5c <__mulsf3+0x12>
    2d56:	95 23       	and	r25, r21
    2d58:	09 f0       	breq	.+2      	; 0x2d5c <__mulsf3+0x12>
    2d5a:	a2 cf       	rjmp	.-188    	; 0x2ca0 <__fp_inf>
    2d5c:	a7 cf       	rjmp	.-178    	; 0x2cac <__fp_nan>
    2d5e:	11 24       	eor	r1, r1
    2d60:	ea cf       	rjmp	.-44     	; 0x2d36 <__fp_szero>

00002d62 <__mulsf3x>:
    2d62:	c6 df       	rcall	.-116    	; 0x2cf0 <__fp_split3>
    2d64:	a0 f3       	brcs	.-24     	; 0x2d4e <__mulsf3+0x4>

00002d66 <__mulsf3_pse>:
    2d66:	95 9f       	mul	r25, r21
    2d68:	d1 f3       	breq	.-12     	; 0x2d5e <__mulsf3+0x14>
    2d6a:	95 0f       	add	r25, r21
    2d6c:	50 e0       	ldi	r21, 0x00	; 0
    2d6e:	55 1f       	adc	r21, r21
    2d70:	62 9f       	mul	r22, r18
    2d72:	f0 01       	movw	r30, r0
    2d74:	72 9f       	mul	r23, r18
    2d76:	bb 27       	eor	r27, r27
    2d78:	f0 0d       	add	r31, r0
    2d7a:	b1 1d       	adc	r27, r1
    2d7c:	63 9f       	mul	r22, r19
    2d7e:	aa 27       	eor	r26, r26
    2d80:	f0 0d       	add	r31, r0
    2d82:	b1 1d       	adc	r27, r1
    2d84:	aa 1f       	adc	r26, r26
    2d86:	64 9f       	mul	r22, r20
    2d88:	66 27       	eor	r22, r22
    2d8a:	b0 0d       	add	r27, r0
    2d8c:	a1 1d       	adc	r26, r1
    2d8e:	66 1f       	adc	r22, r22
    2d90:	82 9f       	mul	r24, r18
    2d92:	22 27       	eor	r18, r18
    2d94:	b0 0d       	add	r27, r0
    2d96:	a1 1d       	adc	r26, r1
    2d98:	62 1f       	adc	r22, r18
    2d9a:	73 9f       	mul	r23, r19
    2d9c:	b0 0d       	add	r27, r0
    2d9e:	a1 1d       	adc	r26, r1
    2da0:	62 1f       	adc	r22, r18
    2da2:	83 9f       	mul	r24, r19
    2da4:	a0 0d       	add	r26, r0
    2da6:	61 1d       	adc	r22, r1
    2da8:	22 1f       	adc	r18, r18
    2daa:	74 9f       	mul	r23, r20
    2dac:	33 27       	eor	r19, r19
    2dae:	a0 0d       	add	r26, r0
    2db0:	61 1d       	adc	r22, r1
    2db2:	23 1f       	adc	r18, r19
    2db4:	84 9f       	mul	r24, r20
    2db6:	60 0d       	add	r22, r0
    2db8:	21 1d       	adc	r18, r1
    2dba:	82 2f       	mov	r24, r18
    2dbc:	76 2f       	mov	r23, r22
    2dbe:	6a 2f       	mov	r22, r26
    2dc0:	11 24       	eor	r1, r1
    2dc2:	9f 57       	subi	r25, 0x7F	; 127
    2dc4:	50 40       	sbci	r21, 0x00	; 0
    2dc6:	8a f0       	brmi	.+34     	; 0x2dea <__mulsf3_pse+0x84>
    2dc8:	e1 f0       	breq	.+56     	; 0x2e02 <__mulsf3_pse+0x9c>
    2dca:	88 23       	and	r24, r24
    2dcc:	4a f0       	brmi	.+18     	; 0x2de0 <__mulsf3_pse+0x7a>
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	bb 1f       	adc	r27, r27
    2dd4:	66 1f       	adc	r22, r22
    2dd6:	77 1f       	adc	r23, r23
    2dd8:	88 1f       	adc	r24, r24
    2dda:	91 50       	subi	r25, 0x01	; 1
    2ddc:	50 40       	sbci	r21, 0x00	; 0
    2dde:	a9 f7       	brne	.-22     	; 0x2dca <__mulsf3_pse+0x64>
    2de0:	9e 3f       	cpi	r25, 0xFE	; 254
    2de2:	51 05       	cpc	r21, r1
    2de4:	70 f0       	brcs	.+28     	; 0x2e02 <__mulsf3_pse+0x9c>
    2de6:	5c cf       	rjmp	.-328    	; 0x2ca0 <__fp_inf>
    2de8:	a6 cf       	rjmp	.-180    	; 0x2d36 <__fp_szero>
    2dea:	5f 3f       	cpi	r21, 0xFF	; 255
    2dec:	ec f3       	brlt	.-6      	; 0x2de8 <__mulsf3_pse+0x82>
    2dee:	98 3e       	cpi	r25, 0xE8	; 232
    2df0:	dc f3       	brlt	.-10     	; 0x2de8 <__mulsf3_pse+0x82>
    2df2:	86 95       	lsr	r24
    2df4:	77 95       	ror	r23
    2df6:	67 95       	ror	r22
    2df8:	b7 95       	ror	r27
    2dfa:	f7 95       	ror	r31
    2dfc:	e7 95       	ror	r30
    2dfe:	9f 5f       	subi	r25, 0xFF	; 255
    2e00:	c1 f7       	brne	.-16     	; 0x2df2 <__mulsf3_pse+0x8c>
    2e02:	fe 2b       	or	r31, r30
    2e04:	88 0f       	add	r24, r24
    2e06:	91 1d       	adc	r25, r1
    2e08:	96 95       	lsr	r25
    2e0a:	87 95       	ror	r24
    2e0c:	97 f9       	bld	r25, 7
    2e0e:	08 95       	ret

00002e10 <malloc>:
    2e10:	cf 93       	push	r28
    2e12:	df 93       	push	r29
    2e14:	82 30       	cpi	r24, 0x02	; 2
    2e16:	91 05       	cpc	r25, r1
    2e18:	10 f4       	brcc	.+4      	; 0x2e1e <malloc+0xe>
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	e0 91 24 04 	lds	r30, 0x0424
    2e22:	f0 91 25 04 	lds	r31, 0x0425
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	a0 e0       	ldi	r26, 0x00	; 0
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	30 97       	sbiw	r30, 0x00	; 0
    2e30:	39 f1       	breq	.+78     	; 0x2e80 <malloc+0x70>
    2e32:	40 81       	ld	r20, Z
    2e34:	51 81       	ldd	r21, Z+1	; 0x01
    2e36:	48 17       	cp	r20, r24
    2e38:	59 07       	cpc	r21, r25
    2e3a:	b8 f0       	brcs	.+46     	; 0x2e6a <malloc+0x5a>
    2e3c:	48 17       	cp	r20, r24
    2e3e:	59 07       	cpc	r21, r25
    2e40:	71 f4       	brne	.+28     	; 0x2e5e <malloc+0x4e>
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	10 97       	sbiw	r26, 0x00	; 0
    2e48:	29 f0       	breq	.+10     	; 0x2e54 <malloc+0x44>
    2e4a:	13 96       	adiw	r26, 0x03	; 3
    2e4c:	9c 93       	st	X, r25
    2e4e:	8e 93       	st	-X, r24
    2e50:	12 97       	sbiw	r26, 0x02	; 2
    2e52:	2c c0       	rjmp	.+88     	; 0x2eac <malloc+0x9c>
    2e54:	90 93 25 04 	sts	0x0425, r25
    2e58:	80 93 24 04 	sts	0x0424, r24
    2e5c:	27 c0       	rjmp	.+78     	; 0x2eac <malloc+0x9c>
    2e5e:	21 15       	cp	r18, r1
    2e60:	31 05       	cpc	r19, r1
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <malloc+0x60>
    2e64:	42 17       	cp	r20, r18
    2e66:	53 07       	cpc	r21, r19
    2e68:	18 f0       	brcs	.+6      	; 0x2e70 <malloc+0x60>
    2e6a:	a9 01       	movw	r20, r18
    2e6c:	db 01       	movw	r26, r22
    2e6e:	01 c0       	rjmp	.+2      	; 0x2e72 <malloc+0x62>
    2e70:	ef 01       	movw	r28, r30
    2e72:	9a 01       	movw	r18, r20
    2e74:	bd 01       	movw	r22, r26
    2e76:	df 01       	movw	r26, r30
    2e78:	02 80       	ldd	r0, Z+2	; 0x02
    2e7a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e7c:	e0 2d       	mov	r30, r0
    2e7e:	d7 cf       	rjmp	.-82     	; 0x2e2e <malloc+0x1e>
    2e80:	21 15       	cp	r18, r1
    2e82:	31 05       	cpc	r19, r1
    2e84:	f9 f0       	breq	.+62     	; 0x2ec4 <malloc+0xb4>
    2e86:	28 1b       	sub	r18, r24
    2e88:	39 0b       	sbc	r19, r25
    2e8a:	24 30       	cpi	r18, 0x04	; 4
    2e8c:	31 05       	cpc	r19, r1
    2e8e:	80 f4       	brcc	.+32     	; 0x2eb0 <malloc+0xa0>
    2e90:	8a 81       	ldd	r24, Y+2	; 0x02
    2e92:	9b 81       	ldd	r25, Y+3	; 0x03
    2e94:	61 15       	cp	r22, r1
    2e96:	71 05       	cpc	r23, r1
    2e98:	21 f0       	breq	.+8      	; 0x2ea2 <malloc+0x92>
    2e9a:	fb 01       	movw	r30, r22
    2e9c:	93 83       	std	Z+3, r25	; 0x03
    2e9e:	82 83       	std	Z+2, r24	; 0x02
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <malloc+0x9a>
    2ea2:	90 93 25 04 	sts	0x0425, r25
    2ea6:	80 93 24 04 	sts	0x0424, r24
    2eaa:	fe 01       	movw	r30, r28
    2eac:	32 96       	adiw	r30, 0x02	; 2
    2eae:	44 c0       	rjmp	.+136    	; 0x2f38 <malloc+0x128>
    2eb0:	fe 01       	movw	r30, r28
    2eb2:	e2 0f       	add	r30, r18
    2eb4:	f3 1f       	adc	r31, r19
    2eb6:	81 93       	st	Z+, r24
    2eb8:	91 93       	st	Z+, r25
    2eba:	22 50       	subi	r18, 0x02	; 2
    2ebc:	31 09       	sbc	r19, r1
    2ebe:	39 83       	std	Y+1, r19	; 0x01
    2ec0:	28 83       	st	Y, r18
    2ec2:	3a c0       	rjmp	.+116    	; 0x2f38 <malloc+0x128>
    2ec4:	20 91 22 04 	lds	r18, 0x0422
    2ec8:	30 91 23 04 	lds	r19, 0x0423
    2ecc:	23 2b       	or	r18, r19
    2ece:	41 f4       	brne	.+16     	; 0x2ee0 <malloc+0xd0>
    2ed0:	20 91 02 01 	lds	r18, 0x0102
    2ed4:	30 91 03 01 	lds	r19, 0x0103
    2ed8:	30 93 23 04 	sts	0x0423, r19
    2edc:	20 93 22 04 	sts	0x0422, r18
    2ee0:	20 91 00 01 	lds	r18, 0x0100
    2ee4:	30 91 01 01 	lds	r19, 0x0101
    2ee8:	21 15       	cp	r18, r1
    2eea:	31 05       	cpc	r19, r1
    2eec:	41 f4       	brne	.+16     	; 0x2efe <malloc+0xee>
    2eee:	2d b7       	in	r18, 0x3d	; 61
    2ef0:	3e b7       	in	r19, 0x3e	; 62
    2ef2:	40 91 04 01 	lds	r20, 0x0104
    2ef6:	50 91 05 01 	lds	r21, 0x0105
    2efa:	24 1b       	sub	r18, r20
    2efc:	35 0b       	sbc	r19, r21
    2efe:	e0 91 22 04 	lds	r30, 0x0422
    2f02:	f0 91 23 04 	lds	r31, 0x0423
    2f06:	e2 17       	cp	r30, r18
    2f08:	f3 07       	cpc	r31, r19
    2f0a:	a0 f4       	brcc	.+40     	; 0x2f34 <malloc+0x124>
    2f0c:	2e 1b       	sub	r18, r30
    2f0e:	3f 0b       	sbc	r19, r31
    2f10:	28 17       	cp	r18, r24
    2f12:	39 07       	cpc	r19, r25
    2f14:	78 f0       	brcs	.+30     	; 0x2f34 <malloc+0x124>
    2f16:	ac 01       	movw	r20, r24
    2f18:	4e 5f       	subi	r20, 0xFE	; 254
    2f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1c:	24 17       	cp	r18, r20
    2f1e:	35 07       	cpc	r19, r21
    2f20:	48 f0       	brcs	.+18     	; 0x2f34 <malloc+0x124>
    2f22:	4e 0f       	add	r20, r30
    2f24:	5f 1f       	adc	r21, r31
    2f26:	50 93 23 04 	sts	0x0423, r21
    2f2a:	40 93 22 04 	sts	0x0422, r20
    2f2e:	81 93       	st	Z+, r24
    2f30:	91 93       	st	Z+, r25
    2f32:	02 c0       	rjmp	.+4      	; 0x2f38 <malloc+0x128>
    2f34:	e0 e0       	ldi	r30, 0x00	; 0
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	cf 01       	movw	r24, r30
    2f3a:	df 91       	pop	r29
    2f3c:	cf 91       	pop	r28
    2f3e:	08 95       	ret

00002f40 <free>:
    2f40:	cf 93       	push	r28
    2f42:	df 93       	push	r29
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	09 f4       	brne	.+2      	; 0x2f4a <free+0xa>
    2f48:	87 c0       	rjmp	.+270    	; 0x3058 <free+0x118>
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	32 97       	sbiw	r30, 0x02	; 2
    2f4e:	13 82       	std	Z+3, r1	; 0x03
    2f50:	12 82       	std	Z+2, r1	; 0x02
    2f52:	c0 91 24 04 	lds	r28, 0x0424
    2f56:	d0 91 25 04 	lds	r29, 0x0425
    2f5a:	20 97       	sbiw	r28, 0x00	; 0
    2f5c:	81 f4       	brne	.+32     	; 0x2f7e <free+0x3e>
    2f5e:	20 81       	ld	r18, Z
    2f60:	31 81       	ldd	r19, Z+1	; 0x01
    2f62:	28 0f       	add	r18, r24
    2f64:	39 1f       	adc	r19, r25
    2f66:	80 91 22 04 	lds	r24, 0x0422
    2f6a:	90 91 23 04 	lds	r25, 0x0423
    2f6e:	82 17       	cp	r24, r18
    2f70:	93 07       	cpc	r25, r19
    2f72:	79 f5       	brne	.+94     	; 0x2fd2 <free+0x92>
    2f74:	f0 93 23 04 	sts	0x0423, r31
    2f78:	e0 93 22 04 	sts	0x0422, r30
    2f7c:	6d c0       	rjmp	.+218    	; 0x3058 <free+0x118>
    2f7e:	de 01       	movw	r26, r28
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	ae 17       	cp	r26, r30
    2f86:	bf 07       	cpc	r27, r31
    2f88:	50 f4       	brcc	.+20     	; 0x2f9e <free+0x5e>
    2f8a:	12 96       	adiw	r26, 0x02	; 2
    2f8c:	4d 91       	ld	r20, X+
    2f8e:	5c 91       	ld	r21, X
    2f90:	13 97       	sbiw	r26, 0x03	; 3
    2f92:	9d 01       	movw	r18, r26
    2f94:	41 15       	cp	r20, r1
    2f96:	51 05       	cpc	r21, r1
    2f98:	09 f1       	breq	.+66     	; 0x2fdc <free+0x9c>
    2f9a:	da 01       	movw	r26, r20
    2f9c:	f3 cf       	rjmp	.-26     	; 0x2f84 <free+0x44>
    2f9e:	b3 83       	std	Z+3, r27	; 0x03
    2fa0:	a2 83       	std	Z+2, r26	; 0x02
    2fa2:	40 81       	ld	r20, Z
    2fa4:	51 81       	ldd	r21, Z+1	; 0x01
    2fa6:	84 0f       	add	r24, r20
    2fa8:	95 1f       	adc	r25, r21
    2faa:	8a 17       	cp	r24, r26
    2fac:	9b 07       	cpc	r25, r27
    2fae:	71 f4       	brne	.+28     	; 0x2fcc <free+0x8c>
    2fb0:	8d 91       	ld	r24, X+
    2fb2:	9c 91       	ld	r25, X
    2fb4:	11 97       	sbiw	r26, 0x01	; 1
    2fb6:	84 0f       	add	r24, r20
    2fb8:	95 1f       	adc	r25, r21
    2fba:	02 96       	adiw	r24, 0x02	; 2
    2fbc:	91 83       	std	Z+1, r25	; 0x01
    2fbe:	80 83       	st	Z, r24
    2fc0:	12 96       	adiw	r26, 0x02	; 2
    2fc2:	8d 91       	ld	r24, X+
    2fc4:	9c 91       	ld	r25, X
    2fc6:	13 97       	sbiw	r26, 0x03	; 3
    2fc8:	93 83       	std	Z+3, r25	; 0x03
    2fca:	82 83       	std	Z+2, r24	; 0x02
    2fcc:	21 15       	cp	r18, r1
    2fce:	31 05       	cpc	r19, r1
    2fd0:	29 f4       	brne	.+10     	; 0x2fdc <free+0x9c>
    2fd2:	f0 93 25 04 	sts	0x0425, r31
    2fd6:	e0 93 24 04 	sts	0x0424, r30
    2fda:	3e c0       	rjmp	.+124    	; 0x3058 <free+0x118>
    2fdc:	d9 01       	movw	r26, r18
    2fde:	13 96       	adiw	r26, 0x03	; 3
    2fe0:	fc 93       	st	X, r31
    2fe2:	ee 93       	st	-X, r30
    2fe4:	12 97       	sbiw	r26, 0x02	; 2
    2fe6:	4d 91       	ld	r20, X+
    2fe8:	5d 91       	ld	r21, X+
    2fea:	a4 0f       	add	r26, r20
    2fec:	b5 1f       	adc	r27, r21
    2fee:	ea 17       	cp	r30, r26
    2ff0:	fb 07       	cpc	r31, r27
    2ff2:	79 f4       	brne	.+30     	; 0x3012 <free+0xd2>
    2ff4:	80 81       	ld	r24, Z
    2ff6:	91 81       	ldd	r25, Z+1	; 0x01
    2ff8:	84 0f       	add	r24, r20
    2ffa:	95 1f       	adc	r25, r21
    2ffc:	02 96       	adiw	r24, 0x02	; 2
    2ffe:	d9 01       	movw	r26, r18
    3000:	11 96       	adiw	r26, 0x01	; 1
    3002:	9c 93       	st	X, r25
    3004:	8e 93       	st	-X, r24
    3006:	82 81       	ldd	r24, Z+2	; 0x02
    3008:	93 81       	ldd	r25, Z+3	; 0x03
    300a:	13 96       	adiw	r26, 0x03	; 3
    300c:	9c 93       	st	X, r25
    300e:	8e 93       	st	-X, r24
    3010:	12 97       	sbiw	r26, 0x02	; 2
    3012:	e0 e0       	ldi	r30, 0x00	; 0
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	8a 81       	ldd	r24, Y+2	; 0x02
    3018:	9b 81       	ldd	r25, Y+3	; 0x03
    301a:	00 97       	sbiw	r24, 0x00	; 0
    301c:	19 f0       	breq	.+6      	; 0x3024 <free+0xe4>
    301e:	fe 01       	movw	r30, r28
    3020:	ec 01       	movw	r28, r24
    3022:	f9 cf       	rjmp	.-14     	; 0x3016 <free+0xd6>
    3024:	ce 01       	movw	r24, r28
    3026:	02 96       	adiw	r24, 0x02	; 2
    3028:	28 81       	ld	r18, Y
    302a:	39 81       	ldd	r19, Y+1	; 0x01
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	20 91 22 04 	lds	r18, 0x0422
    3034:	30 91 23 04 	lds	r19, 0x0423
    3038:	28 17       	cp	r18, r24
    303a:	39 07       	cpc	r19, r25
    303c:	69 f4       	brne	.+26     	; 0x3058 <free+0x118>
    303e:	30 97       	sbiw	r30, 0x00	; 0
    3040:	29 f4       	brne	.+10     	; 0x304c <free+0x10c>
    3042:	10 92 25 04 	sts	0x0425, r1
    3046:	10 92 24 04 	sts	0x0424, r1
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <free+0x110>
    304c:	13 82       	std	Z+3, r1	; 0x03
    304e:	12 82       	std	Z+2, r1	; 0x02
    3050:	d0 93 23 04 	sts	0x0423, r29
    3054:	c0 93 22 04 	sts	0x0422, r28
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	08 95       	ret

0000305e <printf>:
    305e:	a0 e0       	ldi	r26, 0x00	; 0
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e5 e3       	ldi	r30, 0x35	; 53
    3064:	f8 e1       	ldi	r31, 0x18	; 24
    3066:	0c 94 cb 1a 	jmp	0x3596	; 0x3596 <__prologue_saves__+0x20>
    306a:	fe 01       	movw	r30, r28
    306c:	35 96       	adiw	r30, 0x05	; 5
    306e:	61 91       	ld	r22, Z+
    3070:	71 91       	ld	r23, Z+
    3072:	af 01       	movw	r20, r30
    3074:	80 91 28 04 	lds	r24, 0x0428
    3078:	90 91 29 04 	lds	r25, 0x0429
    307c:	0e 94 43 18 	call	0x3086	; 0x3086 <vfprintf>
    3080:	e2 e0       	ldi	r30, 0x02	; 2
    3082:	0c 94 e7 1a 	jmp	0x35ce	; 0x35ce <__epilogue_restores__+0x20>

00003086 <vfprintf>:
    3086:	ac e0       	ldi	r26, 0x0C	; 12
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	e9 e4       	ldi	r30, 0x49	; 73
    308c:	f8 e1       	ldi	r31, 0x18	; 24
    308e:	0c 94 bb 1a 	jmp	0x3576	; 0x3576 <__prologue_saves__>
    3092:	7c 01       	movw	r14, r24
    3094:	6b 01       	movw	r12, r22
    3096:	8a 01       	movw	r16, r20
    3098:	fc 01       	movw	r30, r24
    309a:	17 82       	std	Z+7, r1	; 0x07
    309c:	16 82       	std	Z+6, r1	; 0x06
    309e:	83 81       	ldd	r24, Z+3	; 0x03
    30a0:	81 ff       	sbrs	r24, 1
    30a2:	bd c1       	rjmp	.+890    	; 0x341e <vfprintf+0x398>
    30a4:	ce 01       	movw	r24, r28
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	4c 01       	movw	r8, r24
    30aa:	f7 01       	movw	r30, r14
    30ac:	93 81       	ldd	r25, Z+3	; 0x03
    30ae:	f6 01       	movw	r30, r12
    30b0:	93 fd       	sbrc	r25, 3
    30b2:	85 91       	lpm	r24, Z+
    30b4:	93 ff       	sbrs	r25, 3
    30b6:	81 91       	ld	r24, Z+
    30b8:	6f 01       	movw	r12, r30
    30ba:	88 23       	and	r24, r24
    30bc:	09 f4       	brne	.+2      	; 0x30c0 <vfprintf+0x3a>
    30be:	ab c1       	rjmp	.+854    	; 0x3416 <vfprintf+0x390>
    30c0:	85 32       	cpi	r24, 0x25	; 37
    30c2:	39 f4       	brne	.+14     	; 0x30d2 <vfprintf+0x4c>
    30c4:	93 fd       	sbrc	r25, 3
    30c6:	85 91       	lpm	r24, Z+
    30c8:	93 ff       	sbrs	r25, 3
    30ca:	81 91       	ld	r24, Z+
    30cc:	6f 01       	movw	r12, r30
    30ce:	85 32       	cpi	r24, 0x25	; 37
    30d0:	29 f4       	brne	.+10     	; 0x30dc <vfprintf+0x56>
    30d2:	b7 01       	movw	r22, r14
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    30da:	e7 cf       	rjmp	.-50     	; 0x30aa <vfprintf+0x24>
    30dc:	51 2c       	mov	r5, r1
    30de:	31 2c       	mov	r3, r1
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	20 32       	cpi	r18, 0x20	; 32
    30e4:	a0 f4       	brcc	.+40     	; 0x310e <vfprintf+0x88>
    30e6:	8b 32       	cpi	r24, 0x2B	; 43
    30e8:	69 f0       	breq	.+26     	; 0x3104 <vfprintf+0x7e>
    30ea:	30 f4       	brcc	.+12     	; 0x30f8 <vfprintf+0x72>
    30ec:	80 32       	cpi	r24, 0x20	; 32
    30ee:	59 f0       	breq	.+22     	; 0x3106 <vfprintf+0x80>
    30f0:	83 32       	cpi	r24, 0x23	; 35
    30f2:	69 f4       	brne	.+26     	; 0x310e <vfprintf+0x88>
    30f4:	20 61       	ori	r18, 0x10	; 16
    30f6:	2c c0       	rjmp	.+88     	; 0x3150 <vfprintf+0xca>
    30f8:	8d 32       	cpi	r24, 0x2D	; 45
    30fa:	39 f0       	breq	.+14     	; 0x310a <vfprintf+0x84>
    30fc:	80 33       	cpi	r24, 0x30	; 48
    30fe:	39 f4       	brne	.+14     	; 0x310e <vfprintf+0x88>
    3100:	21 60       	ori	r18, 0x01	; 1
    3102:	26 c0       	rjmp	.+76     	; 0x3150 <vfprintf+0xca>
    3104:	22 60       	ori	r18, 0x02	; 2
    3106:	24 60       	ori	r18, 0x04	; 4
    3108:	23 c0       	rjmp	.+70     	; 0x3150 <vfprintf+0xca>
    310a:	28 60       	ori	r18, 0x08	; 8
    310c:	21 c0       	rjmp	.+66     	; 0x3150 <vfprintf+0xca>
    310e:	27 fd       	sbrc	r18, 7
    3110:	27 c0       	rjmp	.+78     	; 0x3160 <vfprintf+0xda>
    3112:	30 ed       	ldi	r19, 0xD0	; 208
    3114:	38 0f       	add	r19, r24
    3116:	3a 30       	cpi	r19, 0x0A	; 10
    3118:	78 f4       	brcc	.+30     	; 0x3138 <vfprintf+0xb2>
    311a:	26 ff       	sbrs	r18, 6
    311c:	06 c0       	rjmp	.+12     	; 0x312a <vfprintf+0xa4>
    311e:	fa e0       	ldi	r31, 0x0A	; 10
    3120:	5f 9e       	mul	r5, r31
    3122:	30 0d       	add	r19, r0
    3124:	11 24       	eor	r1, r1
    3126:	53 2e       	mov	r5, r19
    3128:	13 c0       	rjmp	.+38     	; 0x3150 <vfprintf+0xca>
    312a:	8a e0       	ldi	r24, 0x0A	; 10
    312c:	38 9e       	mul	r3, r24
    312e:	30 0d       	add	r19, r0
    3130:	11 24       	eor	r1, r1
    3132:	33 2e       	mov	r3, r19
    3134:	20 62       	ori	r18, 0x20	; 32
    3136:	0c c0       	rjmp	.+24     	; 0x3150 <vfprintf+0xca>
    3138:	8e 32       	cpi	r24, 0x2E	; 46
    313a:	21 f4       	brne	.+8      	; 0x3144 <vfprintf+0xbe>
    313c:	26 fd       	sbrc	r18, 6
    313e:	6b c1       	rjmp	.+726    	; 0x3416 <vfprintf+0x390>
    3140:	20 64       	ori	r18, 0x40	; 64
    3142:	06 c0       	rjmp	.+12     	; 0x3150 <vfprintf+0xca>
    3144:	8c 36       	cpi	r24, 0x6C	; 108
    3146:	11 f4       	brne	.+4      	; 0x314c <vfprintf+0xc6>
    3148:	20 68       	ori	r18, 0x80	; 128
    314a:	02 c0       	rjmp	.+4      	; 0x3150 <vfprintf+0xca>
    314c:	88 36       	cpi	r24, 0x68	; 104
    314e:	41 f4       	brne	.+16     	; 0x3160 <vfprintf+0xda>
    3150:	f6 01       	movw	r30, r12
    3152:	93 fd       	sbrc	r25, 3
    3154:	85 91       	lpm	r24, Z+
    3156:	93 ff       	sbrs	r25, 3
    3158:	81 91       	ld	r24, Z+
    315a:	6f 01       	movw	r12, r30
    315c:	81 11       	cpse	r24, r1
    315e:	c1 cf       	rjmp	.-126    	; 0x30e2 <vfprintf+0x5c>
    3160:	98 2f       	mov	r25, r24
    3162:	9f 7d       	andi	r25, 0xDF	; 223
    3164:	95 54       	subi	r25, 0x45	; 69
    3166:	93 30       	cpi	r25, 0x03	; 3
    3168:	28 f4       	brcc	.+10     	; 0x3174 <vfprintf+0xee>
    316a:	0c 5f       	subi	r16, 0xFC	; 252
    316c:	1f 4f       	sbci	r17, 0xFF	; 255
    316e:	ff e3       	ldi	r31, 0x3F	; 63
    3170:	f9 83       	std	Y+1, r31	; 0x01
    3172:	0d c0       	rjmp	.+26     	; 0x318e <vfprintf+0x108>
    3174:	83 36       	cpi	r24, 0x63	; 99
    3176:	31 f0       	breq	.+12     	; 0x3184 <vfprintf+0xfe>
    3178:	83 37       	cpi	r24, 0x73	; 115
    317a:	71 f0       	breq	.+28     	; 0x3198 <vfprintf+0x112>
    317c:	83 35       	cpi	r24, 0x53	; 83
    317e:	09 f0       	breq	.+2      	; 0x3182 <vfprintf+0xfc>
    3180:	5b c0       	rjmp	.+182    	; 0x3238 <vfprintf+0x1b2>
    3182:	22 c0       	rjmp	.+68     	; 0x31c8 <vfprintf+0x142>
    3184:	f8 01       	movw	r30, r16
    3186:	80 81       	ld	r24, Z
    3188:	89 83       	std	Y+1, r24	; 0x01
    318a:	0e 5f       	subi	r16, 0xFE	; 254
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	44 24       	eor	r4, r4
    3190:	43 94       	inc	r4
    3192:	51 2c       	mov	r5, r1
    3194:	54 01       	movw	r10, r8
    3196:	15 c0       	rjmp	.+42     	; 0x31c2 <vfprintf+0x13c>
    3198:	38 01       	movw	r6, r16
    319a:	f2 e0       	ldi	r31, 0x02	; 2
    319c:	6f 0e       	add	r6, r31
    319e:	71 1c       	adc	r7, r1
    31a0:	f8 01       	movw	r30, r16
    31a2:	a0 80       	ld	r10, Z
    31a4:	b1 80       	ldd	r11, Z+1	; 0x01
    31a6:	26 ff       	sbrs	r18, 6
    31a8:	03 c0       	rjmp	.+6      	; 0x31b0 <vfprintf+0x12a>
    31aa:	65 2d       	mov	r22, r5
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x12e>
    31b0:	6f ef       	ldi	r22, 0xFF	; 255
    31b2:	7f ef       	ldi	r23, 0xFF	; 255
    31b4:	c5 01       	movw	r24, r10
    31b6:	2c 87       	std	Y+12, r18	; 0x0c
    31b8:	0e 94 20 1a 	call	0x3440	; 0x3440 <strnlen>
    31bc:	2c 01       	movw	r4, r24
    31be:	83 01       	movw	r16, r6
    31c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    31c2:	2f 77       	andi	r18, 0x7F	; 127
    31c4:	22 2e       	mov	r2, r18
    31c6:	17 c0       	rjmp	.+46     	; 0x31f6 <vfprintf+0x170>
    31c8:	38 01       	movw	r6, r16
    31ca:	f2 e0       	ldi	r31, 0x02	; 2
    31cc:	6f 0e       	add	r6, r31
    31ce:	71 1c       	adc	r7, r1
    31d0:	f8 01       	movw	r30, r16
    31d2:	a0 80       	ld	r10, Z
    31d4:	b1 80       	ldd	r11, Z+1	; 0x01
    31d6:	26 ff       	sbrs	r18, 6
    31d8:	03 c0       	rjmp	.+6      	; 0x31e0 <vfprintf+0x15a>
    31da:	65 2d       	mov	r22, r5
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <vfprintf+0x15e>
    31e0:	6f ef       	ldi	r22, 0xFF	; 255
    31e2:	7f ef       	ldi	r23, 0xFF	; 255
    31e4:	c5 01       	movw	r24, r10
    31e6:	2c 87       	std	Y+12, r18	; 0x0c
    31e8:	0e 94 15 1a 	call	0x342a	; 0x342a <strnlen_P>
    31ec:	2c 01       	movw	r4, r24
    31ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    31f0:	20 68       	ori	r18, 0x80	; 128
    31f2:	22 2e       	mov	r2, r18
    31f4:	83 01       	movw	r16, r6
    31f6:	23 fc       	sbrc	r2, 3
    31f8:	1b c0       	rjmp	.+54     	; 0x3230 <vfprintf+0x1aa>
    31fa:	83 2d       	mov	r24, r3
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	48 16       	cp	r4, r24
    3200:	59 06       	cpc	r5, r25
    3202:	b0 f4       	brcc	.+44     	; 0x3230 <vfprintf+0x1aa>
    3204:	b7 01       	movw	r22, r14
    3206:	80 e2       	ldi	r24, 0x20	; 32
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    320e:	3a 94       	dec	r3
    3210:	f4 cf       	rjmp	.-24     	; 0x31fa <vfprintf+0x174>
    3212:	f5 01       	movw	r30, r10
    3214:	27 fc       	sbrc	r2, 7
    3216:	85 91       	lpm	r24, Z+
    3218:	27 fe       	sbrs	r2, 7
    321a:	81 91       	ld	r24, Z+
    321c:	5f 01       	movw	r10, r30
    321e:	b7 01       	movw	r22, r14
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    3226:	31 10       	cpse	r3, r1
    3228:	3a 94       	dec	r3
    322a:	f1 e0       	ldi	r31, 0x01	; 1
    322c:	4f 1a       	sub	r4, r31
    322e:	51 08       	sbc	r5, r1
    3230:	41 14       	cp	r4, r1
    3232:	51 04       	cpc	r5, r1
    3234:	71 f7       	brne	.-36     	; 0x3212 <vfprintf+0x18c>
    3236:	e5 c0       	rjmp	.+458    	; 0x3402 <vfprintf+0x37c>
    3238:	84 36       	cpi	r24, 0x64	; 100
    323a:	11 f0       	breq	.+4      	; 0x3240 <vfprintf+0x1ba>
    323c:	89 36       	cpi	r24, 0x69	; 105
    323e:	39 f5       	brne	.+78     	; 0x328e <vfprintf+0x208>
    3240:	f8 01       	movw	r30, r16
    3242:	27 ff       	sbrs	r18, 7
    3244:	07 c0       	rjmp	.+14     	; 0x3254 <vfprintf+0x1ce>
    3246:	60 81       	ld	r22, Z
    3248:	71 81       	ldd	r23, Z+1	; 0x01
    324a:	82 81       	ldd	r24, Z+2	; 0x02
    324c:	93 81       	ldd	r25, Z+3	; 0x03
    324e:	0c 5f       	subi	r16, 0xFC	; 252
    3250:	1f 4f       	sbci	r17, 0xFF	; 255
    3252:	08 c0       	rjmp	.+16     	; 0x3264 <vfprintf+0x1de>
    3254:	60 81       	ld	r22, Z
    3256:	71 81       	ldd	r23, Z+1	; 0x01
    3258:	88 27       	eor	r24, r24
    325a:	77 fd       	sbrc	r23, 7
    325c:	80 95       	com	r24
    325e:	98 2f       	mov	r25, r24
    3260:	0e 5f       	subi	r16, 0xFE	; 254
    3262:	1f 4f       	sbci	r17, 0xFF	; 255
    3264:	2f 76       	andi	r18, 0x6F	; 111
    3266:	b2 2e       	mov	r11, r18
    3268:	97 ff       	sbrs	r25, 7
    326a:	09 c0       	rjmp	.+18     	; 0x327e <vfprintf+0x1f8>
    326c:	90 95       	com	r25
    326e:	80 95       	com	r24
    3270:	70 95       	com	r23
    3272:	61 95       	neg	r22
    3274:	7f 4f       	sbci	r23, 0xFF	; 255
    3276:	8f 4f       	sbci	r24, 0xFF	; 255
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	20 68       	ori	r18, 0x80	; 128
    327c:	b2 2e       	mov	r11, r18
    327e:	2a e0       	ldi	r18, 0x0A	; 10
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	a4 01       	movw	r20, r8
    3284:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__ultoa_invert>
    3288:	a8 2e       	mov	r10, r24
    328a:	a8 18       	sub	r10, r8
    328c:	44 c0       	rjmp	.+136    	; 0x3316 <vfprintf+0x290>
    328e:	85 37       	cpi	r24, 0x75	; 117
    3290:	29 f4       	brne	.+10     	; 0x329c <vfprintf+0x216>
    3292:	2f 7e       	andi	r18, 0xEF	; 239
    3294:	b2 2e       	mov	r11, r18
    3296:	2a e0       	ldi	r18, 0x0A	; 10
    3298:	30 e0       	ldi	r19, 0x00	; 0
    329a:	25 c0       	rjmp	.+74     	; 0x32e6 <vfprintf+0x260>
    329c:	f2 2f       	mov	r31, r18
    329e:	f9 7f       	andi	r31, 0xF9	; 249
    32a0:	bf 2e       	mov	r11, r31
    32a2:	8f 36       	cpi	r24, 0x6F	; 111
    32a4:	c1 f0       	breq	.+48     	; 0x32d6 <vfprintf+0x250>
    32a6:	18 f4       	brcc	.+6      	; 0x32ae <vfprintf+0x228>
    32a8:	88 35       	cpi	r24, 0x58	; 88
    32aa:	79 f0       	breq	.+30     	; 0x32ca <vfprintf+0x244>
    32ac:	b4 c0       	rjmp	.+360    	; 0x3416 <vfprintf+0x390>
    32ae:	80 37       	cpi	r24, 0x70	; 112
    32b0:	19 f0       	breq	.+6      	; 0x32b8 <vfprintf+0x232>
    32b2:	88 37       	cpi	r24, 0x78	; 120
    32b4:	21 f0       	breq	.+8      	; 0x32be <vfprintf+0x238>
    32b6:	af c0       	rjmp	.+350    	; 0x3416 <vfprintf+0x390>
    32b8:	2f 2f       	mov	r18, r31
    32ba:	20 61       	ori	r18, 0x10	; 16
    32bc:	b2 2e       	mov	r11, r18
    32be:	b4 fe       	sbrs	r11, 4
    32c0:	0d c0       	rjmp	.+26     	; 0x32dc <vfprintf+0x256>
    32c2:	8b 2d       	mov	r24, r11
    32c4:	84 60       	ori	r24, 0x04	; 4
    32c6:	b8 2e       	mov	r11, r24
    32c8:	09 c0       	rjmp	.+18     	; 0x32dc <vfprintf+0x256>
    32ca:	24 ff       	sbrs	r18, 4
    32cc:	0a c0       	rjmp	.+20     	; 0x32e2 <vfprintf+0x25c>
    32ce:	9f 2f       	mov	r25, r31
    32d0:	96 60       	ori	r25, 0x06	; 6
    32d2:	b9 2e       	mov	r11, r25
    32d4:	06 c0       	rjmp	.+12     	; 0x32e2 <vfprintf+0x25c>
    32d6:	28 e0       	ldi	r18, 0x08	; 8
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <vfprintf+0x260>
    32dc:	20 e1       	ldi	r18, 0x10	; 16
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <vfprintf+0x260>
    32e2:	20 e1       	ldi	r18, 0x10	; 16
    32e4:	32 e0       	ldi	r19, 0x02	; 2
    32e6:	f8 01       	movw	r30, r16
    32e8:	b7 fe       	sbrs	r11, 7
    32ea:	07 c0       	rjmp	.+14     	; 0x32fa <vfprintf+0x274>
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	0c 5f       	subi	r16, 0xFC	; 252
    32f6:	1f 4f       	sbci	r17, 0xFF	; 255
    32f8:	06 c0       	rjmp	.+12     	; 0x3306 <vfprintf+0x280>
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 5f       	subi	r16, 0xFE	; 254
    3304:	1f 4f       	sbci	r17, 0xFF	; 255
    3306:	a4 01       	movw	r20, r8
    3308:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <__ultoa_invert>
    330c:	a8 2e       	mov	r10, r24
    330e:	a8 18       	sub	r10, r8
    3310:	fb 2d       	mov	r31, r11
    3312:	ff 77       	andi	r31, 0x7F	; 127
    3314:	bf 2e       	mov	r11, r31
    3316:	b6 fe       	sbrs	r11, 6
    3318:	0b c0       	rjmp	.+22     	; 0x3330 <vfprintf+0x2aa>
    331a:	2b 2d       	mov	r18, r11
    331c:	2e 7f       	andi	r18, 0xFE	; 254
    331e:	a5 14       	cp	r10, r5
    3320:	50 f4       	brcc	.+20     	; 0x3336 <vfprintf+0x2b0>
    3322:	b4 fe       	sbrs	r11, 4
    3324:	0a c0       	rjmp	.+20     	; 0x333a <vfprintf+0x2b4>
    3326:	b2 fc       	sbrc	r11, 2
    3328:	08 c0       	rjmp	.+16     	; 0x333a <vfprintf+0x2b4>
    332a:	2b 2d       	mov	r18, r11
    332c:	2e 7e       	andi	r18, 0xEE	; 238
    332e:	05 c0       	rjmp	.+10     	; 0x333a <vfprintf+0x2b4>
    3330:	7a 2c       	mov	r7, r10
    3332:	2b 2d       	mov	r18, r11
    3334:	03 c0       	rjmp	.+6      	; 0x333c <vfprintf+0x2b6>
    3336:	7a 2c       	mov	r7, r10
    3338:	01 c0       	rjmp	.+2      	; 0x333c <vfprintf+0x2b6>
    333a:	75 2c       	mov	r7, r5
    333c:	24 ff       	sbrs	r18, 4
    333e:	0d c0       	rjmp	.+26     	; 0x335a <vfprintf+0x2d4>
    3340:	fe 01       	movw	r30, r28
    3342:	ea 0d       	add	r30, r10
    3344:	f1 1d       	adc	r31, r1
    3346:	80 81       	ld	r24, Z
    3348:	80 33       	cpi	r24, 0x30	; 48
    334a:	11 f4       	brne	.+4      	; 0x3350 <vfprintf+0x2ca>
    334c:	29 7e       	andi	r18, 0xE9	; 233
    334e:	09 c0       	rjmp	.+18     	; 0x3362 <vfprintf+0x2dc>
    3350:	22 ff       	sbrs	r18, 2
    3352:	06 c0       	rjmp	.+12     	; 0x3360 <vfprintf+0x2da>
    3354:	73 94       	inc	r7
    3356:	73 94       	inc	r7
    3358:	04 c0       	rjmp	.+8      	; 0x3362 <vfprintf+0x2dc>
    335a:	82 2f       	mov	r24, r18
    335c:	86 78       	andi	r24, 0x86	; 134
    335e:	09 f0       	breq	.+2      	; 0x3362 <vfprintf+0x2dc>
    3360:	73 94       	inc	r7
    3362:	23 fd       	sbrc	r18, 3
    3364:	13 c0       	rjmp	.+38     	; 0x338c <vfprintf+0x306>
    3366:	20 ff       	sbrs	r18, 0
    3368:	06 c0       	rjmp	.+12     	; 0x3376 <vfprintf+0x2f0>
    336a:	5a 2c       	mov	r5, r10
    336c:	73 14       	cp	r7, r3
    336e:	18 f4       	brcc	.+6      	; 0x3376 <vfprintf+0x2f0>
    3370:	53 0c       	add	r5, r3
    3372:	57 18       	sub	r5, r7
    3374:	73 2c       	mov	r7, r3
    3376:	73 14       	cp	r7, r3
    3378:	68 f4       	brcc	.+26     	; 0x3394 <vfprintf+0x30e>
    337a:	b7 01       	movw	r22, r14
    337c:	80 e2       	ldi	r24, 0x20	; 32
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	2c 87       	std	Y+12, r18	; 0x0c
    3382:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    3386:	73 94       	inc	r7
    3388:	2c 85       	ldd	r18, Y+12	; 0x0c
    338a:	f5 cf       	rjmp	.-22     	; 0x3376 <vfprintf+0x2f0>
    338c:	73 14       	cp	r7, r3
    338e:	10 f4       	brcc	.+4      	; 0x3394 <vfprintf+0x30e>
    3390:	37 18       	sub	r3, r7
    3392:	01 c0       	rjmp	.+2      	; 0x3396 <vfprintf+0x310>
    3394:	31 2c       	mov	r3, r1
    3396:	24 ff       	sbrs	r18, 4
    3398:	12 c0       	rjmp	.+36     	; 0x33be <vfprintf+0x338>
    339a:	b7 01       	movw	r22, r14
    339c:	80 e3       	ldi	r24, 0x30	; 48
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	2c 87       	std	Y+12, r18	; 0x0c
    33a2:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    33a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    33a8:	22 ff       	sbrs	r18, 2
    33aa:	17 c0       	rjmp	.+46     	; 0x33da <vfprintf+0x354>
    33ac:	21 ff       	sbrs	r18, 1
    33ae:	03 c0       	rjmp	.+6      	; 0x33b6 <vfprintf+0x330>
    33b0:	88 e5       	ldi	r24, 0x58	; 88
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	02 c0       	rjmp	.+4      	; 0x33ba <vfprintf+0x334>
    33b6:	88 e7       	ldi	r24, 0x78	; 120
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	b7 01       	movw	r22, r14
    33bc:	0c c0       	rjmp	.+24     	; 0x33d6 <vfprintf+0x350>
    33be:	82 2f       	mov	r24, r18
    33c0:	86 78       	andi	r24, 0x86	; 134
    33c2:	59 f0       	breq	.+22     	; 0x33da <vfprintf+0x354>
    33c4:	21 fd       	sbrc	r18, 1
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <vfprintf+0x346>
    33c8:	80 e2       	ldi	r24, 0x20	; 32
    33ca:	01 c0       	rjmp	.+2      	; 0x33ce <vfprintf+0x348>
    33cc:	8b e2       	ldi	r24, 0x2B	; 43
    33ce:	27 fd       	sbrc	r18, 7
    33d0:	8d e2       	ldi	r24, 0x2D	; 45
    33d2:	b7 01       	movw	r22, r14
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    33da:	a5 14       	cp	r10, r5
    33dc:	38 f4       	brcc	.+14     	; 0x33ec <vfprintf+0x366>
    33de:	b7 01       	movw	r22, r14
    33e0:	80 e3       	ldi	r24, 0x30	; 48
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    33e8:	5a 94       	dec	r5
    33ea:	f7 cf       	rjmp	.-18     	; 0x33da <vfprintf+0x354>
    33ec:	aa 94       	dec	r10
    33ee:	f4 01       	movw	r30, r8
    33f0:	ea 0d       	add	r30, r10
    33f2:	f1 1d       	adc	r31, r1
    33f4:	80 81       	ld	r24, Z
    33f6:	b7 01       	movw	r22, r14
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    33fe:	a1 10       	cpse	r10, r1
    3400:	f5 cf       	rjmp	.-22     	; 0x33ec <vfprintf+0x366>
    3402:	33 20       	and	r3, r3
    3404:	09 f4       	brne	.+2      	; 0x3408 <vfprintf+0x382>
    3406:	51 ce       	rjmp	.-862    	; 0x30aa <vfprintf+0x24>
    3408:	b7 01       	movw	r22, r14
    340a:	80 e2       	ldi	r24, 0x20	; 32
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 2b 1a 	call	0x3456	; 0x3456 <fputc>
    3412:	3a 94       	dec	r3
    3414:	f6 cf       	rjmp	.-20     	; 0x3402 <vfprintf+0x37c>
    3416:	f7 01       	movw	r30, r14
    3418:	86 81       	ldd	r24, Z+6	; 0x06
    341a:	97 81       	ldd	r25, Z+7	; 0x07
    341c:	02 c0       	rjmp	.+4      	; 0x3422 <vfprintf+0x39c>
    341e:	8f ef       	ldi	r24, 0xFF	; 255
    3420:	9f ef       	ldi	r25, 0xFF	; 255
    3422:	2c 96       	adiw	r28, 0x0c	; 12
    3424:	e2 e1       	ldi	r30, 0x12	; 18
    3426:	0c 94 d7 1a 	jmp	0x35ae	; 0x35ae <__epilogue_restores__>

0000342a <strnlen_P>:
    342a:	fc 01       	movw	r30, r24
    342c:	05 90       	lpm	r0, Z+
    342e:	61 50       	subi	r22, 0x01	; 1
    3430:	70 40       	sbci	r23, 0x00	; 0
    3432:	01 10       	cpse	r0, r1
    3434:	d8 f7       	brcc	.-10     	; 0x342c <strnlen_P+0x2>
    3436:	80 95       	com	r24
    3438:	90 95       	com	r25
    343a:	8e 0f       	add	r24, r30
    343c:	9f 1f       	adc	r25, r31
    343e:	08 95       	ret

00003440 <strnlen>:
    3440:	fc 01       	movw	r30, r24
    3442:	61 50       	subi	r22, 0x01	; 1
    3444:	70 40       	sbci	r23, 0x00	; 0
    3446:	01 90       	ld	r0, Z+
    3448:	01 10       	cpse	r0, r1
    344a:	d8 f7       	brcc	.-10     	; 0x3442 <strnlen+0x2>
    344c:	80 95       	com	r24
    344e:	90 95       	com	r25
    3450:	8e 0f       	add	r24, r30
    3452:	9f 1f       	adc	r25, r31
    3454:	08 95       	ret

00003456 <fputc>:
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	18 2f       	mov	r17, r24
    3460:	09 2f       	mov	r16, r25
    3462:	eb 01       	movw	r28, r22
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	81 fd       	sbrc	r24, 1
    3468:	03 c0       	rjmp	.+6      	; 0x3470 <fputc+0x1a>
    346a:	8f ef       	ldi	r24, 0xFF	; 255
    346c:	9f ef       	ldi	r25, 0xFF	; 255
    346e:	20 c0       	rjmp	.+64     	; 0x34b0 <fputc+0x5a>
    3470:	82 ff       	sbrs	r24, 2
    3472:	10 c0       	rjmp	.+32     	; 0x3494 <fputc+0x3e>
    3474:	4e 81       	ldd	r20, Y+6	; 0x06
    3476:	5f 81       	ldd	r21, Y+7	; 0x07
    3478:	2c 81       	ldd	r18, Y+4	; 0x04
    347a:	3d 81       	ldd	r19, Y+5	; 0x05
    347c:	42 17       	cp	r20, r18
    347e:	53 07       	cpc	r21, r19
    3480:	7c f4       	brge	.+30     	; 0x34a0 <fputc+0x4a>
    3482:	e8 81       	ld	r30, Y
    3484:	f9 81       	ldd	r31, Y+1	; 0x01
    3486:	9f 01       	movw	r18, r30
    3488:	2f 5f       	subi	r18, 0xFF	; 255
    348a:	3f 4f       	sbci	r19, 0xFF	; 255
    348c:	39 83       	std	Y+1, r19	; 0x01
    348e:	28 83       	st	Y, r18
    3490:	10 83       	st	Z, r17
    3492:	06 c0       	rjmp	.+12     	; 0x34a0 <fputc+0x4a>
    3494:	e8 85       	ldd	r30, Y+8	; 0x08
    3496:	f9 85       	ldd	r31, Y+9	; 0x09
    3498:	81 2f       	mov	r24, r17
    349a:	09 95       	icall
    349c:	89 2b       	or	r24, r25
    349e:	29 f7       	brne	.-54     	; 0x346a <fputc+0x14>
    34a0:	2e 81       	ldd	r18, Y+6	; 0x06
    34a2:	3f 81       	ldd	r19, Y+7	; 0x07
    34a4:	2f 5f       	subi	r18, 0xFF	; 255
    34a6:	3f 4f       	sbci	r19, 0xFF	; 255
    34a8:	3f 83       	std	Y+7, r19	; 0x07
    34aa:	2e 83       	std	Y+6, r18	; 0x06
    34ac:	81 2f       	mov	r24, r17
    34ae:	90 2f       	mov	r25, r16
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret

000034ba <__ultoa_invert>:
    34ba:	fa 01       	movw	r30, r20
    34bc:	aa 27       	eor	r26, r26
    34be:	28 30       	cpi	r18, 0x08	; 8
    34c0:	51 f1       	breq	.+84     	; 0x3516 <__ultoa_invert+0x5c>
    34c2:	20 31       	cpi	r18, 0x10	; 16
    34c4:	81 f1       	breq	.+96     	; 0x3526 <__ultoa_invert+0x6c>
    34c6:	e8 94       	clt
    34c8:	6f 93       	push	r22
    34ca:	6e 7f       	andi	r22, 0xFE	; 254
    34cc:	6e 5f       	subi	r22, 0xFE	; 254
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255
    34d0:	8f 4f       	sbci	r24, 0xFF	; 255
    34d2:	9f 4f       	sbci	r25, 0xFF	; 255
    34d4:	af 4f       	sbci	r26, 0xFF	; 255
    34d6:	b1 e0       	ldi	r27, 0x01	; 1
    34d8:	3e d0       	rcall	.+124    	; 0x3556 <__ultoa_invert+0x9c>
    34da:	b4 e0       	ldi	r27, 0x04	; 4
    34dc:	3c d0       	rcall	.+120    	; 0x3556 <__ultoa_invert+0x9c>
    34de:	67 0f       	add	r22, r23
    34e0:	78 1f       	adc	r23, r24
    34e2:	89 1f       	adc	r24, r25
    34e4:	9a 1f       	adc	r25, r26
    34e6:	a1 1d       	adc	r26, r1
    34e8:	68 0f       	add	r22, r24
    34ea:	79 1f       	adc	r23, r25
    34ec:	8a 1f       	adc	r24, r26
    34ee:	91 1d       	adc	r25, r1
    34f0:	a1 1d       	adc	r26, r1
    34f2:	6a 0f       	add	r22, r26
    34f4:	71 1d       	adc	r23, r1
    34f6:	81 1d       	adc	r24, r1
    34f8:	91 1d       	adc	r25, r1
    34fa:	a1 1d       	adc	r26, r1
    34fc:	20 d0       	rcall	.+64     	; 0x353e <__ultoa_invert+0x84>
    34fe:	09 f4       	brne	.+2      	; 0x3502 <__ultoa_invert+0x48>
    3500:	68 94       	set
    3502:	3f 91       	pop	r19
    3504:	2a e0       	ldi	r18, 0x0A	; 10
    3506:	26 9f       	mul	r18, r22
    3508:	11 24       	eor	r1, r1
    350a:	30 19       	sub	r19, r0
    350c:	30 5d       	subi	r19, 0xD0	; 208
    350e:	31 93       	st	Z+, r19
    3510:	de f6       	brtc	.-74     	; 0x34c8 <__ultoa_invert+0xe>
    3512:	cf 01       	movw	r24, r30
    3514:	08 95       	ret
    3516:	46 2f       	mov	r20, r22
    3518:	47 70       	andi	r20, 0x07	; 7
    351a:	40 5d       	subi	r20, 0xD0	; 208
    351c:	41 93       	st	Z+, r20
    351e:	b3 e0       	ldi	r27, 0x03	; 3
    3520:	0f d0       	rcall	.+30     	; 0x3540 <__ultoa_invert+0x86>
    3522:	c9 f7       	brne	.-14     	; 0x3516 <__ultoa_invert+0x5c>
    3524:	f6 cf       	rjmp	.-20     	; 0x3512 <__ultoa_invert+0x58>
    3526:	46 2f       	mov	r20, r22
    3528:	4f 70       	andi	r20, 0x0F	; 15
    352a:	40 5d       	subi	r20, 0xD0	; 208
    352c:	4a 33       	cpi	r20, 0x3A	; 58
    352e:	18 f0       	brcs	.+6      	; 0x3536 <__ultoa_invert+0x7c>
    3530:	49 5d       	subi	r20, 0xD9	; 217
    3532:	31 fd       	sbrc	r19, 1
    3534:	40 52       	subi	r20, 0x20	; 32
    3536:	41 93       	st	Z+, r20
    3538:	02 d0       	rcall	.+4      	; 0x353e <__ultoa_invert+0x84>
    353a:	a9 f7       	brne	.-22     	; 0x3526 <__ultoa_invert+0x6c>
    353c:	ea cf       	rjmp	.-44     	; 0x3512 <__ultoa_invert+0x58>
    353e:	b4 e0       	ldi	r27, 0x04	; 4
    3540:	a6 95       	lsr	r26
    3542:	97 95       	ror	r25
    3544:	87 95       	ror	r24
    3546:	77 95       	ror	r23
    3548:	67 95       	ror	r22
    354a:	ba 95       	dec	r27
    354c:	c9 f7       	brne	.-14     	; 0x3540 <__ultoa_invert+0x86>
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	61 05       	cpc	r22, r1
    3552:	71 05       	cpc	r23, r1
    3554:	08 95       	ret
    3556:	9b 01       	movw	r18, r22
    3558:	ac 01       	movw	r20, r24
    355a:	0a 2e       	mov	r0, r26
    355c:	06 94       	lsr	r0
    355e:	57 95       	ror	r21
    3560:	47 95       	ror	r20
    3562:	37 95       	ror	r19
    3564:	27 95       	ror	r18
    3566:	ba 95       	dec	r27
    3568:	c9 f7       	brne	.-14     	; 0x355c <__ultoa_invert+0xa2>
    356a:	62 0f       	add	r22, r18
    356c:	73 1f       	adc	r23, r19
    356e:	84 1f       	adc	r24, r20
    3570:	95 1f       	adc	r25, r21
    3572:	a0 1d       	adc	r26, r0
    3574:	08 95       	ret

00003576 <__prologue_saves__>:
    3576:	2f 92       	push	r2
    3578:	3f 92       	push	r3
    357a:	4f 92       	push	r4
    357c:	5f 92       	push	r5
    357e:	6f 92       	push	r6
    3580:	7f 92       	push	r7
    3582:	8f 92       	push	r8
    3584:	9f 92       	push	r9
    3586:	af 92       	push	r10
    3588:	bf 92       	push	r11
    358a:	cf 92       	push	r12
    358c:	df 92       	push	r13
    358e:	ef 92       	push	r14
    3590:	ff 92       	push	r15
    3592:	0f 93       	push	r16
    3594:	1f 93       	push	r17
    3596:	cf 93       	push	r28
    3598:	df 93       	push	r29
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    359e:	ca 1b       	sub	r28, r26
    35a0:	db 0b       	sbc	r29, r27
    35a2:	0f b6       	in	r0, 0x3f	; 63
    35a4:	f8 94       	cli
    35a6:	de bf       	out	0x3e, r29	; 62
    35a8:	0f be       	out	0x3f, r0	; 63
    35aa:	cd bf       	out	0x3d, r28	; 61
    35ac:	09 94       	ijmp

000035ae <__epilogue_restores__>:
    35ae:	2a 88       	ldd	r2, Y+18	; 0x12
    35b0:	39 88       	ldd	r3, Y+17	; 0x11
    35b2:	48 88       	ldd	r4, Y+16	; 0x10
    35b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    35b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    35b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    35bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    35be:	aa 84       	ldd	r10, Y+10	; 0x0a
    35c0:	b9 84       	ldd	r11, Y+9	; 0x09
    35c2:	c8 84       	ldd	r12, Y+8	; 0x08
    35c4:	df 80       	ldd	r13, Y+7	; 0x07
    35c6:	ee 80       	ldd	r14, Y+6	; 0x06
    35c8:	fd 80       	ldd	r15, Y+5	; 0x05
    35ca:	0c 81       	ldd	r16, Y+4	; 0x04
    35cc:	1b 81       	ldd	r17, Y+3	; 0x03
    35ce:	aa 81       	ldd	r26, Y+2	; 0x02
    35d0:	b9 81       	ldd	r27, Y+1	; 0x01
    35d2:	ce 0f       	add	r28, r30
    35d4:	d1 1d       	adc	r29, r1
    35d6:	0f b6       	in	r0, 0x3f	; 63
    35d8:	f8 94       	cli
    35da:	de bf       	out	0x3e, r29	; 62
    35dc:	0f be       	out	0x3f, r0	; 63
    35de:	cd bf       	out	0x3d, r28	; 61
    35e0:	ed 01       	movw	r28, r26
    35e2:	08 95       	ret

000035e4 <_exit>:
    35e4:	f8 94       	cli

000035e6 <__stop_program>:
    35e6:	ff cf       	rjmp	.-2      	; 0x35e6 <__stop_program>
